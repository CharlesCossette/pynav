Search.setIndex({"docnames": ["_autosummary/navlie.batch", "_autosummary/navlie.batch.estimator", "_autosummary/navlie.batch.estimator.BatchEstimator", "_autosummary/navlie.batch.gaussian_mixtures", "_autosummary/navlie.batch.gaussian_mixtures.GaussianMixtureResidual", "_autosummary/navlie.batch.gaussian_mixtures.HessianSumMixtureResidual", "_autosummary/navlie.batch.gaussian_mixtures.MaxMixtureResidual", "_autosummary/navlie.batch.gaussian_mixtures.MaxSumMixtureResidual", "_autosummary/navlie.batch.gaussian_mixtures.SumMixtureResidual", "_autosummary/navlie.batch.losses", "_autosummary/navlie.batch.losses.CauchyLoss", "_autosummary/navlie.batch.losses.L2Loss", "_autosummary/navlie.batch.losses.LossFunction", "_autosummary/navlie.batch.problem", "_autosummary/navlie.batch.problem.OptimizationSummary", "_autosummary/navlie.batch.problem.Problem", "_autosummary/navlie.batch.residuals", "_autosummary/navlie.batch.residuals.MeasurementResidual", "_autosummary/navlie.batch.residuals.PriorResidual", "_autosummary/navlie.batch.residuals.ProcessResidual", "_autosummary/navlie.batch.residuals.Residual", "_autosummary/navlie.composite", "_autosummary/navlie.composite.CompositeInput", "_autosummary/navlie.composite.CompositeMeasurement", "_autosummary/navlie.composite.CompositeMeasurementModel", "_autosummary/navlie.composite.CompositeProcessModel", "_autosummary/navlie.composite.CompositeState", "_autosummary/navlie.datagen", "_autosummary/navlie.datagen.DataGenerator", "_autosummary/navlie.datagen.generate_measurement", "_autosummary/navlie.filters", "_autosummary/navlie.filters.CubatureKalmanFilter", "_autosummary/navlie.filters.ExtendedKalmanFilter", "_autosummary/navlie.filters.GaussHermiteKalmanFilter", "_autosummary/navlie.filters.GaussianSumFilter", "_autosummary/navlie.filters.InteractingModelFilter", "_autosummary/navlie.filters.IteratedKalmanFilter", "_autosummary/navlie.filters.SigmaPointKalmanFilter", "_autosummary/navlie.filters.UnscentedKalmanFilter", "_autosummary/navlie.filters.check_outlier", "_autosummary/navlie.filters.generate_sigmapoints", "_autosummary/navlie.filters.mean_state", "_autosummary/navlie.filters.run_filter", "_autosummary/navlie.filters.run_gsf_filter", "_autosummary/navlie.filters.run_imm_filter", "_autosummary/navlie.lib", "_autosummary/navlie.lib.camera", "_autosummary/navlie.lib.camera.PinholeCamera", "_autosummary/navlie.lib.camera.PoseMatrix", "_autosummary/navlie.lib.datasets", "_autosummary/navlie.lib.datasets.SimulatedInertialGPSDataset", "_autosummary/navlie.lib.datasets.SimulatedInertialLandmarkDataset", "_autosummary/navlie.lib.datasets.SimulatedPoseRangingDataset", "_autosummary/navlie.lib.datasets.generate_landmark_positions", "_autosummary/navlie.lib.imu", "_autosummary/navlie.lib.imu.G_matrix", "_autosummary/navlie.lib.imu.G_matrix_inv", "_autosummary/navlie.lib.imu.IMU", "_autosummary/navlie.lib.imu.IMUKinematics", "_autosummary/navlie.lib.imu.IMUState", "_autosummary/navlie.lib.imu.L_matrix", "_autosummary/navlie.lib.imu.M_matrix", "_autosummary/navlie.lib.imu.N_matrix", "_autosummary/navlie.lib.imu.U_matrix", "_autosummary/navlie.lib.imu.U_matrix_inv", "_autosummary/navlie.lib.imu.U_tilde_matrix", "_autosummary/navlie.lib.imu.adjoint_IE3", "_autosummary/navlie.lib.imu.delta_matrix", "_autosummary/navlie.lib.imu.get_unbiased_imu", "_autosummary/navlie.lib.imu.inverse_IE3", "_autosummary/navlie.lib.models", "_autosummary/navlie.lib.models.AbsolutePosition", "_autosummary/navlie.lib.models.AbsoluteVelocity", "_autosummary/navlie.lib.models.Altitude", "_autosummary/navlie.lib.models.BodyFrameVelocity", "_autosummary/navlie.lib.models.CameraProjection", "_autosummary/navlie.lib.models.DoubleIntegrator", "_autosummary/navlie.lib.models.DoubleIntegratorWithBias", "_autosummary/navlie.lib.models.GlobalPosition", "_autosummary/navlie.lib.models.Gravitometer", "_autosummary/navlie.lib.models.InvariantMeasurement", "_autosummary/navlie.lib.models.InvariantPointRelativePosition", "_autosummary/navlie.lib.models.LinearMeasurement", "_autosummary/navlie.lib.models.Magnetometer", "_autosummary/navlie.lib.models.OneDimensionalPositionVelocityRange", "_autosummary/navlie.lib.models.PointRelativePosition", "_autosummary/navlie.lib.models.PointRelativePositionSLAM", "_autosummary/navlie.lib.models.RangePointToAnchor", "_autosummary/navlie.lib.models.RangePoseToAnchor", "_autosummary/navlie.lib.models.RangePoseToPose", "_autosummary/navlie.lib.models.RangeRelativePose", "_autosummary/navlie.lib.models.RelativeBodyFrameVelocity", "_autosummary/navlie.lib.models.SingleIntegrator", "_autosummary/navlie.lib.preintegration", "_autosummary/navlie.lib.preintegration.AngularVelocityIncrement", "_autosummary/navlie.lib.preintegration.BodyVelocityIncrement", "_autosummary/navlie.lib.preintegration.IMUIncrement", "_autosummary/navlie.lib.preintegration.LinearIncrement", "_autosummary/navlie.lib.preintegration.PreintegratedAngularVelocity", "_autosummary/navlie.lib.preintegration.PreintegratedBodyVelocity", "_autosummary/navlie.lib.preintegration.PreintegratedIMUKinematics", "_autosummary/navlie.lib.preintegration.PreintegratedLinearModel", "_autosummary/navlie.lib.preintegration.PreintegratedWheelOdometry", "_autosummary/navlie.lib.preintegration.RelativeMotionIncrement", "_autosummary/navlie.lib.preintegration.WheelOdometryIncrement", "_autosummary/navlie.lib.states", "_autosummary/navlie.lib.states.MatrixLieGroupState", "_autosummary/navlie.lib.states.MixtureState", "_autosummary/navlie.lib.states.SE23State", "_autosummary/navlie.lib.states.SE2State", "_autosummary/navlie.lib.states.SE3State", "_autosummary/navlie.lib.states.SL3State", "_autosummary/navlie.lib.states.SO2State", "_autosummary/navlie.lib.states.SO3State", "_autosummary/navlie.lib.states.StampedValue", "_autosummary/navlie.lib.states.VectorInput", "_autosummary/navlie.lib.states.VectorState", "_autosummary/navlie.types", "_autosummary/navlie.types.Dataset", "_autosummary/navlie.types.Input", "_autosummary/navlie.types.Measurement", "_autosummary/navlie.types.MeasurementModel", "_autosummary/navlie.types.ProcessModel", "_autosummary/navlie.types.State", "_autosummary/navlie.types.StateWithCovariance", "_autosummary/navlie.utils", "_autosummary/navlie.utils.common", "_autosummary/navlie.utils.common.GaussianResult", "_autosummary/navlie.utils.common.GaussianResultList", "_autosummary/navlie.utils.common.MixtureResult", "_autosummary/navlie.utils.common.MixtureResultList", "_autosummary/navlie.utils.common.MonteCarloResult", "_autosummary/navlie.utils.common.associate_stamps", "_autosummary/navlie.utils.common.find_nearest_stamp_idx", "_autosummary/navlie.utils.common.jacobian", "_autosummary/navlie.utils.common.monte_carlo", "_autosummary/navlie.utils.common.randvec", "_autosummary/navlie.utils.common.schedule_sequential_measurements", "_autosummary/navlie.utils.common.state_interp", "_autosummary/navlie.utils.common.van_loans", "_autosummary/navlie.utils.mixture", "_autosummary/navlie.utils.mixture.gaussian_mixing", "_autosummary/navlie.utils.mixture.gaussian_mixing_vectorspace", "_autosummary/navlie.utils.mixture.reparametrize_gaussians_about_X_par", "_autosummary/navlie.utils.mixture.update_X", "_autosummary/navlie.utils.plot", "_autosummary/navlie.utils.plot.CameraPoseVisualizer", "_autosummary/navlie.utils.plot.plot_camera_poses", "_autosummary/navlie.utils.plot.plot_error", "_autosummary/navlie.utils.plot.plot_meas", "_autosummary/navlie.utils.plot.plot_meas_by_model", "_autosummary/navlie.utils.plot.plot_nees", "_autosummary/navlie.utils.plot.plot_poses", "_autosummary/navlie.utils.plot.set_axes_equal", "api", "index", "tutorial", "tutorial/batch", "tutorial/composite", "tutorial/jacobians", "tutorial/lie_groups", "tutorial/traditional"], "filenames": ["_autosummary/navlie.batch.rst", "_autosummary/navlie.batch.estimator.rst", "_autosummary/navlie.batch.estimator.BatchEstimator.rst", "_autosummary/navlie.batch.gaussian_mixtures.rst", "_autosummary/navlie.batch.gaussian_mixtures.GaussianMixtureResidual.rst", "_autosummary/navlie.batch.gaussian_mixtures.HessianSumMixtureResidual.rst", "_autosummary/navlie.batch.gaussian_mixtures.MaxMixtureResidual.rst", "_autosummary/navlie.batch.gaussian_mixtures.MaxSumMixtureResidual.rst", "_autosummary/navlie.batch.gaussian_mixtures.SumMixtureResidual.rst", "_autosummary/navlie.batch.losses.rst", "_autosummary/navlie.batch.losses.CauchyLoss.rst", "_autosummary/navlie.batch.losses.L2Loss.rst", "_autosummary/navlie.batch.losses.LossFunction.rst", "_autosummary/navlie.batch.problem.rst", "_autosummary/navlie.batch.problem.OptimizationSummary.rst", "_autosummary/navlie.batch.problem.Problem.rst", "_autosummary/navlie.batch.residuals.rst", "_autosummary/navlie.batch.residuals.MeasurementResidual.rst", "_autosummary/navlie.batch.residuals.PriorResidual.rst", "_autosummary/navlie.batch.residuals.ProcessResidual.rst", "_autosummary/navlie.batch.residuals.Residual.rst", "_autosummary/navlie.composite.rst", "_autosummary/navlie.composite.CompositeInput.rst", "_autosummary/navlie.composite.CompositeMeasurement.rst", "_autosummary/navlie.composite.CompositeMeasurementModel.rst", "_autosummary/navlie.composite.CompositeProcessModel.rst", "_autosummary/navlie.composite.CompositeState.rst", "_autosummary/navlie.datagen.rst", "_autosummary/navlie.datagen.DataGenerator.rst", "_autosummary/navlie.datagen.generate_measurement.rst", "_autosummary/navlie.filters.rst", "_autosummary/navlie.filters.CubatureKalmanFilter.rst", "_autosummary/navlie.filters.ExtendedKalmanFilter.rst", "_autosummary/navlie.filters.GaussHermiteKalmanFilter.rst", "_autosummary/navlie.filters.GaussianSumFilter.rst", "_autosummary/navlie.filters.InteractingModelFilter.rst", "_autosummary/navlie.filters.IteratedKalmanFilter.rst", "_autosummary/navlie.filters.SigmaPointKalmanFilter.rst", "_autosummary/navlie.filters.UnscentedKalmanFilter.rst", "_autosummary/navlie.filters.check_outlier.rst", "_autosummary/navlie.filters.generate_sigmapoints.rst", "_autosummary/navlie.filters.mean_state.rst", "_autosummary/navlie.filters.run_filter.rst", "_autosummary/navlie.filters.run_gsf_filter.rst", "_autosummary/navlie.filters.run_imm_filter.rst", "_autosummary/navlie.lib.rst", "_autosummary/navlie.lib.camera.rst", "_autosummary/navlie.lib.camera.PinholeCamera.rst", "_autosummary/navlie.lib.camera.PoseMatrix.rst", "_autosummary/navlie.lib.datasets.rst", "_autosummary/navlie.lib.datasets.SimulatedInertialGPSDataset.rst", "_autosummary/navlie.lib.datasets.SimulatedInertialLandmarkDataset.rst", "_autosummary/navlie.lib.datasets.SimulatedPoseRangingDataset.rst", "_autosummary/navlie.lib.datasets.generate_landmark_positions.rst", "_autosummary/navlie.lib.imu.rst", "_autosummary/navlie.lib.imu.G_matrix.rst", "_autosummary/navlie.lib.imu.G_matrix_inv.rst", "_autosummary/navlie.lib.imu.IMU.rst", "_autosummary/navlie.lib.imu.IMUKinematics.rst", "_autosummary/navlie.lib.imu.IMUState.rst", "_autosummary/navlie.lib.imu.L_matrix.rst", "_autosummary/navlie.lib.imu.M_matrix.rst", "_autosummary/navlie.lib.imu.N_matrix.rst", "_autosummary/navlie.lib.imu.U_matrix.rst", "_autosummary/navlie.lib.imu.U_matrix_inv.rst", "_autosummary/navlie.lib.imu.U_tilde_matrix.rst", "_autosummary/navlie.lib.imu.adjoint_IE3.rst", "_autosummary/navlie.lib.imu.delta_matrix.rst", "_autosummary/navlie.lib.imu.get_unbiased_imu.rst", "_autosummary/navlie.lib.imu.inverse_IE3.rst", "_autosummary/navlie.lib.models.rst", "_autosummary/navlie.lib.models.AbsolutePosition.rst", "_autosummary/navlie.lib.models.AbsoluteVelocity.rst", "_autosummary/navlie.lib.models.Altitude.rst", "_autosummary/navlie.lib.models.BodyFrameVelocity.rst", "_autosummary/navlie.lib.models.CameraProjection.rst", "_autosummary/navlie.lib.models.DoubleIntegrator.rst", "_autosummary/navlie.lib.models.DoubleIntegratorWithBias.rst", "_autosummary/navlie.lib.models.GlobalPosition.rst", "_autosummary/navlie.lib.models.Gravitometer.rst", "_autosummary/navlie.lib.models.InvariantMeasurement.rst", "_autosummary/navlie.lib.models.InvariantPointRelativePosition.rst", "_autosummary/navlie.lib.models.LinearMeasurement.rst", "_autosummary/navlie.lib.models.Magnetometer.rst", "_autosummary/navlie.lib.models.OneDimensionalPositionVelocityRange.rst", "_autosummary/navlie.lib.models.PointRelativePosition.rst", "_autosummary/navlie.lib.models.PointRelativePositionSLAM.rst", "_autosummary/navlie.lib.models.RangePointToAnchor.rst", "_autosummary/navlie.lib.models.RangePoseToAnchor.rst", "_autosummary/navlie.lib.models.RangePoseToPose.rst", "_autosummary/navlie.lib.models.RangeRelativePose.rst", "_autosummary/navlie.lib.models.RelativeBodyFrameVelocity.rst", "_autosummary/navlie.lib.models.SingleIntegrator.rst", "_autosummary/navlie.lib.preintegration.rst", "_autosummary/navlie.lib.preintegration.AngularVelocityIncrement.rst", "_autosummary/navlie.lib.preintegration.BodyVelocityIncrement.rst", "_autosummary/navlie.lib.preintegration.IMUIncrement.rst", "_autosummary/navlie.lib.preintegration.LinearIncrement.rst", "_autosummary/navlie.lib.preintegration.PreintegratedAngularVelocity.rst", "_autosummary/navlie.lib.preintegration.PreintegratedBodyVelocity.rst", "_autosummary/navlie.lib.preintegration.PreintegratedIMUKinematics.rst", "_autosummary/navlie.lib.preintegration.PreintegratedLinearModel.rst", "_autosummary/navlie.lib.preintegration.PreintegratedWheelOdometry.rst", "_autosummary/navlie.lib.preintegration.RelativeMotionIncrement.rst", "_autosummary/navlie.lib.preintegration.WheelOdometryIncrement.rst", "_autosummary/navlie.lib.states.rst", "_autosummary/navlie.lib.states.MatrixLieGroupState.rst", "_autosummary/navlie.lib.states.MixtureState.rst", "_autosummary/navlie.lib.states.SE23State.rst", "_autosummary/navlie.lib.states.SE2State.rst", "_autosummary/navlie.lib.states.SE3State.rst", "_autosummary/navlie.lib.states.SL3State.rst", "_autosummary/navlie.lib.states.SO2State.rst", "_autosummary/navlie.lib.states.SO3State.rst", "_autosummary/navlie.lib.states.StampedValue.rst", "_autosummary/navlie.lib.states.VectorInput.rst", "_autosummary/navlie.lib.states.VectorState.rst", "_autosummary/navlie.types.rst", "_autosummary/navlie.types.Dataset.rst", "_autosummary/navlie.types.Input.rst", "_autosummary/navlie.types.Measurement.rst", "_autosummary/navlie.types.MeasurementModel.rst", "_autosummary/navlie.types.ProcessModel.rst", "_autosummary/navlie.types.State.rst", "_autosummary/navlie.types.StateWithCovariance.rst", "_autosummary/navlie.utils.rst", "_autosummary/navlie.utils.common.rst", "_autosummary/navlie.utils.common.GaussianResult.rst", "_autosummary/navlie.utils.common.GaussianResultList.rst", "_autosummary/navlie.utils.common.MixtureResult.rst", "_autosummary/navlie.utils.common.MixtureResultList.rst", "_autosummary/navlie.utils.common.MonteCarloResult.rst", "_autosummary/navlie.utils.common.associate_stamps.rst", "_autosummary/navlie.utils.common.find_nearest_stamp_idx.rst", "_autosummary/navlie.utils.common.jacobian.rst", "_autosummary/navlie.utils.common.monte_carlo.rst", "_autosummary/navlie.utils.common.randvec.rst", "_autosummary/navlie.utils.common.schedule_sequential_measurements.rst", "_autosummary/navlie.utils.common.state_interp.rst", "_autosummary/navlie.utils.common.van_loans.rst", "_autosummary/navlie.utils.mixture.rst", "_autosummary/navlie.utils.mixture.gaussian_mixing.rst", "_autosummary/navlie.utils.mixture.gaussian_mixing_vectorspace.rst", "_autosummary/navlie.utils.mixture.reparametrize_gaussians_about_X_par.rst", "_autosummary/navlie.utils.mixture.update_X.rst", "_autosummary/navlie.utils.plot.rst", "_autosummary/navlie.utils.plot.CameraPoseVisualizer.rst", "_autosummary/navlie.utils.plot.plot_camera_poses.rst", "_autosummary/navlie.utils.plot.plot_error.rst", "_autosummary/navlie.utils.plot.plot_meas.rst", "_autosummary/navlie.utils.plot.plot_meas_by_model.rst", "_autosummary/navlie.utils.plot.plot_nees.rst", "_autosummary/navlie.utils.plot.plot_poses.rst", "_autosummary/navlie.utils.plot.set_axes_equal.rst", "api.rst", "index.rst", "tutorial.rst", "tutorial/batch.ipynb", "tutorial/composite.ipynb", "tutorial/jacobians.ipynb", "tutorial/lie_groups.ipynb", "tutorial/traditional.ipynb"], "titles": ["navlie.batch", "navlie.batch.estimator", "navlie.batch.estimator.BatchEstimator", "navlie.batch.gaussian_mixtures", "navlie.batch.gaussian_mixtures.GaussianMixtureResidual", "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual", "navlie.batch.gaussian_mixtures.MaxMixtureResidual", "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual", "navlie.batch.gaussian_mixtures.SumMixtureResidual", "navlie.batch.losses", "navlie.batch.losses.CauchyLoss", "navlie.batch.losses.L2Loss", "navlie.batch.losses.LossFunction", "navlie.batch.problem", "navlie.batch.problem.OptimizationSummary", "navlie.batch.problem.Problem", "navlie.batch.residuals", "navlie.batch.residuals.MeasurementResidual", "navlie.batch.residuals.PriorResidual", "navlie.batch.residuals.ProcessResidual", "navlie.batch.residuals.Residual", "navlie.composite", "navlie.composite.CompositeInput", "navlie.composite.CompositeMeasurement", "navlie.composite.CompositeMeasurementModel", "navlie.composite.CompositeProcessModel", "navlie.composite.CompositeState", "navlie.datagen", "navlie.datagen.DataGenerator", "navlie.datagen.generate_measurement", "navlie.filters", "navlie.filters.CubatureKalmanFilter", "navlie.filters.ExtendedKalmanFilter", "navlie.filters.GaussHermiteKalmanFilter", "navlie.filters.GaussianSumFilter", "navlie.filters.InteractingModelFilter", "navlie.filters.IteratedKalmanFilter", "navlie.filters.SigmaPointKalmanFilter", "navlie.filters.UnscentedKalmanFilter", "navlie.filters.check_outlier", "navlie.filters.generate_sigmapoints", "navlie.filters.mean_state", "navlie.filters.run_filter", "navlie.filters.run_gsf_filter", "navlie.filters.run_imm_filter", "navlie.lib", "navlie.lib.camera", "navlie.lib.camera.PinholeCamera", "navlie.lib.camera.PoseMatrix", "navlie.lib.datasets", "navlie.lib.datasets.SimulatedInertialGPSDataset", "navlie.lib.datasets.SimulatedInertialLandmarkDataset", "navlie.lib.datasets.SimulatedPoseRangingDataset", "navlie.lib.datasets.generate_landmark_positions", "navlie.lib.imu", "navlie.lib.imu.G_matrix", "navlie.lib.imu.G_matrix_inv", "navlie.lib.imu.IMU", "navlie.lib.imu.IMUKinematics", "navlie.lib.imu.IMUState", "navlie.lib.imu.L_matrix", "navlie.lib.imu.M_matrix", "navlie.lib.imu.N_matrix", "navlie.lib.imu.U_matrix", "navlie.lib.imu.U_matrix_inv", "navlie.lib.imu.U_tilde_matrix", "navlie.lib.imu.adjoint_IE3", "navlie.lib.imu.delta_matrix", "navlie.lib.imu.get_unbiased_imu", "navlie.lib.imu.inverse_IE3", "navlie.lib.models", "navlie.lib.models.AbsolutePosition", "navlie.lib.models.AbsoluteVelocity", "navlie.lib.models.Altitude", "navlie.lib.models.BodyFrameVelocity", "navlie.lib.models.CameraProjection", "navlie.lib.models.DoubleIntegrator", "navlie.lib.models.DoubleIntegratorWithBias", "navlie.lib.models.GlobalPosition", "navlie.lib.models.Gravitometer", "navlie.lib.models.InvariantMeasurement", "navlie.lib.models.InvariantPointRelativePosition", "navlie.lib.models.LinearMeasurement", "navlie.lib.models.Magnetometer", "navlie.lib.models.OneDimensionalPositionVelocityRange", "navlie.lib.models.PointRelativePosition", "navlie.lib.models.PointRelativePositionSLAM", "navlie.lib.models.RangePointToAnchor", "navlie.lib.models.RangePoseToAnchor", "navlie.lib.models.RangePoseToPose", "navlie.lib.models.RangeRelativePose", "navlie.lib.models.RelativeBodyFrameVelocity", "navlie.lib.models.SingleIntegrator", "navlie.lib.preintegration", "navlie.lib.preintegration.AngularVelocityIncrement", "navlie.lib.preintegration.BodyVelocityIncrement", "navlie.lib.preintegration.IMUIncrement", "navlie.lib.preintegration.LinearIncrement", "navlie.lib.preintegration.PreintegratedAngularVelocity", "navlie.lib.preintegration.PreintegratedBodyVelocity", "navlie.lib.preintegration.PreintegratedIMUKinematics", "navlie.lib.preintegration.PreintegratedLinearModel", "navlie.lib.preintegration.PreintegratedWheelOdometry", "navlie.lib.preintegration.RelativeMotionIncrement", "navlie.lib.preintegration.WheelOdometryIncrement", "navlie.lib.states", "navlie.lib.states.MatrixLieGroupState", "navlie.lib.states.MixtureState", "navlie.lib.states.SE23State", "navlie.lib.states.SE2State", "navlie.lib.states.SE3State", "navlie.lib.states.SL3State", "navlie.lib.states.SO2State", "navlie.lib.states.SO3State", "navlie.lib.states.StampedValue", "navlie.lib.states.VectorInput", "navlie.lib.states.VectorState", "navlie.types", "navlie.types.Dataset", "navlie.types.Input", "navlie.types.Measurement", "navlie.types.MeasurementModel", "navlie.types.ProcessModel", "navlie.types.State", "navlie.types.StateWithCovariance", "navlie.utils", "navlie.utils.common", "navlie.utils.common.GaussianResult", "navlie.utils.common.GaussianResultList", "navlie.utils.common.MixtureResult", "navlie.utils.common.MixtureResultList", "navlie.utils.common.MonteCarloResult", "navlie.utils.common.associate_stamps", "navlie.utils.common.find_nearest_stamp_idx", "navlie.utils.common.jacobian", "navlie.utils.common.monte_carlo", "navlie.utils.common.randvec", "navlie.utils.common.schedule_sequential_measurements", "navlie.utils.common.state_interp", "navlie.utils.common.van_loans", "navlie.utils.mixture", "navlie.utils.mixture.gaussian_mixing", "navlie.utils.mixture.gaussian_mixing_vectorspace", "navlie.utils.mixture.reparametrize_gaussians_about_X_par", "navlie.utils.mixture.update_X", "navlie.utils.plot", "navlie.utils.plot.CameraPoseVisualizer", "navlie.utils.plot.plot_camera_poses", "navlie.utils.plot.plot_error", "navlie.utils.plot.plot_meas", "navlie.utils.plot.plot_meas_by_model", "navlie.utils.plot.plot_nees", "navlie.utils.plot.plot_poses", "navlie.utils.plot.set_axes_equal", "API Documentation", "Welcome to navlie!", "Getting Started", "Toy Batch SLAM Example", "Composite States", "Jacobians in navlie", "Toy Problem - Lie group approach", "Toy Problem - Traditional Approach"], "terms": {"A": [0, 4, 5, 6, 7, 8, 16, 17, 18, 19, 20, 26, 28, 35, 47, 48, 49, 54, 59, 73, 82, 85, 94, 95, 96, 97, 101, 104, 106, 108, 109, 110, 111, 112, 113, 115, 116, 118, 120, 123, 124, 127, 128, 130, 131, 134, 139, 141, 143, 144, 146, 147, 148, 149, 150, 152, 155, 157, 158, 160], "subpackag": 0, "least": [0, 5, 7, 8, 9, 11, 12, 13, 15], "squar": [0, 4, 5, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 39, 44, 92, 124, 127, 129, 131, 136, 160, 161], "estim": [0, 16, 20, 31, 32, 33, 34, 35, 36, 37, 38, 80, 127, 128, 129, 131, 155, 156, 158, 159, 160, 161], "modul": [0, 1, 30, 45, 46, 54, 117, 125, 154, 155], "construct": [1, 4, 13, 80], "problem": [1, 2, 4, 9, 11, 12, 155, 156, 158], "compos": 1, "prior": [1, 16, 18, 157], "residu": [1, 4, 5, 6, 7, 8, 10, 13, 15, 81, 157], "process": [1, 2, 19, 25, 28, 31, 32, 33, 34, 35, 36, 37, 38, 44, 45, 58, 74, 76, 77, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 104, 114, 115, 122, 155, 157, 158, 159], "measur": [1, 2, 4, 5, 6, 7, 8, 16, 17, 18, 19, 20, 23, 24, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 50, 51, 52, 57, 58, 68, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 96, 97, 103, 104, 118, 121, 137, 149, 150, 155, 158, 159], "The": [1, 2, 4, 5, 6, 10, 11, 12, 17, 24, 25, 26, 28, 31, 32, 33, 34, 35, 36, 37, 38, 45, 52, 58, 59, 61, 62, 74, 75, 76, 77, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 122, 123, 127, 128, 129, 130, 135, 137, 138, 141, 147, 152, 155, 156, 158, 159, 160, 161], "batchestim": 1, "solv": [1, 2, 13, 15, 157], "method": [1, 4, 5, 6, 7, 8, 20, 25, 26, 31, 32, 33, 37, 38, 40, 58, 74, 76, 77, 91, 92, 98, 99, 100, 101, 102, 118, 121, 122, 123, 128, 130, 134, 138, 139, 141, 157, 158, 159, 160, 161], "over": [1, 94, 95, 96, 97, 103, 104, 160, 161], "sequenc": 1, "input": [1, 2, 4, 5, 6, 7, 8, 17, 18, 19, 20, 22, 25, 28, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 50, 51, 52, 57, 58, 60, 74, 76, 77, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 114, 115, 118, 122, 134, 157, 158, 159, 160, 161], "data": [1, 2, 4, 27, 28, 42, 43, 54, 57, 68, 114, 115, 118, 120, 124, 127, 128, 131, 135, 148, 149, 150, 158, 160], "ar": [1, 4, 5, 6, 7, 8, 16, 26, 31, 33, 37, 38, 53, 58, 59, 60, 75, 91, 128, 131, 135, 137, 138, 139, 147, 152, 155, 157, 158, 159, 160, 161], "automat": [1, 34, 35, 155, 158, 159], "creat": [1, 2, 19, 22, 57, 73, 103, 113, 119, 128, 130, 147, 148, 149, 150, 151, 152, 160], "ad": [1, 13, 15, 73, 114, 115, 157, 158, 159, 160], "us": [1, 2, 9, 11, 12, 13, 15, 16, 17, 19, 20, 24, 25, 26, 28, 31, 32, 33, 34, 35, 36, 37, 38, 46, 47, 57, 58, 59, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 127, 128, 129, 130, 134, 135, 139, 146, 154, 155, 156, 157, 158, 159, 160, 161], "gener": [1, 2, 17, 18, 19, 22, 26, 27, 28, 29, 31, 33, 37, 38, 40, 47, 52, 53, 59, 82, 95, 103, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 123, 136, 137, 148, 158, 159, 160], "definit": [1, 155, 158, 159, 160], "defin": [1, 4, 9, 11, 12, 26, 106, 108, 109, 110, 111, 112, 113, 122, 128, 130, 131, 155, 158, 159], "class": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 46, 47, 48, 49, 50, 51, 52, 54, 57, 58, 59, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 145, 146, 154, 155, 157, 158, 159, 160, 161], "solver_typ": 2, "str": [2, 15, 31, 33, 37, 38, 40, 59, 106, 108, 109, 110, 111, 112, 113, 134, 146, 147, 148, 151, 152, 157], "gn": [2, 15], "max_it": [2, 15, 36], "int": [2, 14, 15, 22, 26, 40, 47, 50, 51, 52, 53, 57, 59, 94, 95, 96, 97, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 123, 131, 132, 133, 135, 136, 147, 152, 157], "100": [2, 15, 52, 157], "step_tol": [2, 15, 36], "float": [2, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 22, 23, 25, 26, 28, 31, 32, 33, 34, 35, 36, 37, 38, 47, 51, 52, 53, 57, 58, 59, 60, 63, 64, 65, 67, 73, 74, 76, 77, 79, 80, 83, 84, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 141, 142, 146, 147, 151, 152, 158, 159, 160, 161], "1e": [2, 4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 24, 25, 26, 58, 59, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 116, 121, 122, 123, 134, 157], "07": [2, 15, 157], "ftol": [2, 15], "none": [2, 4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 26, 28, 29, 31, 32, 33, 34, 36, 37, 38, 47, 50, 51, 52, 57, 58, 59, 73, 79, 80, 83, 85, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 123, 134, 146, 147, 148, 149, 150, 151, 152, 157, 158, 160, 161], "gradient_tol": [2, 15], "tau": [2, 15], "11": [2, 15, 34, 35, 157, 159], "verbos": [2, 15, 135], "bool": [2, 4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 42, 43, 47, 50, 51, 52, 128, 130, 131, 148, 149, 150, 151, 152, 157], "true": [2, 4, 5, 15, 16, 29, 31, 33, 36, 37, 38, 50, 51, 52, 127, 128, 129, 130, 131, 148, 149, 150, 157, 158, 159, 160, 161], "base": [2, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 31, 32, 33, 34, 35, 36, 37, 38, 47, 48, 50, 51, 52, 57, 58, 59, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 146, 149, 150, 155, 157, 158], "object": [2, 14, 15, 22, 25, 26, 28, 29, 32, 34, 35, 37, 47, 48, 57, 58, 59, 74, 76, 77, 80, 91, 92, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 124, 127, 128, 130, 131, 134, 135, 138, 146, 147, 149, 150, 152, 160, 161], "main": [2, 13, 15, 160], "instanti": [2, 47, 159, 161], "batchestiamtor": 2, "paramet": [2, 4, 5, 6, 7, 8, 10, 15, 17, 18, 19, 20, 23, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 52, 53, 57, 58, 59, 68, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 87, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 120, 122, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 157], "solver": [2, 5, 15, 157], "option": [2, 4, 5, 6, 7, 8, 15, 20, 22, 23, 26, 28, 29, 31, 32, 33, 34, 36, 37, 38, 47, 52, 57, 59, 73, 79, 80, 83, 85, 97, 106, 108, 109, 110, 111, 112, 113, 114, 115, 119, 120, 123, 128, 130, 131, 132, 134, 135, 136, 147, 148, 149, 150, 151, 152, 161], "type": [2, 4, 5, 6, 7, 8, 10, 15, 17, 18, 19, 20, 22, 23, 25, 26, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 47, 53, 57, 58, 59, 68, 74, 76, 77, 80, 81, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 144, 157, 158, 161], "either": [2, 13, 15, 28, 106, 108, 109, 110, 111, 112, 113, 122, 128, 138, 152, 158, 161], "lm": [2, 158], "default": [2, 4, 5, 6, 7, 8, 15, 20, 23, 28, 29, 31, 32, 33, 34, 36, 37, 38, 47, 52, 57, 58, 59, 73, 79, 80, 83, 97, 106, 108, 109, 110, 111, 112, 113, 114, 115, 120, 122, 128, 130, 131, 132, 134, 135, 136, 147, 148, 149, 150, 151, 152, 157, 159], "maximum": [2, 132, 135, 159, 160], "number": [2, 6, 7, 8, 41, 53, 123, 131, 135, 147, 157], "optim": [2, 4, 5, 6, 7, 8, 14, 15, 20, 157], "iter": [2, 36, 41, 135, 155, 157], "converg": [2, 15], "step": [2, 31, 32, 33, 34, 35, 36, 37, 38, 91, 128, 131, 134, 147, 152, 156, 157, 161], "toler": 2, "7": [2, 6, 134, 157, 158], "exit": 2, "when": [2, 24, 25, 26, 58, 59, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97, 98, 99, 100, 101, 102, 121, 122, 123, 128, 130, 158, 159, 161], "delta": [2, 19, 25, 26, 58, 59, 74, 76, 77, 80, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 104, 106, 108, 109, 110, 111, 112, 113, 116, 122, 123, 139, 157, 158, 159, 160, 161], "x": [2, 4, 11, 17, 18, 19, 24, 25, 26, 31, 32, 33, 34, 35, 36, 37, 38, 47, 58, 59, 66, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 116, 121, 122, 123, 134, 139, 143, 144, 157, 158, 159, 160, 161], "_2": [2, 91, 157, 160], "text": [2, 148, 157], "where": [2, 4, 11, 12, 18, 19, 20, 26, 47, 58, 59, 71, 72, 73, 75, 76, 77, 79, 80, 82, 83, 85, 86, 87, 88, 90, 91, 92, 94, 95, 97, 104, 121, 122, 128, 134, 139, 156, 157, 158, 159, 160, 161], "i": [2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 20, 23, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 47, 54, 57, 58, 59, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 116, 120, 121, 122, 123, 124, 128, 130, 131, 133, 134, 135, 138, 139, 143, 144, 154, 155, 156, 157, 158, 159, 160, 161], "chang": [2, 155, 157, 158, 160], "state": [2, 4, 5, 6, 7, 8, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 47, 50, 51, 52, 57, 58, 59, 60, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97, 98, 99, 100, 101, 102, 118, 119, 120, 121, 122, 124, 127, 128, 129, 130, 131, 134, 138, 143, 144, 149, 150, 155, 156, 157, 159], "success": 2, "rel": [2, 47, 74, 85, 86, 90, 91, 157], "cost": [2, 10, 11, 12, 14, 15, 157], "decreas": 2, "c": [2, 5, 10, 58, 75, 79, 82, 83, 85, 86, 94, 108, 109, 110, 111, 112, 113, 134, 146, 147, 152, 157, 158, 159, 160], "function": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 17, 18, 19, 20, 24, 25, 26, 27, 28, 30, 49, 54, 58, 59, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97, 98, 99, 100, 101, 102, 114, 115, 121, 122, 126, 128, 130, 132, 134, 135, 140, 145, 151, 154, 157, 160, 161], "accept": [2, 28, 128, 135, 161], "gradient": [2, 157], "infin": 2, "norm": [2, 134, 157, 158, 159, 160, 161], "max_i": 2, "nabla": 2, "j": [2, 4, 26, 34, 35, 59, 94, 95, 96, 97, 99, 103, 104, 106, 108, 109, 110, 111, 112, 113, 116, 123, 157], "_i": [2, 97, 101, 157], "mathbf": [2, 4, 17, 18, 19, 24, 25, 26, 58, 59, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 104, 106, 108, 109, 110, 111, 112, 113, 116, 121, 122, 123, 139, 146, 147, 152, 157, 158, 159, 160, 161], "e": [2, 4, 10, 11, 12, 17, 18, 19, 87, 88, 108, 109, 110, 111, 112, 113, 155, 156, 157, 160, 161], "t": [2, 4, 5, 6, 7, 8, 17, 18, 19, 20, 25, 48, 58, 74, 75, 76, 77, 79, 81, 83, 85, 86, 91, 92, 94, 95, 98, 99, 100, 101, 102, 104, 108, 109, 110, 112, 113, 122, 134, 139, 157, 158, 159, 160, 161], "h": [2, 34, 35], "print": [2, 135, 157, 158, 159, 160, 161], "dure": [2, 15], "runtim": 2, "x0": [2, 18, 28, 42, 43, 44, 50, 51, 52, 157], "p0": [2, 42, 44, 158, 160, 161], "ndarrai": [2, 4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 31, 33, 35, 37, 38, 39, 40, 41, 42, 44, 47, 48, 50, 51, 52, 53, 57, 58, 59, 60, 62, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 133, 134, 136, 139, 142, 143, 144, 146, 157, 158, 159, 160, 161], "input_data": [2, 42, 43, 44, 158, 160, 161], "list": [2, 4, 5, 6, 7, 8, 14, 15, 17, 18, 19, 20, 22, 25, 26, 28, 29, 34, 35, 41, 42, 43, 44, 50, 51, 52, 53, 59, 79, 83, 87, 88, 94, 95, 96, 97, 103, 104, 107, 118, 128, 130, 131, 132, 133, 137, 138, 141, 142, 143, 147, 148, 149, 150, 152, 154, 157, 158, 160, 161], "meas_data": [2, 42, 43, 44, 158, 160, 161], "process_model": [2, 19, 28, 31, 32, 33, 34, 36, 37, 38, 157, 158, 159, 160, 161], "processmodel": [2, 16, 19, 25, 28, 31, 32, 33, 34, 36, 37, 38, 44, 58, 74, 76, 91, 92, 99, 100, 101, 157, 158, 159, 160, 161], "return_opt_result": 2, "fals": [2, 4, 25, 28, 31, 32, 33, 34, 36, 37, 38, 42, 43, 128, 130, 148, 149, 150, 151, 152, 157], "statewithcovari": [2, 31, 32, 33, 36, 37, 38, 42, 43, 44, 107, 127, 128, 129, 141, 143, 144, 157, 158, 160, 161], "propag": [2, 19, 31, 32, 33, 34, 36, 37, 38, 58, 99, 134], "initi": [2, 28, 35, 52, 96, 137, 158, 160, 161], "forward": [2, 31, 32, 33, 34, 35, 36, 37, 38, 47, 58, 101, 134, 147, 157, 158, 161], "time": [2, 14, 19, 25, 26, 28, 31, 32, 33, 34, 36, 37, 38, 52, 58, 74, 76, 77, 91, 92, 94, 97, 98, 99, 100, 101, 102, 104, 122, 128, 130, 131, 135, 136, 137, 139, 149, 150, 157, 158, 160, 161], "model": [2, 4, 5, 6, 7, 8, 17, 18, 19, 20, 23, 24, 25, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 44, 45, 46, 47, 58, 94, 95, 97, 98, 99, 100, 101, 102, 104, 114, 115, 120, 121, 122, 137, 149, 150, 155, 158, 159], "an": [2, 11, 12, 16, 19, 20, 22, 26, 31, 32, 33, 36, 37, 38, 39, 41, 44, 46, 57, 58, 59, 77, 86, 87, 88, 94, 95, 96, 97, 99, 103, 104, 114, 115, 123, 128, 130, 138, 147, 152, 157, 158, 159, 160, 161], "timestep": [2, 35, 58, 139], "involv": [2, 34, 35, 40, 157, 158], "priorresidu": [2, 16, 157], "processresidu": [2, 16, 157], "each": [2, 4, 5, 6, 7, 8, 17, 18, 19, 20, 26, 28, 29, 35, 40, 41, 59, 89, 91, 123, 127, 128, 129, 130, 131, 137, 142, 143, 157, 158, 160, 161], "connect": [2, 146, 157], "subsequ": 2, "through": [2, 19, 128, 134, 137, 147, 156, 157, 161], "measurementresidu": [2, 16], "np": [2, 4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 22, 25, 26, 28, 31, 33, 35, 37, 38, 40, 41, 42, 44, 47, 52, 53, 57, 58, 59, 68, 73, 74, 76, 77, 79, 81, 82, 83, 85, 87, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 119, 120, 122, 123, 124, 134, 136, 139, 142, 143, 144, 146, 157, 158, 159, 160, 161], "covari": [2, 4, 5, 6, 7, 8, 15, 22, 24, 25, 26, 28, 31, 32, 33, 37, 38, 39, 52, 57, 58, 59, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 114, 115, 119, 121, 122, 124, 127, 128, 129, 130, 136, 142, 143, 144, 158, 159, 160, 161], "form": [2, 4, 10, 18, 26, 71, 72, 73, 75, 79, 80, 82, 83, 87, 88, 91, 92, 94, 95, 97, 104, 106, 108, 109, 110, 111, 112, 113, 121, 122, 132, 139, 157, 158, 160, 161], "flag": [2, 4, 5, 6, 7, 8, 20, 29, 152, 161], "return": [2, 4, 5, 6, 7, 8, 10, 15, 17, 18, 19, 20, 22, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 44, 47, 50, 51, 52, 53, 57, 58, 59, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 123, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 157, 158, 159, 160, 161], "result": [2, 32, 128, 130, 131, 135, 148, 151, 155, 157, 158, 159, 160, 161], "dictionari": [2, 26, 157], "from": [2, 4, 5, 6, 7, 8, 9, 10, 24, 25, 26, 28, 31, 32, 33, 35, 37, 38, 40, 47, 54, 58, 61, 62, 68, 74, 75, 76, 77, 87, 88, 91, 92, 97, 98, 99, 100, 101, 102, 113, 121, 122, 123, 128, 130, 132, 135, 137, 159, 160, 161], "error": [4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 25, 39, 58, 74, 76, 77, 89, 91, 92, 98, 99, 100, 101, 102, 122, 127, 128, 129, 130, 131, 148, 155, 157, 158, 159, 160, 161], "weight": [4, 5, 6, 7, 8, 9, 10, 11, 12, 34, 40, 41, 141, 142], "abc": [4, 12, 20, 118, 119, 121, 122, 123], "gaussian": [4, 5, 6, 7, 8, 24, 25, 34, 35, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122, 127, 140, 141, 142, 143, 144], "mixtur": [4, 5, 6, 7, 8, 34, 35], "can": [4, 17, 19, 26, 28, 46, 54, 58, 97, 106, 114, 115, 120, 122, 123, 124, 128, 131, 134, 136, 138, 139, 152, 154, 155, 157, 158, 159, 160, 161], "instanc": [4, 35, 41, 44, 103, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 123], "non": [4, 135], "nois": [4, 24, 25, 28, 29, 47, 57, 58, 60, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 114, 115, 121, 122, 139, 157, 158, 159, 160, 161], "ha": [4, 22, 26, 52, 57, 106, 108, 109, 110, 111, 112, 113, 114, 115, 119, 144, 157, 158, 159, 160, 161], "been": [4, 26, 59, 157, 158, 160, 161], "fit": 4, "unknown": [4, 86, 157], "associ": [4, 23, 24, 26, 28, 31, 33, 34, 37, 38, 41, 52, 57, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 96, 97, 103, 104, 114, 115, 120, 121, 124, 127, 129, 131, 132, 137, 157, 158, 160], "loop": [4, 137, 161], "closur": 4, "one": [4, 58, 106, 122, 135, 137, 157, 158, 160, 161], "compon": [4, 5, 6, 7, 8, 73, 127, 129, 131, 134, 158], "correspond": [4, 5, 6, 7, 8, 15, 20, 26, 29, 35, 59, 120, 123, 124, 127, 128, 129, 130, 131, 142, 157, 158, 159, 160, 161], "small": [4, 41, 157], "anoth": [4, 26, 59, 87, 90, 106, 108, 109, 110, 111, 112, 113, 116, 123, 160], "larg": [4, 155, 158, 160], "implement": [4, 5, 6, 7, 8, 20, 25, 45, 74, 76, 77, 91, 92, 98, 99, 100, 101, 102, 121, 122, 123, 128, 130, 155, 157, 158, 159, 160, 161], "term": [4, 11, 12, 13, 15, 157, 160], "log": [4, 160], "sum_": [4, 97, 157], "k": [4, 19, 25, 31, 33, 37, 38, 47, 58, 74, 76, 77, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 104, 122, 139, 157, 158, 159, 160, 161], "1": [4, 5, 6, 7, 8, 10, 17, 18, 19, 20, 25, 26, 31, 33, 37, 38, 58, 59, 73, 74, 76, 77, 80, 83, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 104, 108, 109, 110, 111, 112, 113, 122, 128, 130, 131, 134, 135, 136, 139, 146, 147, 151, 152, 157, 158, 159, 160, 161], "w_k": 4, "det": [4, 111, 112, 113], "left": [4, 47, 80, 97, 106, 108, 109, 110, 111, 112, 113, 156, 157, 159], "sqrt": [4, 134], "r": [4, 5, 6, 7, 8, 17, 18, 19, 20, 24, 25, 50, 51, 52, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 108, 109, 110, 111, 112, 113, 121, 122, 146, 151, 157, 158, 159, 160, 161], "_k": [4, 19, 25, 58, 74, 76, 77, 91, 92, 97, 98, 99, 100, 101, 102, 104, 122, 139, 157, 158, 159, 160], "right": [4, 47, 59, 80, 81, 97, 106, 108, 109, 110, 111, 112, 113, 134, 157, 158, 159], "exp": [4, 74, 91, 94, 95, 104, 106, 108, 109, 110, 111, 112, 113, 157, 159, 160], "boldsymbol": [4, 157, 159, 160], "eta": 4, "normal": [4, 5, 6, 7, 8, 39, 47, 127, 129, 131, 134, 151, 161], "yield": 4, "argument": [4, 24, 25, 31, 32, 33, 34, 36, 37, 38, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 98, 99, 100, 101, 102, 121, 122, 161], "constructor": 4, "must": [4, 5, 6, 7, 8, 9, 20, 28, 31, 32, 33, 34, 36, 37, 38, 44, 85, 106, 108, 109, 110, 111, 112, 113, 121, 122, 123, 128, 130, 131, 134, 135, 143, 151, 157, 158, 159, 160, 161], "sqrt_info_matrix": [4, 5, 6, 7, 8, 17, 18, 19, 20], "root": [4, 17, 18, 19, 127, 129, 131, 157], "inform": [4, 5, 6, 7, 8, 17, 18, 19, 20, 75, 97, 114, 115, 122, 157, 160], "matrix": [4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 22, 25, 26, 34, 35, 47, 57, 58, 59, 61, 62, 66, 69, 74, 76, 77, 81, 82, 88, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 119, 121, 122, 124, 139, 146, 147, 152, 157, 158, 159, 160], "differ": [4, 5, 6, 7, 8, 17, 18, 19, 20, 23, 24, 25, 26, 31, 32, 33, 34, 36, 37, 38, 54, 58, 59, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 116, 120, 121, 122, 123, 128, 130, 131, 132, 134, 157, 158, 159, 160, 161], "how": [4, 46, 128, 130, 156, 157, 158, 159], "overal": [4, 137], "jacobian": [4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 24, 25, 26, 32, 36, 58, 59, 60, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 116, 121, 122, 123, 155, 157, 158], "therefor": 4, "subclass": [4, 106, 158, 160, 161], "overwrit": [4, 96], "mix_error": [4, 5, 6, 7, 8], "mix_jacobian": [4, 5, 6, 7, 8], "which": [4, 5, 6, 7, 8, 9, 16, 20, 23, 24, 26, 29, 31, 32, 33, 35, 36, 37, 38, 80, 87, 94, 95, 96, 97, 103, 104, 121, 122, 127, 128, 129, 131, 135, 137, 147, 151, 155, 157, 158, 159, 160, 161], "abstract": [4, 12, 20, 103, 118, 119, 121, 122, 123, 155, 159, 160, 161], "error_value_list": [4, 5, 6, 7, 8], "sqrt_info_matrix_list": [4, 5, 6, 7, 8], "tupl": [4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 24, 40, 68, 71, 72, 73, 75, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 121, 132, 139, 148, 149, 150, 151, 157], "thi": [4, 5, 6, 7, 8, 11, 12, 13, 15, 19, 23, 24, 25, 26, 31, 32, 33, 36, 37, 38, 46, 47, 54, 57, 58, 59, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 128, 131, 134, 135, 136, 137, 143, 155, 156, 157, 158, 159, 160, 161], "comput": [4, 5, 6, 7, 8, 15, 16, 17, 20, 28, 31, 32, 33, 37, 38, 41, 47, 60, 80, 81, 97, 127, 129, 131, 134, 135, 139, 144, 157, 159], "factor": [4, 5, 6, 7, 8, 157], "all": [4, 5, 6, 7, 8, 10, 22, 26, 28, 59, 128, 135, 137, 147, 154, 155, 156, 157, 158, 159, 160, 161], "assum": [4, 5, 6, 7, 8, 23, 28, 74, 75, 77, 80, 90, 106, 108, 109, 110, 111, 112, 113, 120, 131, 157, 161], "have": [4, 5, 6, 7, 8, 24, 25, 26, 58, 59, 60, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122, 128, 148, 149, 150, 153, 155, 157, 158, 159, 160, 161], "ident": [4, 5, 6, 7, 8, 47, 52, 96, 131, 157, 159], "jacobian_list_of_list": [4, 5, 6, 7, 8], "reused_valu": [4, 5, 6, 7, 8], "dict": [4, 5, 6, 7, 8, 15, 26, 32], "For": [4, 5, 6, 7, 8, 17, 18, 19, 20, 26, 40, 59, 106, 108, 109, 110, 111, 112, 113, 116, 123, 128, 135, 158, 159, 160, 161], "everi": [4, 5, 6, 7, 8, 136], "w": [4, 5, 6, 7, 8, 17, 18, 19, 20, 22, 25, 57, 58, 74, 76, 77, 81, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 114, 115, 119, 122, 139, 157, 158], "jacobian_list": [4, 5, 6, 7, 8], "outer": [4, 5, 6, 7, 8], "inner": [4, 5, 6, 7, 8], "contain": [4, 5, 6, 7, 8, 20, 23, 30, 46, 47, 57, 59, 68, 74, 75, 80, 81, 89, 97, 114, 115, 117, 118, 120, 123, 124, 127, 128, 131, 135, 138, 142, 147, 148, 152, 155, 157, 158, 160, 161], "evaluate_component_residu": [4, 5, 6, 7, 8], "compute_jacobian": [4, 5, 6, 7, 8, 17, 18, 19, 20, 157], "evalu": [4, 5, 6, 7, 8, 10, 17, 18, 19, 20, 23, 24, 25, 26, 29, 32, 36, 47, 58, 59, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 116, 120, 121, 122, 123, 155, 158, 159, 160, 161], "jacobian_fd": [4, 5, 6, 7, 8, 17, 18, 19, 20, 24, 25, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122, 159], "step_siz": [4, 5, 6, 7, 8, 17, 18, 19, 20, 24, 25, 26, 58, 59, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 116, 121, 122, 123, 134], "06": [4, 5, 6, 7, 8, 17, 18, 19, 20, 24, 25, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122, 157], "calcul": [4, 5, 6, 7, 8, 17, 18, 19, 20, 24, 25, 26, 31, 32, 33, 34, 36, 37, 38, 58, 59, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 116, 121, 122, 123, 128, 130, 131, 134, 142, 161], "finit": [4, 5, 6, 7, 8, 17, 18, 19, 20, 24, 25, 26, 58, 59, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 116, 121, 122, 123, 134, 155, 159], "point": [4, 5, 6, 7, 8, 17, 18, 19, 20, 31, 32, 33, 36, 37, 38, 40, 47, 76, 81, 87, 122, 128, 130, 138, 147, 161], "respect": [4, 5, 6, 7, 8, 17, 18, 19, 20, 24, 25, 26, 40, 58, 59, 60, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 116, 121, 122, 123, 157, 159], "exampl": [4, 5, 6, 7, 8, 17, 18, 19, 20, 26, 46, 49, 59, 128, 130, 134, 158, 159, 161], "first": [4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 87, 91, 122, 128, 132, 156, 157, 158, 160, 161], "element": [4, 5, 6, 7, 8, 17, 18, 19, 20, 58, 59, 87, 106, 108, 109, 110, 111, 112, 113, 116, 123, 128, 130, 143, 144, 147, 152, 157, 158, 160], "0": [4, 5, 6, 7, 8, 10, 11, 17, 18, 19, 20, 25, 28, 36, 50, 51, 52, 57, 58, 73, 74, 76, 77, 79, 83, 91, 92, 97, 98, 99, 100, 101, 102, 108, 109, 110, 121, 122, 128, 130, 131, 132, 134, 138, 139, 146, 147, 151, 157, 158, 159, 160, 161], "second": [4, 5, 6, 7, 8, 15, 17, 18, 19, 20, 24, 25, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122, 132, 157], "etc": [4, 5, 6, 7, 8, 17, 18, 19, 20, 157], "no_use_complex_numb": 5, "gaussianmixtureresidu": [5, 6, 7, 8], "hessian": 5, "sum": [5, 34, 127, 129], "patch": 5, "compat": [5, 44, 71, 72, 73, 79, 83, 89, 134, 161], "nonlinear": [5, 9, 11, 12, 13, 15, 32, 34, 37], "follow": [5, 6, 7, 54, 58, 80, 123, 155, 156, 157, 158, 159, 160, 161], "refer": [5, 6, 7, 8, 34, 35, 58, 74, 158, 159, 160], "misc": 5, "korotkine2024hessian": 5, "titl": [5, 6, 7, 8, 161], "likelihood": 5, "author": [5, 6, 7, 8], "vassili": 5, "korotkin": 5, "mitchel": 5, "cohen": 5, "jame": 5, "richard": 5, "forb": 5, "year": [5, 6, 7, 8], "2024": 5, "eprint": 5, "2404": 5, "05452": 5, "archiveprefix": 5, "arxiv": 5, "primaryclass": 5, "ro": [5, 110, 113], "static": [5, 28, 47, 57, 108, 109, 110, 112, 113, 128, 130], "get_normalization_const": 5, "alpha": [5, 7], "articl": [6, 7, 8], "olson2013infer": 6, "infer": 6, "network": 6, "robust": [6, 9, 10, 11, 15], "robot": [6, 7, 8, 52, 71, 72, 73, 74, 75, 85, 86, 88, 89, 90, 91, 104, 157, 158, 159, 160, 161], "map": [6, 155, 160], "olson": 6, "edwin": 6, "agarw": 6, "pratik": 6, "journal": [6, 7, 8], "intern": [6, 22, 94, 95, 103, 104, 114, 115, 119], "research": 6, "volum": [6, 7, 8], "32": [6, 160], "page": [6, 7, 8, 154, 156], "826": 6, "840": 6, "2013": 6, "publish": 6, "sage": 6, "public": 6, "uk": 6, "london": 6, "england": 6, "damping_const": 7, "10": [7, 8, 34, 35, 51, 52, 128, 135, 138, 157, 158, 160, 161], "9381625": [7, 8], "pfeifer": [7, 8], "tim": [7, 8, 159], "lang": [7, 8], "sven": [7, 8], "protzel": [7, 8], "peter": [7, 8], "ieee": [7, 8, 34, 35], "autom": [7, 8], "letter": [7, 8, 34, 35], "advanc": [7, 8], "2021": [7, 8], "6": [7, 8, 52, 57, 96, 134, 157, 158, 159], "2": [7, 8, 26, 59, 89, 90, 91, 109, 112, 122, 134, 135, 138, 152, 157, 158, 159, 160, 161], "3941": [7, 8], "3948": [7, 8], "doi": [7, 8, 34, 35], "1109": [7, 8, 34, 35], "lra": [7, 8], "3067307": [7, 8], "compute_nonlinear_part": 7, "scalar_errors_differ": 7, "detail": [8, 54, 159], "see": [8, 46, 154, 157, 159, 161], "here": [9, 10, 58, 75, 157, 158, 159, 160, 161], "inherit": [9, 120, 121, 122, 123, 124, 157, 159, 161], "lossfunct": [9, 10, 11, 15], "interfac": [9, 13, 155], "cauchi": 10, "taken": [10, 31, 32, 33, 34, 36, 37, 38, 132, 157], "mactavish": 10, "barfoot": [10, 62, 159, 160], "At": 10, "given": [10, 15, 22, 26, 28, 29, 31, 32, 33, 34, 36, 37, 38, 42, 43, 47, 58, 59, 75, 76, 80, 89, 90, 91, 94, 95, 96, 97, 99, 103, 104, 106, 108, 109, 110, 111, 112, 113, 116, 123, 127, 135, 136, 139, 144, 149, 150, 157, 159, 161], "standard": [11, 15, 23, 24, 75, 115, 116, 159, 161], "l2": [11, 157], "simpli": [11, 23, 80, 92, 120, 155, 157, 160, 161], "5": [11, 50, 51, 59, 134, 138, 152, 157, 158, 160, 161], "ones": 11, "rho": [11, 12], "often": [11, 12, 123, 161], "design": [11, 12, 155, 161], "variabl": [11, 12, 15, 20, 114, 115, 157], "depend": [11, 12, 58, 128, 130, 155, 156, 157, 159], "current": [11, 12, 19, 23, 31, 32, 33, 34, 35, 36, 37, 38, 58, 80, 90, 120, 156, 157], "valu": [11, 12, 22, 23, 25, 26, 28, 29, 31, 32, 33, 36, 37, 38, 58, 59, 74, 76, 77, 80, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 127, 128, 130, 131, 138, 149, 150, 151, 157, 158, 159, 160, 161], "reweight": [11, 12], "our": [11, 12, 18, 19, 155, 157, 158, 159, 160, 161], "origin": [11, 12, 97, 157, 160], "ani": [12, 17, 19, 22, 23, 24, 26, 29, 47, 57, 59, 75, 80, 85, 86, 89, 90, 91, 94, 95, 96, 97, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 123, 138, 154, 155, 157, 158, 159, 160, 161], "allow": [13, 137, 155, 158, 159, 161], "arbitrari": [13, 22, 31, 32, 33, 36, 37, 38, 114, 115, 119], "gauss": [13, 15, 31, 33, 37, 38, 40, 155], "newton": [13, 15], "levenberg": [13, 15], "marquardt": [13, 15], "code": [13, 128, 130, 135, 138, 158, 160, 161], "inspir": 13, "utiasstart": 13, "pyslam": 13, "repo": [13, 155, 156], "http": 13, "github": [13, 155, 156], "com": [13, 155, 156], "utiasstar": 13, "well": [13, 26, 157, 158, 160], "cere": [13, 157], "size_st": 14, "size_error": 14, "store": [14, 15, 48, 59, 88, 90, 108, 109, 110, 111, 112, 113, 118, 120, 157, 160, 161], "summari": [14, 157], "build": [15, 157], "is_converg": 15, "delta_cost": 15, "dx": [15, 26, 59, 106, 108, 109, 110, 111, 112, 113, 116, 123, 158, 160], "grad_norm": 15, "add_residu": [15, 157], "loss": 15, "l2loss": 15, "add": [15, 22, 25, 26, 28, 29, 57, 59, 94, 95, 96, 97, 104, 148, 157, 158, 160, 161], "along": [15, 123, 147, 152], "add_vari": [15, 157], "kei": [15, 17, 18, 19, 20, 26, 157], "hashabl": [15, 17, 18, 19, 20, 157], "set_variables_const": 15, "set": [15, 16, 22, 26, 32, 47, 52, 58, 59, 153, 156, 157, 158, 161], "held": 15, "constant": [15, 58, 158], "compute_error_jac_cost": 15, "full": [15, 26, 58, 59, 157], "vector": [15, 23, 26, 58, 59, 73, 79, 80, 82, 83, 87, 106, 108, 109, 110, 111, 112, 113, 115, 116, 120, 127, 129, 134, 136, 138, 143, 155, 157, 158, 159, 160, 161], "If": [15, 25, 26, 28, 29, 31, 32, 33, 34, 36, 37, 38, 47, 52, 58, 59, 74, 76, 77, 80, 91, 92, 96, 97, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 122, 124, 133, 134, 135, 138, 148, 149, 150, 151, 152, 157, 159], "get_covariance_block": [15, 157], "key_1": [15, 157], "key_2": [15, 157], "retriev": 15, "block": [15, 26, 59, 128, 130, 138], "two": [15, 25, 26, 52, 58, 59, 74, 76, 77, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 122, 128, 132, 157, 158, 160, 161], "compute_covari": [15, 157], "after": [15, 35, 155, 157, 158], "commonli": [16, 74, 160], "These": [16, 26, 139, 160], "assign": [16, 22, 23, 24, 114, 115, 119, 123, 151, 158], "between": [16, 23, 25, 31, 32, 33, 34, 36, 37, 38, 47, 58, 74, 76, 77, 80, 91, 92, 98, 99, 100, 101, 102, 120, 122, 127, 128, 129, 130, 131, 132, 138, 146, 151, 157, 160], "predict": [16, 23, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 47, 80, 99, 101, 120, 157, 158, 160, 161], "actual": [16, 25, 74, 76, 77, 92, 98, 99, 100, 101, 102, 122, 151, 157, 161], "compar": [16, 157, 159], "measurementmodel": [16, 23, 24, 28, 29, 46, 71, 72, 73, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 120, 137, 157, 158, 159, 160, 161], "y": [17, 23, 26, 31, 32, 33, 34, 35, 36, 37, 38, 47, 59, 71, 72, 73, 75, 79, 80, 81, 82, 83, 85, 86, 87, 88, 106, 108, 109, 110, 111, 112, 113, 116, 121, 123, 148, 149, 150, 157, 158, 159, 160, 161], "g": [17, 24, 58, 71, 72, 73, 75, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 121, 157, 159], "neg": [17, 157], "prior_stat": [18, 157], "prior_covari": [18, 157], "minu": [18, 19, 23, 26, 59, 80, 106, 108, 109, 110, 111, 112, 113, 116, 120, 123, 157, 158, 159, 160, 161], "oper": [18, 19, 22, 23, 26, 59, 80, 90, 103, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 123, 155, 157, 158, 159, 160], "_0": 18, "guess": 18, "u": [19, 25, 31, 32, 33, 34, 35, 36, 37, 38, 47, 58, 68, 74, 76, 77, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 122, 157, 158, 159, 160, 161], "math": [19, 139, 146, 147, 152], "_": [19, 25, 58, 74, 75, 76, 77, 79, 83, 85, 86, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 104, 122, 139, 146, 147, 152, 157, 158, 159, 160, 161], "hat": 19, "written": [19, 75, 157, 160], "f": [19, 25, 74, 76, 77, 91, 92, 98, 99, 100, 101, 102, 122, 157, 159, 160, 161], "x_k": [19, 157, 159, 161], "x_k_hat": [19, 157], "t_k": [19, 160], "self": [20, 26, 31, 32, 33, 36, 37, 38, 59, 106, 108, 109, 110, 111, 112, 113, 116, 123, 157, 158, 159, 160, 161], "input_list": [22, 157], "under": [22, 25, 155], "develop": [22, 25], "dof": [22, 26, 40, 57, 59, 94, 95, 96, 97, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 123, 128, 130, 131, 134, 158, 160, 161], "degre": [22, 24, 26, 57, 59, 94, 95, 96, 97, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 128, 151, 160], "freedom": [22, 24, 26, 57, 59, 94, 95, 96, 97, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 128, 151, 160], "stamp": [22, 23, 26, 31, 32, 33, 34, 35, 36, 37, 38, 57, 59, 80, 94, 95, 96, 97, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 123, 124, 127, 128, 129, 130, 131, 132, 133, 138, 157, 158, 160, 161], "timestamp": [22, 23, 26, 28, 57, 59, 80, 94, 95, 96, 97, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 123, 127, 128, 129, 130, 131, 132, 133, 135, 149, 150, 157], "get_index_by_id": [22, 26, 59], "state_id": [22, 23, 24, 26, 29, 57, 59, 80, 90, 94, 95, 96, 97, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 123, 157, 158, 160, 161], "get": [22, 26, 59, 118, 128, 157, 159, 161], "index": [22, 26, 59, 133], "particular": [22, 26, 59, 154, 157], "add_input": 22, "remove_input_by_id": 22, "remov": [22, 26, 59, 68], "id": [22, 23, 24, 26, 57, 59, 75, 80, 89, 90, 94, 95, 96, 97, 103, 104, 106, 108, 109, 110, 111, 112, 113, 120, 157], "get_input_by_id": 22, "get_dof_by_id": [22, 26, 59], "sub": [22, 26, 59], "get_stamp_by_id": [22, 26, 59], "set_stamp_by_id": [22, 26, 59], "set_input_by_id": 22, "whole": [22, 26, 59], "set_stamp_for_al": [22, 26, 59], "subinput": 22, "to_list": [22, 26, 59], "convert": [22, 23, 26, 47, 59, 110, 113, 157, 160], "back": [22, 26, 59, 155, 159, 160], "copi": [22, 26, 47, 48, 57, 59, 94, 95, 96, 97, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 157, 158, 159, 160, 161], "deep": [22, 57, 103, 119, 160], "plu": [22, 26, 57, 59, 94, 95, 96, 97, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 123, 158, 159, 160], "addit": [22, 24, 25, 32, 58, 60, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 103, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 121, 122, 123, 155, 158, 159, 160, 161], "modifi": [22, 57, 97, 103, 114, 115, 119], "new": [22, 26, 28, 31, 32, 33, 34, 36, 37, 38, 58, 59, 91, 94, 95, 96, 97, 103, 104, 110, 113, 119, 123, 128, 148, 149, 150, 151, 158, 159, 160], "shape": [22, 52, 57, 59, 96, 114, 115, 119, 128, 130, 131, 134, 136, 157], "identifi": [22, 39, 47, 59, 85, 97, 114, 115, 119, 157], "possibl": [22, 26, 114, 115, 119, 157, 158], "replac": [23, 157], "compositemeasurementmodel": [23, 90, 158], "per": [23, 53, 161], "numpi": [23, 25, 26, 58, 59, 74, 76, 77, 79, 80, 83, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 133, 136, 157, 158, 159, 160, 161], "y_check": [23, 80, 120, 157], "By": [23, 80, 97, 114, 115, 120, 155, 160], "column": [23, 40, 80, 120, 136, 156, 157], "thu": [23, 80, 120, 135, 157], "subtract": [23, 26, 59, 80, 97, 106, 108, 109, 110, 111, 112, 113, 116, 120, 123, 159, 160, 161], "wrapper": [24, 158], "specif": [24, 26, 59, 122, 143, 155, 158, 160], "substat": [24, 26, 59, 90, 158], "referenc": [24, 158], "insid": [24, 90, 160], "compositest": [24, 25, 59, 75, 86, 89, 90, 157], "take": [24, 26, 59], "care": [24, 26, 59, 134, 157], "extract": [24, 26, 59, 158, 160], "relev": [24, 143, 158], "appli": [24, 28, 31, 32, 33, 34, 36, 37, 38, 101], "It": [24, 26, 136, 158, 159, 160, 161], "also": [24, 26, 28, 59, 75, 87, 97, 99, 121, 122, 128, 134, 155, 157, 158, 160, 161], "pad": 24, "zero": [24, 82, 135, 136, 144, 158, 159, 160], "appropri": [24, 26], "match": [24, 90, 132, 159], "larger": [24, 31, 32, 33, 35, 36, 37, 38], "onli": [24, 94, 128, 130, 143, 157, 159], "singl": [24, 26, 28, 92, 128, 130, 131, 135, 155, 157, 159], "uniqu": [24, 59, 85, 157, 158], "mathcal": [24, 25, 26, 58, 59, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 116, 121, 122, 123, 139, 157, 158, 159], "frac": [24, 25, 26, 59, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 116, 121, 122, 123, 157, 159], "d": [24, 25, 26, 34, 59, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 116, 121, 122, 123, 139, 157, 158, 159], "evaluate_with_jacobian": [24, 25, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122], "simultan": [24, 25, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122, 127], "its": [24, 25, 32, 52, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122, 139, 143, 155, 158, 161], "output": [24, 25, 32, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122, 133, 134, 135, 157, 161], "overrid": [24, 25, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122, 159], "perform": [24, 25, 32, 39, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122, 138, 156, 161], "reason": [24, 25, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122, 161], "lot": [24, 25, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122, 158], "common": [24, 25, 45, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122, 143, 148, 149, 150, 155, 159, 160], "more": [24, 25, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122, 128, 135, 155, 158, 159, 161], "effici": [24, 25, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122], "them": [24, 25, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122, 136, 155, 159, 160], "same": [24, 25, 26, 41, 58, 59, 60, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 116, 121, 122, 123, 137, 155, 157, 158, 160, 161], "call": [24, 25, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122, 157, 160, 161], "sqrt_inform": [24, 25, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 121, 122, 157], "model_list": [25, 137], "shared_input": 25, "should": [25, 41, 47, 97, 122, 123, 147, 155, 156, 157], "stackedprocessmodel": 25, "todo": 25, "document": [25, 61], "test": [25, 31, 32, 33, 34, 36, 37, 38, 39, 123], "compositeinput": 25, "dt": [25, 31, 32, 33, 34, 35, 36, 37, 38, 55, 56, 58, 60, 63, 64, 65, 67, 74, 76, 77, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 122, 139, 157, 158, 159, 160, 161], "provid": [25, 26, 28, 29, 31, 32, 33, 34, 36, 37, 38, 58, 74, 76, 77, 91, 92, 96, 97, 98, 99, 100, 101, 102, 110, 113, 122, 128, 130, 131, 138, 159, 161], "numer": [25, 74, 76, 77, 92, 98, 99, 100, 101, 102, 122, 155], "access": [25, 26, 74, 76, 77, 92, 98, 99, 100, 101, 102, 122, 158, 159, 161], "via": [25, 74, 76, 77, 80, 92, 98, 99, 100, 101, 102, 122, 156, 157], "interv": [25, 31, 32, 33, 34, 36, 37, 38, 58, 74, 76, 77, 91, 92, 97, 98, 99, 100, 101, 102, 122, 128, 130, 131, 151], "q": [25, 28, 50, 51, 52, 58, 74, 76, 77, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 104, 122, 139, 157, 158, 159, 160, 161], "sim": [25, 58, 74, 76, 77, 91, 92, 97, 98, 99, 100, 101, 102, 121, 122, 139, 157, 158], "n": [25, 26, 58, 59, 62, 74, 76, 77, 91, 92, 97, 98, 99, 100, 101, 102, 104, 121, 122, 128, 130, 131, 134, 136, 139, 157, 158], "overridden": [25, 58, 74, 76, 77, 91, 92, 98, 99, 100, 101, 102, 122], "approxim": [25, 34, 58, 74, 76, 77, 91, 92, 98, 99, 100, 101, 102, 122, 159], "linear": [25, 58, 74, 76, 77, 82, 91, 92, 98, 99, 100, 101, 102, 111, 122, 128, 130, 138, 155, 159, 160], "procedur": [25, 58, 74, 76, 77, 91, 92, 98, 99, 100, 101, 102, 122, 134], "input_covari": [25, 28, 31, 33, 37, 38, 58, 74, 76, 77, 91, 92, 96, 97, 98, 99, 100, 101, 102, 122, 158, 159, 160, 161], "input_jacobian_fd": [25, 58, 74, 76, 77, 91, 92, 98, 99, 100, 101, 102, 122], "arg": [25, 58, 74, 76, 77, 91, 92, 98, 99, 100, 101, 102, 122, 134], "kwarg": [25, 58, 74, 76, 77, 91, 92, 98, 99, 100, 101, 102, 106, 111, 112, 122, 134], "state_list": [26, 138, 149, 150], "intend": [26, 128, 130], "hold": [26, 123, 160], "conceptu": 26, "potenti": [26, 158], "plus_jacobian": [26, 59, 106, 108, 109, 110, 111, 112, 113, 116, 123], "minus_jacobian": [26, 59, 106, 108, 109, 110, 111, 112, 113, 116, 123, 157], "found": [26, 54, 155], "attribut": [26, 103, 123, 128, 138, 158], "both": [26, 60, 74, 75, 128, 130, 141, 155, 159, 160], "technic": [26, 106], "": [26, 29, 46, 59, 114, 115, 120, 127, 133, 136, 138, 139, 152, 156, 157, 158, 159, 160], "get_slic": [26, 59], "slice": [26, 59, 128], "add_stat": [26, 59], "remove_state_by_id": [26, 59], "get_slice_by_id": [26, 59], "get_matrix_block_by_id": [26, 59], "mat": [26, 59], "state_id_1": [26, 59], "state_id_2": [26, 59], "portion": [26, 59], "subblock": [26, 59], "corrspond": [26, 59], "set_matrix_block_by_id": [26, 59], "new_mat_block": [26, 59], "enter": [26, 59], "updat": [26, 35, 41, 59, 94, 95, 96, 97, 103, 104, 158], "get_value_by_id": [26, 59], "get_state_by_id": [26, 59, 157], "set_state_by_id": [26, 59], "set_value_by_id": [26, 59], "new_stamp": [26, 59], "inter": [26, 59, 97], "pars": [26, 59], "alwai": [26, 59, 106, 108, 109, 110, 111, 112, 113, 116, 123, 158, 159, 161], "arrai": [26, 44, 59, 96, 106, 108, 109, 110, 111, 112, 113, 115, 116, 121, 123, 124, 128, 130, 133, 134, 136, 157, 158, 159, 160, 161], "plus_by_id": [26, 59], "jacobian_from_block": [26, 59, 106, 108, 109, 110, 111, 112, 113, 157], "block_dict": 26, "entir": [26, 157], "some": [26, 123, 128, 157, 158, 159, 160, 161], "being": [26, 87, 159, 161], "That": [26, 59, 85, 86, 106, 108, 109, 110, 111, 112, 113, 116, 122, 123], "lie": [26, 34, 35, 59, 81, 88, 91, 106, 108, 109, 110, 111, 112, 113, 116, 123, 141, 143, 144, 151, 155], "deriv": [26, 54, 59, 61, 106, 108, 109, 110, 111, 112, 113, 116, 123, 134, 159], "notat": [26, 59, 106, 108, 109, 110, 111, 112, 113, 116, 123], "oplu": [26, 59, 106, 108, 109, 110, 111, 112, 113, 116, 122, 123, 159, 160], "group": [26, 34, 35, 58, 59, 66, 69, 81, 88, 91, 95, 106, 108, 109, 110, 111, 112, 113, 116, 123, 141, 143, 144, 155, 157], "known": [26, 59, 85, 106, 108, 109, 110, 111, 112, 113, 116, 123, 157, 158, 160, 161], "ominu": [26, 59, 106, 108, 109, 110, 111, 112, 113, 116, 123, 157, 159, 160], "invers": [26, 59, 69, 106, 108, 109, 110, 111, 112, 113, 116, 123, 157, 160], "x1": [26, 59, 106, 108, 109, 110, 111, 112, 113, 116, 123, 157], "x2": [26, 59, 106, 108, 109, 110, 111, 112, 113, 116, 123, 157], "minus_jacobian_fd": [26, 59, 106, 108, 109, 110, 111, 112, 113, 116, 123], "08": [26, 59, 106, 108, 109, 110, 111, 112, 113, 116, 123, 157], "plus_jacobian_fd": [26, 59, 106, 108, 109, 110, 111, 112, 113, 116, 123], "tool": [27, 160], "input_func": [28, 158, 160, 161], "callabl": [28, 44, 97, 134, 135, 160, 161], "input_freq": [28, 50, 51, 52, 157, 158, 160, 161], "meas_model_list": [28, 157, 158, 160, 161], "meas_freq_list": [28, 157, 158, 160, 161], "meas_offset_list": 28, "mani": [28, 30, 91, 106, 108, 109, 110, 111, 112, 113, 116, 123, 136, 155, 157, 159, 160], "you": [28, 59, 121, 122, 123, 128, 134, 154, 158, 159, 160, 161], "want": [28, 128, 157, 158, 159], "frequenc": [28, 52, 135, 137, 160, 161], "offset": [28, 132, 137], "specifi": [28, 121, 122, 148, 151, 152, 160, 161], "ground": [28, 29, 127, 149, 150, 161], "truth": [28, 29, 127, 149, 150, 161], "trajectori": [28, 128, 130, 131, 152, 157, 161], "simul": [28, 49, 52], "vari": [28, 158], "add_measurement_model": 28, "freq": [28, 137], "exist": 28, "start": [28, 52, 157, 158, 160, 161], "stop": [28, 157, 158, 160, 161], "integr": [28, 76, 77, 92, 160, 161], "noiseless": 28, "measuement": 28, "end": [28, 52, 108, 109, 110, 138, 155, 157, 158, 159, 160, 161], "whether": [28, 29, 31, 32, 33, 34, 36, 37, 38, 80, 128, 130, 131, 148, 149, 150, 151], "possibli": [28, 161], "noisi": [28, 52, 157, 161], "request": 28, "field": [29, 79, 83, 158], "correct": [30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 97, 158, 160, 161], "style": [30, 42, 43], "reject_outli": [31, 32, 33, 34, 36, 37, 38], "iterate_mean": [31, 33, 37, 38], "sigmapointkalmanfilt": [31, 33, 38], "sigma": [31, 33, 37, 38, 40, 47, 127, 128, 129, 130, 148, 157], "unscent": [31, 33, 37, 38, 40, 155], "cubatur": [31, 33, 37, 38, 40, 155], "gh": [31, 33, 37, 38, 40], "hermit": [31, 33, 37, 38, 40, 155], "ni": [31, 32, 33, 34, 36, 37, 38, 39], "mean": [31, 33, 37, 38, 41, 82, 124, 127, 129, 131, 136, 142, 143, 144, 158, 161], "check": [31, 33, 37, 38, 47, 159], "x_": [31, 33, 37, 38, 159, 161], "fuse": [31, 32, 33, 35, 36, 37, 38, 80, 158, 160, 161], "produc": [31, 32, 33, 36, 37, 38, 136, 160], "vectorinput": [31, 33, 37, 38, 74, 76, 77, 91, 92, 94, 95, 97, 104, 114, 158, 159, 160, 161], "most": [31, 32, 33, 35, 36, 37, 38, 159], "recent": [31, 32, 33, 35, 36, 37, 38], "than": [31, 32, 33, 35, 36, 37, 38, 128, 135, 159, 160], "case": [31, 32, 33, 36, 37, 38, 122, 157, 158, 160, 161], "user": [31, 32, 33, 34, 36, 37, 38, 114, 115, 155, 157, 161], "durat": [31, 32, 33, 34, 36, 37, 38, 94, 95, 96, 97, 103, 104, 160], "next": [31, 32, 33, 34, 36, 37, 38, 156, 157, 158, 160, 161], "inpu": [31, 33, 37, 38], "grab": [31, 33, 37, 38], "On": [32, 34, 35, 36, 37], "manifold": [32, 34, 35, 36, 37, 134, 155], "kalman": [32, 36, 37, 155, 161], "x_jac": [32, 36], "output_detail": [32, 36], "just": [32, 128, 157, 158, 159, 160, 161], "done": [32, 54, 95, 156, 157, 159, 160], "valuat": [32, 36], "intermedi": 32, "innov": [32, 39, 80, 81], "gsf": 34, "alspach": 34, "sorenson": 34, "bayesian": 34, "transact": [34, 35], "control": [34, 35, 161], "vol": [34, 35], "17": 34, "4": [34, 134, 157, 158, 159], "pp": [34, 35], "439": 34, "448": 34, "august": 34, "1972": 34, "mix": [34, 35, 140, 141, 143], "\u0107esi\u0107": [34, 35], "markovi\u0107": [34, 35], "petrovi\u0107": [34, 35], "reduct": [34, 35], "signal": [34, 35], "24": [34, 35, 161], "1719": [34, 35], "1723": [34, 35], "nov": [34, 35], "2017": [34, 35], "lsp": [34, 35], "2723765": [34, 35], "mixturest": [34, 35, 129, 130], "kf_list": 35, "extendedkalmanfilt": [35, 36, 42, 158, 160, 161], "transition_matrix": 35, "interact": [35, 155], "multipl": [35, 138, 155, 158], "imm": 35, "p": [35, 144, 157], "blom": 35, "bar": [35, 80, 97, 159], "shalom": 35, "algorithm": [35, 155, 156, 159], "system": [35, 139, 157], "markovian": 35, "switch": [35, 160], "coeffici": 35, "33": 35, "8": [35, 134, 157, 160], "780": 35, "783": 35, "aug": 35, "1988": 35, "9": [35, 57, 58, 62, 79, 134, 157, 159, 160], "1299": 35, "probabl": [35, 128, 130, 131, 151], "transit": [35, 97], "x_km": 35, "carri": 35, "out": [35, 138, 155, 156, 160], "previou": [35, 96, 157, 158, 159, 160], "x_check": 35, "mu_km_model": 35, "0001": 36, "200": [36, 50, 51], "line_search": 36, "extend": [36, 58, 155, 160, 161], "outlier": 39, "unit": [40, 131], "three": [40, 127, 128, 129, 130, 148, 157, 158, 161], "avail": [40, 155, 158, 160, 161], "sigmapoint": [40, 155], "repres": [40, 75, 92, 106, 108, 109, 110, 111, 112, 113, 115, 116, 122, 124, 146, 147, 152, 157, 158, 160], "x_arrai": 41, "manner": 41, "until": [41, 158, 160, 161], "reach": 41, "maximun": 41, "averag": [41, 131], "thei": [41, 60, 155, 159, 160], "disable_progress_bar": [42, 43], "execut": [42, 43, 44, 135, 155], "_description_": [42, 43, 44], "gaussiansumfilt": 43, "interactingmodelfilt": 44, "interactingmultiplemodel": 44, "q_profil": 44, "built": [45, 161], "librari": [45, 161], "basic": 46, "pinhol": [46, 47, 75], "cameraproject": 46, "fu": 47, "fv": 47, "cu": 47, "cv": 47, "image_width": 47, "image_height": 47, "t_bc": 47, "posematrix": 47, "camera_id": 47, "util": [47, 155, 157], "pixel": 47, "coordin": [47, 106, 108, 109, 110, 111, 112, 113], "imag": 47, "intrins": [47, 75], "focal": 47, "length": [47, 132, 152, 157], "horizont": [47, 136], "vertic": [47, 53], "optic": [47, 146, 147], "axi": [47, 147, 148, 149, 150, 161], "intersect": 47, "plane": 47, "width": 47, "height": [47, 73], "transform": [47, 75, 108, 109, 110, 158, 160], "bodi": [47, 52, 74, 75, 85, 86, 89, 90, 91, 108, 109, 110, 134, 157, 161], "frame": [47, 52, 58, 71, 72, 74, 75, 79, 83, 85, 86, 89, 90, 91, 134, 146, 157, 160, 161], "get_cam_to_enu": 47, "dcm": 47, "relat": 47, "enu": 47, "z": [47, 73, 75, 80, 147], "down": 47, "up": [47, 97, 128, 130, 149, 150, 156, 158, 161], "properti": [47, 48, 59, 94, 95, 96, 97, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 124, 147, 152, 158, 160], "sigma_normalized_image_coord": 47, "r_normalized_image_coord": 47, "is_measurement_valid": 47, "uv": 47, "valid": [47, 73, 91, 160, 161], "posit": [47, 48, 59, 71, 73, 75, 81, 85, 86, 87, 88, 89, 90, 106, 108, 109, 110, 111, 112, 113, 128, 146, 147, 152, 157, 159, 160, 161], "within": 47, "is_landmark_in_front_of_cam": 47, "pose": [47, 48, 58, 59, 75, 85, 86, 88, 89, 90, 108, 109, 146, 147, 152, 157, 158, 160], "se3stat": [47, 52, 71, 73, 74, 79, 83, 85, 86, 88, 89, 91, 128, 138, 147, 152, 160], "r_pw_a": [47, 157], "landmark": [47, 53, 75, 85, 86, 157, 158, 159, 160, 161], "front": 47, "free": [47, 156], "imust": [47, 50, 51, 58, 68, 71, 72, 73, 79, 83, 85, 86, 88, 89, 100], "imu": [47, 50, 51, 96, 155], "3d": [47, 52, 110, 111, 113, 146, 147, 152, 153, 160], "resolv": [47, 52, 58, 74, 75, 85, 86, 91, 157, 160, 161], "world": [47, 71, 72, 79, 83, 91, 161], "resolve_landmark_in_cam_fram": 47, "project": [47, 75, 155], "r_pc_c": 47, "v": [47, 58, 72, 76, 77, 79, 80, 82, 83, 104, 108, 121, 157, 160, 161], "to_normalized_coord": 47, "to_pixel_coor": 47, "mea": [47, 80, 157], "conveni": [48, 128, 130, 157, 158], "se": [48, 74, 104, 147, 152, 157, 158, 159, 160], "3": [48, 54, 57, 58, 59, 75, 96, 108, 110, 111, 113, 128, 134, 147, 152, 157, 158, 159, 160, 161], "attitud": [48, 59, 81, 85, 86, 94, 106, 108, 109, 110, 111, 112, 113, 128, 134, 146, 147, 152, 157], "collect": [49, 126, 140, 145, 155, 157], "01": [50, 51, 52, 157, 159, 160], "meas_freq": [50, 51, 52], "t_start": [50, 51, 52], "t_end": [50, 51, 52, 157], "50": [50, 51, 135, 158, 160, 161], "noise_act": [50, 51, 52], "get_ground_truth": [50, 51, 52, 118], "groundtruth": [50, 51, 52, 118, 157], "get_input_data": [50, 51, 52, 118], "retrun": [50, 51, 52, 118], "get_measurement_data": [50, 51, 52, 118], "cylinder_radiu": [51, 53], "max_height": [51, 53], "n_level": [51, 53], "n_landmarks_per_level": [51, 53], "get_groundtruth_landmark": 51, "30": [52, 158, 160, 161], "simpl": [52, 92, 120, 161], "rigid": [52, 89, 108, 109, 110], "move": [52, 159, 161], "space": [52, 143, 144, 155], "rang": [52, 87, 88, 89, 90, 138, 157, 158, 160, 161], "anchor": [52, 87, 88], "tag": [52, 89, 90], "mount": 52, "own": [52, 143, 158, 160, 161], "veloc": [52, 59, 72, 74, 91, 92, 94, 104, 106, 108, 109, 110, 111, 112, 113, 134, 159, 160, 161], "angular": [52, 74, 94, 104, 159, 161], "translat": [52, 74, 104, 160], "order": [52, 59, 76, 158], "arrang": [53, 157], "cylind": 53, "radiu": 53, "top": [53, 154], "discret": [53, 58, 76, 77, 91, 92, 139, 160, 161], "level": [53, 135], "place": [53, 94, 95, 96, 97, 103, 104, 157], "kinemat": [54, 58, 76, 160], "note": [54, 75, 157, 158, 159, 161], "treatment": 54, "typic": 54, "sens": [54, 123, 161], "directli": [54, 80, 81, 97, 106, 122, 151, 156, 158, 160, 161], "se_2": [54, 58, 59, 160], "pdf": 54, "describ": [54, 57, 75, 85, 86, 114, 115, 160], "link": [54, 154, 157], "graviti": [55, 56, 58, 96, 100], "gyro": [57, 59, 68, 96], "accel": [57, 63, 64, 65, 96], "bias_gyro_walk": 57, "bias_accel_walk": 57, "read": [57, 120, 159], "size": [57, 59, 89, 96, 134, 147, 152, 157], "acceleromet": [57, 59, 68], "drive": 57, "bia": [57, 59, 60, 68, 73, 77, 94, 95, 96, 97, 103, 104, 158], "random": [57, 77, 96, 97, 108, 109, 110, 112, 113, 123, 136, 138, 157, 158, 161], "walk": [57, 77, 96, 97, 158], "12x12": 57, "12": [57, 96, 157, 160], "continu": [58, 76, 139, 161], "dot": [58, 76, 77, 92, 106, 108, 109, 110, 111, 112, 113, 139, 160, 161], "omega": [58, 63, 64, 65, 94, 104, 159, 160, 161], "wedg": [58, 74, 91, 94, 95, 104, 106, 108, 109, 110, 111, 112, 113, 157, 159, 160], "shown": [58, 97, 123, 159, 161], "matric": [58, 97, 139, 160], "quit": 58, "instead": [58, 78, 106, 158, 160], "belong": [58, 159, 160], "name": [58, 160], "increment": [58, 66, 69, 94, 95, 96, 97, 103, 104], "euclidean": [58, 66, 69, 160], "ie": 58, "g_a": 58, "inerti": [58, 86, 146, 157], "80665": [58, 79], "equat": [58, 62, 97, 99, 101, 159, 160], "assumpt": 58, "nav_stat": 59, "bias_gyro": 59, "bias_accel": 59, "direct": [59, 80, 106, 108, 109, 110, 111, 112, 113, 134, 157, 158, 160], "composit": [59, 90, 157], "navig": 59, "bias": [59, 68], "orient": [59, 161], "gyroscop": 59, "perturb": [59, 106, 108, 109, 110, 111, 112, 113, 123, 157, 159], "nav": [59, 60, 128, 157, 158, 159, 160, 161], "se23stat": [59, 71, 72, 73, 74, 79, 83, 85, 86, 88, 89, 91, 134, 160], "vectorst": [59, 76, 77, 82, 84, 87, 92, 101, 157, 158, 159, 161], "gyro_bia": [59, 96], "accel_bia": [59, 96], "In": [59, 75, 92, 94, 95, 96, 97, 103, 104, 122, 123, 155, 157, 159, 160, 161], "other": [59, 97, 106, 108, 109, 110, 111, 112, 113, 123, 159, 160, 161], "word": 59, "unbiased_gyro": 60, "unbiased_accel": 60, "sinc": [60, 157, 158, 159, 161], "phi_vec": [61, 62], "m": [61, 83, 91, 134, 157, 158, 159, 160, 161], "2nd": [62, 90], "edit": 62, "211": 62, "adjoint": [66, 159], "correupt": 68, "unbias": 68, "absolut": [71, 72, 89], "se2stat": [71, 74, 85, 86, 88, 89, 91, 106, 152, 157, 158, 159, 160], "matrixliegroupst": [71, 72, 73, 74, 78, 79, 81, 83, 85, 88, 91, 98, 99, 102, 108, 109, 110, 111, 112, 113], "minimum": 73, "varianc": [73, 87], "minim": 73, "fix": [73, 75], "sensor": [73, 161], "local": [74, 79, 83, 156, 161], "comptabil": [74, 82, 85, 86, 88, 91], "so2stat": [74, 91, 160], "so3stat": [74, 79, 83, 91, 106, 160], "pose_state_id": [75, 86, 157], "landmark_state_id": [75, 86, 157], "camera": [75, 146, 147], "pinholecamera": 75, "thih": 75, "bc": 75, "so": [75, 108, 109, 110, 160], "_b": [75, 160], "mathbb": [75, 92, 108, 109, 110, 111, 112, 113, 157, 158, 160, 161], "extrins": 75, "_c": [75, 139], "ell": [75, 85, 86, 97, 159, 161], "ab": [75, 79, 83, 85, 86, 146, 147, 152, 158, 160], "cdot": [75, 159, 160], "f_u": 75, "c_u": 75, "f_v": 75, "c_v": 75, "about": [75, 127, 143, 159], "includ": [75, 97, 155, 157, 158, 160], "doubl": [76, 77, 128, 130, 131, 159], "input_jacobian": [76, 77, 122], "doubleintegr": 77, "b": [77, 97, 158], "rais": [77, 92, 124, 138], "valueerror": [77, 92, 124], "absoluteposit": 78, "deprec": 78, "gravity_vector": 79, "_a": [79, 83, 87, 88, 157, 158, 160, 161], "magnet": [79, 83], "auto": 80, "invari": [80, 81], "readi": [80, 156, 158], "chosen": [80, 143], "approx": 80, "xi": [80, 159, 160], "henc": [80, 134], "similarli": [80, 157], "opposit": 80, "suppli": [80, 90, 97], "invariantinnov": 80, "indirectli": 80, "chain": 80, "rule": 80, "pointrelativeposit": [81, 157], "magnetic_vector": 83, "landmark_posit": [85, 157, 158, 159, 160, 161], "landmark_id": [85, 157], "lndmark": 86, "anchor_posit": [87, 88], "dim": 87, "tag_body_posit": [88, 90], "tag_body_position1": 89, "tag_body_position2": 89, "state_id1": 89, "state_id2": 89, "nb_tag_body_posit": 90, "nb_state_id": 90, "neighbor": 90, "somewher": 90, "q1": 91, "q2": 91, "To": [91, 121, 122, 143, 157, 159, 160, 161], "honest": 91, "sure": 91, "peopl": 91, "we": [91, 155, 156, 157, 158, 159, 160, 161], "were": [91, 146, 147, 148, 149, 150], "while": [91, 158, 160, 161], "motion": [91, 161], "stack": [91, 96, 128, 136, 160], "_1": [91, 160], "bodyvelocityincr": [94, 98, 99, 102, 104], "give": [94, 135, 160, 161], "rotat": [94, 112, 113, 146, 147, 152, 160], "ij": [94, 95, 97, 99, 101, 104], "prod_": [94, 95, 97, 104], "reiniti": [94, 96, 97, 104], "rmi": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "relativemotionincr": [94, 95, 96, 97, 104], "later": [94, 95, 96, 97, 103, 104, 157, 161], "symmetr": [94, 95, 96, 97, 103, 104, 124], "update_bia": [94, 95, 96, 97, 103, 104], "new_bia": [94, 95, 96, 97, 103, 104], "rtype": [94, 95, 104], "matrixliegroup": [95, 106, 108, 109, 110, 111, 112, 113], "trivial": 95, "original_valu": [96, 97, 104], "original_bia": [96, 97], "bias_jacobian": [96, 97], "new_gyro_bia": 96, "new_accel_bia": 96, "state_matrix": 97, "input_matrix": 97, "_j": 97, "rewritten": 97, "quantiti": 97, "total": [97, 131, 157], "furthermor": 97, "augment": 97, "befor": [97, 157, 158, 159], "make": [97, 128, 130, 136, 149, 150, 151, 158, 161], "itself": [97, 159], "preintegratedbodyveloc": [98, 102], "accord": 99, "accordingli": [99, 158], "imuincr": 100, "linearincr": 101, "incorpor": 103, "wheel": [104, 155, 157, 158], "odometri": [104, 155, 157, 158], "varpi": [104, 157, 159, 160], "although": [106, 156, 161], "recommend": [106, 159], "exponenti": [106, 108, 109, 110, 111, 112, 113, 139, 160], "otherwis": [106, 108, 109, 110, 111, 112, 113, 158], "2d": [106, 108, 109, 110, 111, 112, 113, 152, 159, 160, 161], "pymlg": [106, 108, 109, 110, 111, 112, 113, 155, 157], "se2": [106, 108, 109, 110, 111, 112, 113, 160], "so3": [106, 108, 109, 110, 111, 112, 113, 157], "ext": [106, 108, 109, 110, 111, 112, 113], "model_st": 107, "model_prob": [107, 129, 130], "5x5": 108, "se23": 108, "egin": [108, 109, 110], "bmatrix": [108, 109, 110, 157, 158, 159, 160], "quad": [108, 109, 110, 111, 112, 113], "3x3": [109, 111, 113, 160], "4x4": 110, "se3": 110, "from_ro": [110, 113], "msg": [110, 113], "posestamp": 110, "messag": [110, 113, 135], "frame_id": [110, 113], "to_ro": [110, 113], "special": [111, 160], "sl3": 111, "sl": [111, 160], "im": [111, 112, 113], "2x2": 112, "so2": 112, "quaternionstamp": 113, "quaternion": 113, "unless": [114, 115], "someth": [114, 115, 123], "els": [114, 115, 157], "fulli": [114, 115], "seper": [114, 115, 159], "memori": [114, 115], "1d": [115, 116], "core": [117, 155, 161], "primit": [117, 161], "throughout": [117, 128, 130, 131, 159], "without": [120, 124, 157, 160], "period": [122, 139], "wai": [122, 136, 155, 158, 160, 161], "distribut": [122, 124, 140], "u_": 122, "l": [122, 139, 157], "sort": [123, 132, 158], "certain": 123, "label": [123, 148, 151, 152, 157, 161], "differenti": 123, "tutori": [123, 155, 156, 161], "practic": [123, 157, 158, 160], "line": [123, 128, 130, 146, 147, 149, 150, 151, 158], "randn": [123, 157], "dx_test": 123, "assert": [123, 134], "allclos": [123, 134], "usual": [124, 155, 158], "doe": [124, 128, 157, 158, 160], "enforc": 124, "symmetri": 124, "miscellan": [126, 145], "state_tru": [127, 128, 129, 130], "variou": [127, 129, 131, 155], "interest": [127, 131, 161], "metric": [127, 129, 131, 161], "filter": [127, 155, 158], "ee": [127, 128, 129, 130, 131], "nee": [127, 128, 129, 130, 131, 151, 157, 158, 160, 161], "rmse": [127, 128, 129, 130, 131], "md": [127, 128, 129, 130, 161], "mahalanobi": [127, 128, 129, 130, 161], "distanc": [127, 128, 129, 130, 161], "three_sigma": [127, 128, 129, 130, 161], "bound": [127, 128, 129, 130, 131, 138, 148, 151, 157], "result_list": [128, 130], "gaussianresult": [128, 129, 130, 157], "plot": [128, 130, 155, 157, 161], "noth": 128, "ifi": [128, 160], "support": 128, "themselv": [128, 157], "from_estim": [128, 130, 158, 160, 161], "state_true_list": [128, 130], "except": 128, "veri": [128, 160], "examin": 128, "last": [128, 157, 158], "plot_error": [128, 157, 158, 160, 161], "likewis": 128, "let": [128, 130, 131, 157, 158, 159, 160, 161], "len": [128, 130, 157, 158, 160, 161], "value_tru": [128, 130], "nees_lower_bound": [128, 130, 131], "confidence_interv": [128, 130, 131, 151], "lower": [128, 130, 131], "side": [128, 130, 131, 159], "cumul": [128, 130, 131], "threshold": [128, 130, 131], "confid": [128, 130, 131, 151], "upper": [128, 130, 131], "ax": [128, 130, 146, 147, 148, 149, 150, 151, 152, 153, 157, 158, 160, 161], "99": [128, 130], "nees_upper_bound": [128, 130, 131], "double_sid": [128, 130, 131], "python": [128, 130, 138], "estimate_list": [128, 130], "nearest": [128, 130, 133], "interpol": [128, 130, 138, 149, 150], "do": [128, 130, 149, 150, 157, 158, 159, 161], "exactli": [128, 130, 160], "imm_estim": 129, "mixtureresult": 130, "gaussianresultlist": [130, 131, 135, 148, 151, 157, 158, 160, 161], "trial_result": 131, "mont": [131, 135, 155], "carlo": [131, 135, 155], "experi": [131, 135, 155], "trial": [131, 135], "denot": [131, 157, 160, 161], "raw": [131, 161], "num_trial": [131, 135], "average_ne": 131, "average_e": 131, "total_rms": 131, "meaningless": 131, "expected_ne": 131, "expect": [131, 135, 151, 159], "first_stamp": 132, "second_stamp": 132, "max_differ": 132, "02": [132, 157, 159, 160], "smallest": 132, "rpg_trajectory_evalu": 132, "toolbox": 132, "consid": [132, 157, 158], "match_first_idx": 132, "match_second_idx": 132, "stamps_list": 133, "find": [133, 139], "indic": 133, "queri": [133, 138], "fun": 134, "reshap": [134, 157], "def": [134, 157, 158, 159, 160, 161], "jac_test": 134, "jac_tru": 134, "atol": 134, "c_ab": [134, 157], "v_zw_a": 134, "v_zw_b": 134, "linalg": [134, 157, 158, 159, 160, 161], "jac_fd": 134, "union": [134, 152], "central": 134, "complex": [134, 157], "ensur": 134, "handl": [134, 141, 146, 147, 148, 149, 150, 157, 158], "num_job": 135, "montecarloresult": [135, 151], "executor": [135, 155], "aappgreg": 135, "integ": [135, 160], "remain": [135, 160], "consist": [135, 155, 159], "concurr": 135, "run": [135, 155, 156, 158], "job": 135, "cpu": 135, "parallel": 135, "debug": 135, "below": [135, 154, 157, 160, 161], "n_cpu": 135, "progress": 135, "abov": [135, 158, 160, 161], "sent": 135, "stdout": 135, "increas": [135, 157], "report": 135, "cov": [136, 157], "num_sampl": 136, "Will": [136, 149, 150], "independ": 136, "faster": [136, 160], "sampl": [136, 139, 160, 161], "avoid": [136, 158], "recomput": 136, "choleski": [136, 157], "decomposit": 136, "schedul": 137, "sequenti": 137, "cannot": [137, 160], "reduc": 137, "individu": [137, 157], "query_stamp": 138, "geodes": 138, "onc": [138, 143, 161], "fashion": [138, 143], "x_data": 138, "x_queri": 138, "x_interp": 138, "thereof": 138, "treat": 138, "typeerror": 138, "a_c": 139, "l_c": 139, "q_c": 139, "van": 139, "loan": 139, "hspace": 139, "5mm": 139, "power": 139, "spectral": 139, "densiti": 139, "equival": [139, 157], "represent": [139, 160], "_d": 139, "a_d": 139, "q_d": 139, "requir": [140, 159], "x_list": [141, 143], "vectorspac": [141, 142], "x_par": 143, "reparametr": 143, "tangent": [143, 144], "expand": 143, "around": [143, 144, 158], "mai": [143, 152, 159], "member": 143, "mu": 144, "express": [144, 159], "stateandcovari": 144, "x_hat": 144, "algebra": 144, "whose": 144, "line_thick": [146, 147], "scale": [146, 147, 153, 157], "25": [146, 147, 161], "color": [146, 147, 148, 151, 152], "tab": [146, 147, 157], "blue": [146, 147, 157], "matplotlib": [146, 153, 157, 158, 160, 161], "plot_pos": [146, 157], "center": 146, "corner": 146, "plt": [146, 147, 148, 149, 150, 151, 152, 153, 157, 158, 160, 161], "figur": [146, 147, 148, 149, 150, 151, 156, 161], "drawn": [146, 147, 148, 149, 150, 151], "thick": 147, "sharei": [148, 149, 150], "plotter": 148, "draw": [148, 149, 150, 151], "meas_list": [149, 150, 157], "domain": [149, 150], "similar": [149, 150, 157, 158, 161], "perfectli": [149, 150, 159], "95": 151, "expected_nees_color": 151, "show": [151, 157, 158, 159, 160, 161], "fed": 151, "desir": 151, "region": 151, "wa": [151, 158, 159], "line_color": [152, 157], "triad_color": 152, "arrow_length": 152, "linewidth": 152, "plot_2d": 152, "triad": 152, "planar": 152, "rgb": 152, "arrow": 152, "bird": 152, "ey": [152, 158, 159, 160, 161], "view": 152, "equal": [153, 157, 161], "navli": [154, 156, 158, 160, 161], "packag": [154, 155, 156], "click": 154, "altern": [154, 158], "search": 154, "box": [154, 155, 160], "tradit": 155, "idea": 155, "behind": 155, "fall": [155, 159], "exact": [155, 160], "varieti": 155, "custom": [155, 160, 161], "spheric": 155, "batch": 155, "differenc": 155, "aggreg": [155, 159], "preintegr": 155, "few": [155, 156, 160, 161], "diagram": 155, "summar": 155, "clone": [155, 156], "directori": 155, "git": [155, 156], "decargroup": [155, 156], "cd": [155, 156], "pip": [155, 156], "command": [155, 156], "mathemat": [155, 160], "depth": 155, "websit": 155, "folder": 155, "python3": 155, "script": 155, "welcom": 156, "go": [156, 158], "toi": 156, "framework": [156, 157, 158, 160, 161], "instal": 156, "now": [156, 157, 158, 159, 160, 161], "regist": 156, "pypi": 156, "work": [156, 158, 159, 160, 161], "re": 156, "still": [156, 160], "properli": 156, "sorri": 156, "feel": 156, "help": 156, "ll": [157, 158, 161], "notebook": [157, 159], "part": 157, "goal": 157, "ldot": 157, "begin": [157, 158, 159, 160, 161], "ab_k": 157, "theta": [157, 158, 159, 160, 161], "addition": 157, "th": [157, 159], "align": [157, 159, 160, 161], "jk": 157, "mathsf": 157, "white": 157, "notic": [157, 158], "unlik": [157, 160], "leverag": 157, "need": [157, 159, 160, 161], "rest": 157, "import": [157, 158, 159, 160, 161], "invert": 157, "string": 157, "pose_key_str": 157, "landmark_key_str": 157, "20": 157, "pointrelativepositionslam": 157, "__init__": [157, 158, 159, 160, 161], "_r": 157, "lib": [157, 158, 159, 160, 161], "r_a": 157, "p_a": 157, "_pose_state_id": 157, "_landmark_state_id": 157, "r_zw_a": 157, "pose_jacobian": 157, "odot": 157, "elif": 157, "landmark_jacobian": 157, "jac_dict": 157, "09642014": 157, "05653507": 157, "Then": 157, "bodyframeveloc": 157, "circl": 157, "co": [157, 159, 160, 161], "sin": [157, 159, 160, 161], "linspac": 157, "pi": 157, "enumer": [157, 161], "meas_model": [157, 158, 159, 160, 161], "profil": 157, "input_profil": 157, "lambda": [157, 158, 160, 161], "dg": [157, 158, 160, 161], "datagener": [157, 158, 160, 161], "gt_pose": 157, "pyplot": [157, 158, 160, 161], "fig": [157, 158, 160, 161], "set_titl": [157, 158, 160, 161], "set_xlabel": [157, 158, 160, 161], "set_ylabel": [157, 158, 160, 161], "wish": 157, "measaur": 157, "howev": [157, 159, 161], "thankfulli": 157, "tild": 157, "rewrit": 157, "pai": 157, "attent": 157, "ve": 157, "seen": [157, 160], "nonweight": 157, "explor": 157, "subset": 157, "consecut": 157, "section": 157, "super": [157, 158, 160], "_cov": 157, "_x0": 157, "precomput": 157, "squara": 157, "_l": 157, "inv": [157, 160], "_process_model": 157, "_u": 157, "x_km1": 157, "info": 157, "jac_list": 157, "pointrelativepositionresidu": 157, "previous": [157, 159], "eval_st": 157, "full_jac": 157, "dead": 157, "reckon": 157, "x0_hat": 157, "init_pose_est": 157, "append": [157, 158, 160, 161], "init_landmark_est": 157, "sigma_init": 157, "perturbed_landmark": 157, "red": 157, "marker": 157, "legend": [157, 161], "39": [157, 160], "like": [157, 158], "l0": 157, "l1": 157, "init_keys_list": 157, "variables_init": 157, "x3": 157, "x4": 157, "x5": 157, "x6": 157, "x7": 157, "x8": 157, "x9": 157, "l3": 157, "l4": 157, "l5": 157, "l6": 157, "l7": 157, "l8": 157, "l9": 157, "est_stamp": 157, "init_cov": 157, "prior_residu": 157, "process_residu": 157, "find_nearest_stamp_idx": 157, "pose_idx": 157, "meas_residu": 157, "dc": 157, "opt_result": 157, "variables_opt": 157, "10209": 157, "908382510479": 157, "1187e": 157, "03": [157, 160], "8430e": 157, "0913e": 157, "8191e": 157, "00": [157, 159, 160], "grad": 157, "_inf": 157, "5900e": 157, "9963e": 157, "1161e": 157, "2235e": 157, "1290e": 157, "5779e": 157, "0496e": 157, "0240e": 157, "0158e": 157, "05": [157, 160], "1471e": 157, "9900e": 157, "9980e": 157, "04": [157, 160], "0009e": 157, "1650e": 157, "6577e": 157, "5637e": 157, "8333e": 157, "09": 157, "0333e": 157, "1292e": 157, "4423e": 157, "7244e": 157, "7811e": 157, "7510e": 157, "0526e": 157, "2728e": 157, "3721e": 157, "0217e": 157, "7209e": 157, "3668e": 157, "5173e": 157, "5874e": 157, "3465e": 157, "7452e": 157, "13": 157, "0893e": 157, "6017": 157, "9997": 157, "final": [157, 160, 161], "1996": 157, "258310853446": 157, "40": 157, "7240629196167": 157, "thee": 157, "margin": 157, "visual": 157, "sometim": [157, 159, 160], "choos": [157, 161], "manipul": [157, 159], "complet": 157, "poses_results_list": 157, "landmarks_results_list": 157, "postprocess": 157, "gaussian_result_list": 157, "plot_ne": [157, 158, 160, 161], "rad": [157, 158, 160, 161], "opt_pos": 157, "green": 157, "opt_landmark": 157, "sparsiti": 157, "pattern": 157, "subplot": 157, "spy": 157, "info_matrix": 157, "arbitarili": 158, "combin": [158, 161], "suppos": 158, "easili": [158, 160], "former": 158, "approach": 158, "48": 158, "99500417": [158, 160], "09983342": [158, 160], "84679329": 158, "09491919": 158, "who": 158, "alreadi": 158, "demonstr": 158, "49": 158, "x_temp": 158, "nresult": 158, "45359612": 158, "89120736": 158, "80531705": 158, "55185711": 158, "write": 158, "mathrm": 158, "slowli": 158, "scipi": [158, 159, 160], "expm": [158, 159, 160], "wedge_se2": [158, 159, 160], "wheeledrobotwithbia": 158, "input_covariance_matrix": [158, 159, 160], "vel": [158, 160], "x_next": [158, 159, 160, 161], "purpos": [158, 160], "even": [158, 160, 161], "nomin": 158, "seri": 158, "51": 158, "rangetolandmarkse2": [158, 160], "measurement_covari": [158, 160], "po": [158, 160, 161], "made": 158, "throw": 158, "feed": 158, "easi": 158, "lightweight": 158, "52": 158, "46544123": 158, "88507893": 158, "good": [158, 159], "anywai": 158, "pass": 158, "boilerpl": 158, "extra": 158, "effect": 158, "With": [158, 160], "snippet": [158, 160], "53": 158, "state_data": [158, 160, 161], "kalman_filt": [158, 160, 161], "diag": [158, 160, 161], "meas_idx": [158, 160, 161], "occur": [158, 160, 161], "load": [158, 160, 161], "ang": 158, "frequent": 158, "would": 158, "55": 158, "wheeledrobotst": 158, "pose_valu": 158, "bias_valu": 158, "getter": 158, "look": 158, "cleaner": 158, "flexibl": 158, "becaus": [158, 159], "ergonom": 158, "As": [159, 160, 161], "know": 159, "conform": 159, "constraint": 159, "triangleq": 159, "partial": 159, "regular": [159, 161], "univers": 159, "roughli": 159, "what": 159, "micro": [159, 160], "theori": [159, 160], "paper": 159, "wherea": 159, "natur": 159, "aris": 159, "choic": 159, "dont": 159, "worri": 159, "drawback": 159, "computation": 159, "expens": 159, "less": 159, "accur": 159, "analyt": 159, "offer": 159, "accuraci": 159, "speed": [159, 160], "recal": 159, "had": 159, "theta_": [159, 161], "theta_k": [159, 161], "omega_k": [159, 161], "v_k": [159, 161], "y_": [159, 161], "y_k": [159, 161], "techniqu": 159, "lead": 159, "deviat": [159, 161], "wheeledrobot": [159, 161], "did": 159, "everyth": 159, "correctli": 159, "analy": 159, "nfinit": 159, "01682942": 159, "01080605": 159, "01682943": 159, "01080604": 159, "almost": 159, "slightli": 159, "due": 159, "nevertheless": 159, "suffici": 159, "applic": 159, "again": [159, 160], "rangetolandmark": [159, 161], "nanaly": 159, "70710678": 159, "70710696": 159, "nice": 159, "wedge_k": 159, "underbrac": 159, "There": [159, 161], "invok": [159, 161], "adjoint_se2": 159, "wheeledrobotse2": [159, 160], "0394695": 159, "92106099": 159, "38941834": 159, "19470917": 159, "00000000e": [159, 160], "10747782e": 159, "94695038e": 159, "21060995e": 159, "89418343e": 159, "94709171e": 159, "89418342e": 159, "21060994e": 159, "longer": 159, "tangibl": 159, "advantag": [159, 161], "high": 159, "uncertainti": 159, "excess": 159, "far": 159, "could": [160, 161], "task": 160, "becom": 160, "increasingli": 160, "cosin": 160, "togeth": 160, "multipli": 160, "proce": 160, "further": 160, "setup": 160, "vee": 160, "28": 160, "reset": 160, "helper": 160, "vee_se2": 160, "fundament": 160, "relationship": 160, "appear": 160, "logarithm": 160, "deeper": 160, "suffic": 160, "think": 160, "3x1": [160, 161], "logm": 160, "nthe": 160, "18467933": 160, "30949192": 160, "littl": 160, "bit": 160, "literatur": 160, "boxplu": 160, "boxminu": 160, "varepsilon": 160, "context": 160, "plai": 160, "role": 160, "new_valu": 160, "other_inv": 160, "adapt": 160, "od": 160, "short": 160, "t_": 160, "unchang": 160, "And": 160, "liter": 160, "past": 160, "modif": 160, "hz": [160, 161], "99950000e": 160, "99983333e": 160, "99990000e": 160, "99997500e": 160, "52438924": 160, "40056502": 160, "poserangetolandmark": 160, "299276237837416": 160, "scratch": [160, 161], "pedagog": 160, "come": 160, "belon": 160, "sl3state": 160, "homographi": 160, "moreov": 160, "close": 160, "formula": 160, "underli": 160, "flight": 161, "environ": 161, "euler": 161, "seed": 161, "cover": 161, "those": 161, "y_i": 161, "23": 161, "real": 161, "4867558": 161, "40227221": 161, "5906187969698615": 161, "corrupt": 161, "item": 161, "scatter": 161, "annot": 161, "xlabel": 161, "ylabel": 161, "u_arrai": 161, "u_stamp": 161, "whenev": 161, "26": 161, "try": 161, "too": 161, "unscentedkalmanfilt": 161, "iteratedkalmanfilt": 161, "stateless": 161, "extern": 161, "slight": 161, "burden": 161, "transpar": 161, "abil": 161, "ekf": 161, "ukf": 161, "obtain": 161, "qualiti": 161, "27": 161, "might": 161}, "objects": {"navlie": [[0, 0, 0, "-", "batch"], [21, 0, 0, "-", "composite"], [27, 0, 0, "-", "datagen"], [30, 0, 0, "-", "filters"], [45, 0, 0, "-", "lib"], [117, 0, 0, "-", "types"], [125, 0, 0, "-", "utils"]], "navlie.batch": [[1, 0, 0, "-", "estimator"], [3, 0, 0, "-", "gaussian_mixtures"], [9, 0, 0, "-", "losses"], [13, 0, 0, "-", "problem"], [16, 0, 0, "-", "residuals"]], "navlie.batch.estimator": [[2, 1, 1, "", "BatchEstimator"]], "navlie.batch.estimator.BatchEstimator": [[2, 2, 1, "", "solve"]], "navlie.batch.gaussian_mixtures": [[4, 1, 1, "", "GaussianMixtureResidual"], [5, 1, 1, "", "HessianSumMixtureResidual"], [6, 1, 1, "", "MaxMixtureResidual"], [7, 1, 1, "", "MaxSumMixtureResidual"], [8, 1, 1, "", "SumMixtureResidual"]], "navlie.batch.gaussian_mixtures.GaussianMixtureResidual": [[4, 2, 1, "", "evaluate"], [4, 2, 1, "", "evaluate_component_residuals"], [4, 2, 1, "", "jacobian_fd"], [4, 2, 1, "", "mix_errors"], [4, 2, 1, "", "mix_jacobians"], [4, 2, 1, "", "sqrt_info_matrix"]], "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual": [[5, 2, 1, "", "evaluate"], [5, 2, 1, "", "evaluate_component_residuals"], [5, 2, 1, "", "get_normalization_constant"], [5, 2, 1, "", "jacobian_fd"], [5, 2, 1, "", "mix_errors"], [5, 2, 1, "", "mix_jacobians"], [5, 3, 1, "", "no_use_complex_numbers"], [5, 2, 1, "", "sqrt_info_matrix"]], "navlie.batch.gaussian_mixtures.MaxMixtureResidual": [[6, 2, 1, "", "evaluate"], [6, 2, 1, "", "evaluate_component_residuals"], [6, 2, 1, "", "jacobian_fd"], [6, 2, 1, "", "mix_errors"], [6, 2, 1, "", "mix_jacobians"], [6, 2, 1, "", "sqrt_info_matrix"]], "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual": [[7, 2, 1, "", "compute_nonlinear_part"], [7, 3, 1, "", "damping_const"], [7, 2, 1, "", "evaluate"], [7, 2, 1, "", "evaluate_component_residuals"], [7, 2, 1, "", "jacobian_fd"], [7, 2, 1, "", "mix_errors"], [7, 2, 1, "", "mix_jacobians"], [7, 2, 1, "", "sqrt_info_matrix"]], "navlie.batch.gaussian_mixtures.SumMixtureResidual": [[8, 2, 1, "", "evaluate"], [8, 2, 1, "", "evaluate_component_residuals"], [8, 2, 1, "", "jacobian_fd"], [8, 2, 1, "", "mix_errors"], [8, 2, 1, "", "mix_jacobians"], [8, 2, 1, "", "sqrt_info_matrix"]], "navlie.batch.losses": [[10, 1, 1, "", "CauchyLoss"], [11, 1, 1, "", "L2Loss"], [12, 1, 1, "", "LossFunction"]], "navlie.batch.losses.CauchyLoss": [[10, 2, 1, "", "loss"], [10, 2, 1, "", "weight"]], "navlie.batch.losses.L2Loss": [[11, 2, 1, "", "loss"], [11, 2, 1, "", "weight"]], "navlie.batch.losses.LossFunction": [[12, 2, 1, "", "loss"], [12, 2, 1, "", "weight"]], "navlie.batch.problem": [[14, 1, 1, "", "OptimizationSummary"], [15, 1, 1, "", "Problem"]], "navlie.batch.problem.Problem": [[15, 2, 1, "", "add_residual"], [15, 2, 1, "", "add_variable"], [15, 2, 1, "", "compute_covariance"], [15, 2, 1, "", "compute_error_jac_cost"], [15, 2, 1, "", "get_covariance_block"], [15, 2, 1, "", "is_converged"], [15, 2, 1, "", "set_variables_constant"], [15, 2, 1, "", "solve"]], "navlie.batch.residuals": [[17, 1, 1, "", "MeasurementResidual"], [18, 1, 1, "", "PriorResidual"], [19, 1, 1, "", "ProcessResidual"], [20, 1, 1, "", "Residual"]], "navlie.batch.residuals.MeasurementResidual": [[17, 2, 1, "", "evaluate"], [17, 2, 1, "", "jacobian_fd"], [17, 2, 1, "", "sqrt_info_matrix"]], "navlie.batch.residuals.PriorResidual": [[18, 2, 1, "", "evaluate"], [18, 2, 1, "", "jacobian_fd"], [18, 2, 1, "", "sqrt_info_matrix"]], "navlie.batch.residuals.ProcessResidual": [[19, 2, 1, "", "evaluate"], [19, 2, 1, "", "jacobian_fd"], [19, 2, 1, "", "sqrt_info_matrix"]], "navlie.batch.residuals.Residual": [[20, 2, 1, "", "evaluate"], [20, 2, 1, "", "jacobian_fd"], [20, 2, 1, "", "sqrt_info_matrix"]], "navlie.composite": [[22, 1, 1, "", "CompositeInput"], [23, 1, 1, "", "CompositeMeasurement"], [24, 1, 1, "", "CompositeMeasurementModel"], [25, 1, 1, "", "CompositeProcessModel"], [26, 1, 1, "", "CompositeState"]], "navlie.composite.CompositeInput": [[22, 2, 1, "", "add_input"], [22, 2, 1, "", "copy"], [22, 3, 1, "", "covariance"], [22, 3, 1, "", "dof"], [22, 2, 1, "", "get_dof_by_id"], [22, 2, 1, "", "get_index_by_id"], [22, 2, 1, "", "get_input_by_id"], [22, 2, 1, "", "get_stamp_by_id"], [22, 2, 1, "", "plus"], [22, 2, 1, "", "remove_input_by_id"], [22, 2, 1, "", "set_input_by_id"], [22, 2, 1, "", "set_stamp_by_id"], [22, 2, 1, "", "set_stamp_for_all"], [22, 3, 1, "", "stamp"], [22, 3, 1, "", "state_id"], [22, 2, 1, "", "to_list"]], "navlie.composite.CompositeMeasurement": [[23, 2, 1, "", "minus"], [23, 3, 1, "", "model"], [23, 3, 1, "", "stamp"], [23, 3, 1, "", "state_id"], [23, 3, 1, "", "value"]], "navlie.composite.CompositeMeasurementModel": [[24, 2, 1, "", "covariance"], [24, 2, 1, "", "evaluate"], [24, 2, 1, "", "evaluate_with_jacobian"], [24, 2, 1, "", "jacobian"], [24, 2, 1, "", "jacobian_fd"], [24, 2, 1, "", "sqrt_information"]], "navlie.composite.CompositeProcessModel": [[25, 2, 1, "", "covariance"], [25, 2, 1, "", "evaluate"], [25, 2, 1, "", "evaluate_with_jacobian"], [25, 2, 1, "", "input_covariance"], [25, 2, 1, "", "input_jacobian_fd"], [25, 2, 1, "", "jacobian"], [25, 2, 1, "", "jacobian_fd"], [25, 2, 1, "", "sqrt_information"]], "navlie.composite.CompositeState": [[26, 2, 1, "", "add_state"], [26, 2, 1, "", "copy"], [26, 3, 1, "", "dof"], [26, 2, 1, "", "get_dof_by_id"], [26, 2, 1, "", "get_index_by_id"], [26, 2, 1, "", "get_matrix_block_by_ids"], [26, 2, 1, "", "get_slice_by_id"], [26, 2, 1, "", "get_slices"], [26, 2, 1, "", "get_stamp_by_id"], [26, 2, 1, "", "get_state_by_id"], [26, 2, 1, "", "get_value_by_id"], [26, 2, 1, "", "jacobian_from_blocks"], [26, 2, 1, "", "minus"], [26, 2, 1, "", "minus_jacobian"], [26, 2, 1, "", "minus_jacobian_fd"], [26, 2, 1, "", "plus"], [26, 2, 1, "", "plus_by_id"], [26, 2, 1, "", "plus_jacobian"], [26, 2, 1, "", "plus_jacobian_fd"], [26, 2, 1, "", "remove_state_by_id"], [26, 2, 1, "", "set_matrix_block_by_ids"], [26, 2, 1, "", "set_stamp_by_id"], [26, 2, 1, "", "set_stamp_for_all"], [26, 2, 1, "", "set_state_by_id"], [26, 2, 1, "", "set_value_by_id"], [26, 3, 1, "", "stamp"], [26, 3, 1, "", "state_id"], [26, 2, 1, "", "to_list"], [26, 3, 1, "", "value"]], "navlie.datagen": [[28, 1, 1, "", "DataGenerator"], [29, 4, 1, "", "generate_measurement"]], "navlie.datagen.DataGenerator": [[28, 2, 1, "", "add_measurement_model"], [28, 2, 1, "", "generate"]], "navlie.filters": [[31, 1, 1, "", "CubatureKalmanFilter"], [32, 1, 1, "", "ExtendedKalmanFilter"], [33, 1, 1, "", "GaussHermiteKalmanFilter"], [34, 1, 1, "", "GaussianSumFilter"], [35, 1, 1, "", "InteractingModelFilter"], [36, 1, 1, "", "IteratedKalmanFilter"], [37, 1, 1, "", "SigmaPointKalmanFilter"], [38, 1, 1, "", "UnscentedKalmanFilter"], [39, 4, 1, "", "check_outlier"], [40, 4, 1, "", "generate_sigmapoints"], [41, 4, 1, "", "mean_state"], [42, 4, 1, "", "run_filter"], [43, 4, 1, "", "run_gsf_filter"], [44, 4, 1, "", "run_imm_filter"]], "navlie.filters.CubatureKalmanFilter": [[31, 2, 1, "", "correct"], [31, 3, 1, "", "iterate_mean"], [31, 3, 1, "", "method"], [31, 2, 1, "", "predict"], [31, 3, 1, "", "process_model"], [31, 3, 1, "", "reject_outliers"]], "navlie.filters.ExtendedKalmanFilter": [[32, 2, 1, "", "correct"], [32, 2, 1, "", "predict"], [32, 3, 1, "", "process_model"], [32, 3, 1, "", "reject_outliers"]], "navlie.filters.GaussHermiteKalmanFilter": [[33, 2, 1, "", "correct"], [33, 3, 1, "", "iterate_mean"], [33, 3, 1, "", "method"], [33, 2, 1, "", "predict"], [33, 3, 1, "", "process_model"], [33, 3, 1, "", "reject_outliers"]], "navlie.filters.GaussianSumFilter": [[34, 2, 1, "", "correct"], [34, 2, 1, "", "predict"], [34, 3, 1, "", "process_model"], [34, 3, 1, "", "reject_outliers"]], "navlie.filters.InteractingModelFilter": [[35, 2, 1, "", "correct"], [35, 2, 1, "", "interaction"], [35, 2, 1, "", "predict"]], "navlie.filters.IteratedKalmanFilter": [[36, 2, 1, "", "correct"], [36, 3, 1, "", "line_search"], [36, 3, 1, "", "max_iters"], [36, 2, 1, "", "predict"], [36, 3, 1, "", "process_model"], [36, 3, 1, "", "reject_outliers"], [36, 3, 1, "", "step_tol"]], "navlie.filters.SigmaPointKalmanFilter": [[37, 2, 1, "", "correct"], [37, 3, 1, "", "iterate_mean"], [37, 3, 1, "", "method"], [37, 2, 1, "", "predict"], [37, 3, 1, "", "process_model"], [37, 3, 1, "", "reject_outliers"]], "navlie.filters.UnscentedKalmanFilter": [[38, 2, 1, "", "correct"], [38, 3, 1, "", "iterate_mean"], [38, 3, 1, "", "method"], [38, 2, 1, "", "predict"], [38, 3, 1, "", "process_model"], [38, 3, 1, "", "reject_outliers"]], "navlie.lib": [[46, 0, 0, "-", "camera"], [49, 0, 0, "-", "datasets"], [54, 0, 0, "-", "imu"], [70, 0, 0, "-", "models"], [93, 0, 0, "-", "preintegration"], [105, 0, 0, "-", "states"]], "navlie.lib.camera": [[47, 1, 1, "", "PinholeCamera"], [48, 1, 1, "", "PoseMatrix"]], "navlie.lib.camera.PinholeCamera": [[47, 5, 1, "", "R_normalized_image_coords"], [47, 2, 1, "", "copy"], [47, 2, 1, "", "evaluate"], [47, 2, 1, "", "get_cam_to_enu"], [47, 5, 1, "", "intrinsics"], [47, 2, 1, "", "is_landmark_in_front_of_cam"], [47, 2, 1, "", "is_measurement_valid"], [47, 2, 1, "", "project"], [47, 2, 1, "", "resolve_landmark_in_cam_frame"], [47, 5, 1, "", "sigma_normalized_image_coords"], [47, 2, 1, "", "to_normalized_coords"], [47, 2, 1, "", "to_pixel_coors"]], "navlie.lib.camera.PoseMatrix": [[48, 5, 1, "", "attitude"], [48, 2, 1, "", "copy"], [48, 5, 1, "", "position"]], "navlie.lib.datasets": [[50, 1, 1, "", "SimulatedInertialGPSDataset"], [51, 1, 1, "", "SimulatedInertialLandmarkDataset"], [52, 1, 1, "", "SimulatedPoseRangingDataset"], [53, 4, 1, "", "generate_landmark_positions"]], "navlie.lib.datasets.SimulatedInertialGPSDataset": [[50, 2, 1, "", "get_ground_truth"], [50, 2, 1, "", "get_input_data"], [50, 2, 1, "", "get_measurement_data"]], "navlie.lib.datasets.SimulatedInertialLandmarkDataset": [[51, 2, 1, "", "get_ground_truth"], [51, 2, 1, "", "get_groundtruth_landmarks"], [51, 2, 1, "", "get_input_data"], [51, 2, 1, "", "get_measurement_data"]], "navlie.lib.datasets.SimulatedPoseRangingDataset": [[52, 2, 1, "", "get_ground_truth"], [52, 2, 1, "", "get_input_data"], [52, 2, 1, "", "get_measurement_data"]], "navlie.lib.imu": [[55, 4, 1, "", "G_matrix"], [56, 4, 1, "", "G_matrix_inv"], [57, 1, 1, "", "IMU"], [58, 1, 1, "", "IMUKinematics"], [59, 1, 1, "", "IMUState"], [60, 4, 1, "", "L_matrix"], [61, 4, 1, "", "M_matrix"], [62, 4, 1, "", "N_matrix"], [63, 4, 1, "", "U_matrix"], [64, 4, 1, "", "U_matrix_inv"], [65, 4, 1, "", "U_tilde_matrix"], [66, 4, 1, "", "adjoint_IE3"], [67, 4, 1, "", "delta_matrix"], [68, 4, 1, "", "get_unbiased_imu"], [69, 4, 1, "", "inverse_IE3"]], "navlie.lib.imu.IMU": [[57, 3, 1, "", "accel"], [57, 3, 1, "", "bias_accel_walk"], [57, 3, 1, "", "bias_gyro_walk"], [57, 2, 1, "", "copy"], [57, 3, 1, "", "covariance"], [57, 3, 1, "", "dof"], [57, 3, 1, "", "gyro"], [57, 2, 1, "", "plus"], [57, 2, 1, "", "random"], [57, 3, 1, "", "stamp"], [57, 3, 1, "", "state_id"]], "navlie.lib.imu.IMUKinematics": [[58, 2, 1, "", "covariance"], [58, 2, 1, "", "evaluate"], [58, 2, 1, "", "evaluate_with_jacobian"], [58, 2, 1, "", "input_covariance"], [58, 2, 1, "", "input_jacobian_fd"], [58, 2, 1, "", "jacobian"], [58, 2, 1, "", "jacobian_fd"], [58, 2, 1, "", "sqrt_information"]], "navlie.lib.imu.IMUState": [[59, 2, 1, "", "add_state"], [59, 5, 1, "", "attitude"], [59, 5, 1, "", "bias"], [59, 5, 1, "", "bias_accel"], [59, 5, 1, "", "bias_gyro"], [59, 2, 1, "", "copy"], [59, 5, 1, "", "direction"], [59, 3, 1, "", "dof"], [59, 2, 1, "", "get_dof_by_id"], [59, 2, 1, "", "get_index_by_id"], [59, 2, 1, "", "get_matrix_block_by_ids"], [59, 2, 1, "", "get_slice_by_id"], [59, 2, 1, "", "get_slices"], [59, 2, 1, "", "get_stamp_by_id"], [59, 2, 1, "", "get_state_by_id"], [59, 2, 1, "", "get_value_by_id"], [59, 2, 1, "", "jacobian_from_blocks"], [59, 2, 1, "", "minus"], [59, 2, 1, "", "minus_jacobian"], [59, 2, 1, "", "minus_jacobian_fd"], [59, 5, 1, "", "nav_state"], [59, 2, 1, "", "plus"], [59, 2, 1, "", "plus_by_id"], [59, 2, 1, "", "plus_jacobian"], [59, 2, 1, "", "plus_jacobian_fd"], [59, 5, 1, "", "pose"], [59, 5, 1, "", "position"], [59, 2, 1, "", "remove_state_by_id"], [59, 2, 1, "", "set_matrix_block_by_ids"], [59, 2, 1, "", "set_stamp_by_id"], [59, 2, 1, "", "set_stamp_for_all"], [59, 2, 1, "", "set_state_by_id"], [59, 2, 1, "", "set_value_by_id"], [59, 3, 1, "", "stamp"], [59, 3, 1, "", "state_id"], [59, 2, 1, "", "to_list"], [59, 3, 1, "", "value"], [59, 5, 1, "", "velocity"]], "navlie.lib.models": [[71, 1, 1, "", "AbsolutePosition"], [72, 1, 1, "", "AbsoluteVelocity"], [73, 1, 1, "", "Altitude"], [74, 1, 1, "", "BodyFrameVelocity"], [75, 1, 1, "", "CameraProjection"], [76, 1, 1, "", "DoubleIntegrator"], [77, 1, 1, "", "DoubleIntegratorWithBias"], [78, 1, 1, "", "GlobalPosition"], [79, 1, 1, "", "Gravitometer"], [80, 1, 1, "", "InvariantMeasurement"], [81, 1, 1, "", "InvariantPointRelativePosition"], [82, 1, 1, "", "LinearMeasurement"], [83, 1, 1, "", "Magnetometer"], [84, 1, 1, "", "OneDimensionalPositionVelocityRange"], [85, 1, 1, "", "PointRelativePosition"], [86, 1, 1, "", "PointRelativePositionSLAM"], [87, 1, 1, "", "RangePointToAnchor"], [88, 1, 1, "", "RangePoseToAnchor"], [89, 1, 1, "", "RangePoseToPose"], [90, 1, 1, "", "RangeRelativePose"], [91, 1, 1, "", "RelativeBodyFrameVelocity"], [92, 1, 1, "", "SingleIntegrator"]], "navlie.lib.models.AbsolutePosition": [[71, 2, 1, "", "covariance"], [71, 2, 1, "", "evaluate"], [71, 2, 1, "", "evaluate_with_jacobian"], [71, 2, 1, "", "jacobian"], [71, 2, 1, "", "jacobian_fd"], [71, 2, 1, "", "sqrt_information"]], "navlie.lib.models.AbsoluteVelocity": [[72, 2, 1, "", "covariance"], [72, 2, 1, "", "evaluate"], [72, 2, 1, "", "evaluate_with_jacobian"], [72, 2, 1, "", "jacobian"], [72, 2, 1, "", "jacobian_fd"], [72, 2, 1, "", "sqrt_information"]], "navlie.lib.models.Altitude": [[73, 2, 1, "", "covariance"], [73, 2, 1, "", "evaluate"], [73, 2, 1, "", "evaluate_with_jacobian"], [73, 2, 1, "", "jacobian"], [73, 2, 1, "", "jacobian_fd"], [73, 2, 1, "", "sqrt_information"]], "navlie.lib.models.BodyFrameVelocity": [[74, 2, 1, "", "covariance"], [74, 2, 1, "", "evaluate"], [74, 2, 1, "", "evaluate_with_jacobian"], [74, 2, 1, "", "input_covariance"], [74, 2, 1, "", "input_jacobian_fd"], [74, 2, 1, "", "jacobian"], [74, 2, 1, "", "jacobian_fd"], [74, 2, 1, "", "sqrt_information"]], "navlie.lib.models.CameraProjection": [[75, 2, 1, "", "covariance"], [75, 2, 1, "", "evaluate"], [75, 2, 1, "", "evaluate_with_jacobian"], [75, 2, 1, "", "jacobian"], [75, 2, 1, "", "jacobian_fd"], [75, 2, 1, "", "sqrt_information"]], "navlie.lib.models.DoubleIntegrator": [[76, 2, 1, "", "covariance"], [76, 2, 1, "", "evaluate"], [76, 2, 1, "", "evaluate_with_jacobian"], [76, 2, 1, "", "input_covariance"], [76, 2, 1, "", "input_jacobian"], [76, 2, 1, "", "input_jacobian_fd"], [76, 2, 1, "", "jacobian"], [76, 2, 1, "", "jacobian_fd"], [76, 2, 1, "", "sqrt_information"]], "navlie.lib.models.DoubleIntegratorWithBias": [[77, 2, 1, "", "covariance"], [77, 2, 1, "", "evaluate"], [77, 2, 1, "", "evaluate_with_jacobian"], [77, 2, 1, "", "input_covariance"], [77, 2, 1, "", "input_jacobian"], [77, 2, 1, "", "input_jacobian_fd"], [77, 2, 1, "", "jacobian"], [77, 2, 1, "", "jacobian_fd"], [77, 2, 1, "", "sqrt_information"]], "navlie.lib.models.GlobalPosition": [[78, 2, 1, "", "covariance"], [78, 2, 1, "", "evaluate"], [78, 2, 1, "", "evaluate_with_jacobian"], [78, 2, 1, "", "jacobian"], [78, 2, 1, "", "jacobian_fd"], [78, 2, 1, "", "sqrt_information"]], "navlie.lib.models.Gravitometer": [[79, 2, 1, "", "covariance"], [79, 2, 1, "", "evaluate"], [79, 2, 1, "", "evaluate_with_jacobian"], [79, 2, 1, "", "jacobian"], [79, 2, 1, "", "jacobian_fd"], [79, 2, 1, "", "sqrt_information"]], "navlie.lib.models.InvariantMeasurement": [[80, 2, 1, "", "minus"], [80, 3, 1, "", "model"], [80, 3, 1, "", "stamp"], [80, 3, 1, "", "state_id"], [80, 3, 1, "", "value"]], "navlie.lib.models.InvariantPointRelativePosition": [[81, 2, 1, "", "covariance"], [81, 2, 1, "", "evaluate"], [81, 2, 1, "", "evaluate_with_jacobian"], [81, 2, 1, "", "jacobian"], [81, 2, 1, "", "jacobian_fd"], [81, 2, 1, "", "sqrt_information"]], "navlie.lib.models.LinearMeasurement": [[82, 2, 1, "", "covariance"], [82, 2, 1, "", "evaluate"], [82, 2, 1, "", "evaluate_with_jacobian"], [82, 2, 1, "", "jacobian"], [82, 2, 1, "", "jacobian_fd"], [82, 2, 1, "", "sqrt_information"]], "navlie.lib.models.Magnetometer": [[83, 2, 1, "", "covariance"], [83, 2, 1, "", "evaluate"], [83, 2, 1, "", "evaluate_with_jacobian"], [83, 2, 1, "", "jacobian"], [83, 2, 1, "", "jacobian_fd"], [83, 2, 1, "", "sqrt_information"]], "navlie.lib.models.OneDimensionalPositionVelocityRange": [[84, 2, 1, "", "covariance"], [84, 2, 1, "", "evaluate"], [84, 2, 1, "", "evaluate_with_jacobian"], [84, 2, 1, "", "jacobian"], [84, 2, 1, "", "jacobian_fd"], [84, 2, 1, "", "sqrt_information"]], "navlie.lib.models.PointRelativePosition": [[85, 2, 1, "", "covariance"], [85, 2, 1, "", "evaluate"], [85, 2, 1, "", "evaluate_with_jacobian"], [85, 2, 1, "", "jacobian"], [85, 2, 1, "", "jacobian_fd"], [85, 2, 1, "", "sqrt_information"]], "navlie.lib.models.PointRelativePositionSLAM": [[86, 2, 1, "", "covariance"], [86, 2, 1, "", "evaluate"], [86, 2, 1, "", "evaluate_with_jacobian"], [86, 2, 1, "", "jacobian"], [86, 2, 1, "", "jacobian_fd"], [86, 2, 1, "", "sqrt_information"]], "navlie.lib.models.RangePointToAnchor": [[87, 2, 1, "", "covariance"], [87, 2, 1, "", "evaluate"], [87, 2, 1, "", "evaluate_with_jacobian"], [87, 2, 1, "", "jacobian"], [87, 2, 1, "", "jacobian_fd"], [87, 2, 1, "", "sqrt_information"]], "navlie.lib.models.RangePoseToAnchor": [[88, 2, 1, "", "covariance"], [88, 2, 1, "", "evaluate"], [88, 2, 1, "", "evaluate_with_jacobian"], [88, 2, 1, "", "jacobian"], [88, 2, 1, "", "jacobian_fd"], [88, 2, 1, "", "sqrt_information"]], "navlie.lib.models.RangePoseToPose": [[89, 2, 1, "", "covariance"], [89, 2, 1, "", "evaluate"], [89, 2, 1, "", "evaluate_with_jacobian"], [89, 2, 1, "", "jacobian"], [89, 2, 1, "", "jacobian_fd"], [89, 2, 1, "", "sqrt_information"]], "navlie.lib.models.RangeRelativePose": [[90, 2, 1, "", "covariance"], [90, 2, 1, "", "evaluate"], [90, 2, 1, "", "evaluate_with_jacobian"], [90, 2, 1, "", "jacobian"], [90, 2, 1, "", "jacobian_fd"], [90, 2, 1, "", "sqrt_information"]], "navlie.lib.models.RelativeBodyFrameVelocity": [[91, 2, 1, "", "covariance"], [91, 2, 1, "", "evaluate"], [91, 2, 1, "", "evaluate_with_jacobian"], [91, 2, 1, "", "input_covariance"], [91, 2, 1, "", "input_jacobian_fd"], [91, 2, 1, "", "jacobian"], [91, 2, 1, "", "jacobian_fd"], [91, 2, 1, "", "sqrt_information"]], "navlie.lib.models.SingleIntegrator": [[92, 2, 1, "", "covariance"], [92, 2, 1, "", "evaluate"], [92, 2, 1, "", "evaluate_with_jacobian"], [92, 2, 1, "", "input_covariance"], [92, 2, 1, "", "input_jacobian_fd"], [92, 2, 1, "", "jacobian"], [92, 2, 1, "", "jacobian_fd"], [92, 2, 1, "", "sqrt_information"]], "navlie.lib.preintegration": [[94, 1, 1, "", "AngularVelocityIncrement"], [95, 1, 1, "", "BodyVelocityIncrement"], [96, 1, 1, "", "IMUIncrement"], [97, 1, 1, "", "LinearIncrement"], [98, 1, 1, "", "PreintegratedAngularVelocity"], [99, 1, 1, "", "PreintegratedBodyVelocity"], [100, 1, 1, "", "PreintegratedIMUKinematics"], [101, 1, 1, "", "PreintegratedLinearModel"], [102, 1, 1, "", "PreintegratedWheelOdometry"], [103, 1, 1, "", "RelativeMotionIncrement"], [104, 1, 1, "", "WheelOdometryIncrement"]], "navlie.lib.preintegration.AngularVelocityIncrement": [[94, 2, 1, "", "copy"], [94, 3, 1, "", "covariance"], [94, 3, 1, "", "dof"], [94, 2, 1, "", "increment"], [94, 2, 1, "", "new"], [94, 2, 1, "", "plus"], [94, 5, 1, "", "stamp"], [94, 3, 1, "", "stamps"], [94, 3, 1, "", "state_id"], [94, 2, 1, "", "symmetrize"], [94, 2, 1, "", "update_bias"], [94, 5, 1, "", "value"]], "navlie.lib.preintegration.BodyVelocityIncrement": [[95, 2, 1, "", "copy"], [95, 3, 1, "", "covariance"], [95, 3, 1, "", "dof"], [95, 2, 1, "", "increment"], [95, 2, 1, "", "new"], [95, 2, 1, "", "plus"], [95, 5, 1, "", "stamp"], [95, 3, 1, "", "stamps"], [95, 3, 1, "", "state_id"], [95, 2, 1, "", "symmetrize"], [95, 2, 1, "", "update_bias"], [95, 5, 1, "", "value"]], "navlie.lib.preintegration.IMUIncrement": [[96, 5, 1, "", "accel_bias"], [96, 3, 1, "", "bias_jacobian"], [96, 2, 1, "", "copy"], [96, 3, 1, "", "covariance"], [96, 3, 1, "", "dof"], [96, 3, 1, "", "gravity"], [96, 5, 1, "", "gyro_bias"], [96, 2, 1, "", "increment"], [96, 3, 1, "", "input_covariance"], [96, 2, 1, "", "new"], [96, 3, 1, "", "new_bias"], [96, 3, 1, "", "original_bias"], [96, 3, 1, "", "original_value"], [96, 2, 1, "", "plus"], [96, 5, 1, "", "stamp"], [96, 3, 1, "", "stamps"], [96, 3, 1, "", "state_id"], [96, 2, 1, "", "symmetrize"], [96, 2, 1, "", "update_bias"], [96, 5, 1, "", "value"]], "navlie.lib.preintegration.LinearIncrement": [[97, 3, 1, "", "bias_jacobian"], [97, 2, 1, "", "copy"], [97, 3, 1, "", "covariance"], [97, 3, 1, "", "dof"], [97, 2, 1, "", "increment"], [97, 2, 1, "", "new"], [97, 3, 1, "", "new_bias"], [97, 3, 1, "", "original_bias"], [97, 3, 1, "", "original_value"], [97, 2, 1, "", "plus"], [97, 5, 1, "", "stamp"], [97, 3, 1, "", "stamps"], [97, 3, 1, "", "state_id"], [97, 2, 1, "", "symmetrize"], [97, 2, 1, "", "update_bias"], [97, 5, 1, "", "value"]], "navlie.lib.preintegration.PreintegratedAngularVelocity": [[98, 2, 1, "", "covariance"], [98, 2, 1, "", "evaluate"], [98, 2, 1, "", "evaluate_with_jacobian"], [98, 2, 1, "", "input_covariance"], [98, 2, 1, "", "input_jacobian_fd"], [98, 2, 1, "", "jacobian"], [98, 2, 1, "", "jacobian_fd"], [98, 2, 1, "", "sqrt_information"]], "navlie.lib.preintegration.PreintegratedBodyVelocity": [[99, 2, 1, "", "covariance"], [99, 2, 1, "", "evaluate"], [99, 2, 1, "", "evaluate_with_jacobian"], [99, 2, 1, "", "input_covariance"], [99, 2, 1, "", "input_jacobian_fd"], [99, 2, 1, "", "jacobian"], [99, 2, 1, "", "jacobian_fd"], [99, 2, 1, "", "sqrt_information"]], "navlie.lib.preintegration.PreintegratedIMUKinematics": [[100, 2, 1, "", "covariance"], [100, 2, 1, "", "evaluate"], [100, 2, 1, "", "evaluate_with_jacobian"], [100, 2, 1, "", "input_covariance"], [100, 2, 1, "", "input_jacobian_fd"], [100, 2, 1, "", "jacobian"], [100, 2, 1, "", "jacobian_fd"], [100, 2, 1, "", "sqrt_information"]], "navlie.lib.preintegration.PreintegratedLinearModel": [[101, 2, 1, "", "covariance"], [101, 2, 1, "", "evaluate"], [101, 2, 1, "", "evaluate_with_jacobian"], [101, 2, 1, "", "input_covariance"], [101, 2, 1, "", "input_jacobian_fd"], [101, 2, 1, "", "jacobian"], [101, 2, 1, "", "jacobian_fd"], [101, 2, 1, "", "sqrt_information"]], "navlie.lib.preintegration.PreintegratedWheelOdometry": [[102, 2, 1, "", "covariance"], [102, 2, 1, "", "evaluate"], [102, 2, 1, "", "evaluate_with_jacobian"], [102, 2, 1, "", "input_covariance"], [102, 2, 1, "", "input_jacobian_fd"], [102, 2, 1, "", "jacobian"], [102, 2, 1, "", "jacobian_fd"], [102, 2, 1, "", "sqrt_information"]], "navlie.lib.preintegration.RelativeMotionIncrement": [[103, 2, 1, "", "copy"], [103, 3, 1, "", "covariance"], [103, 3, 1, "", "dof"], [103, 2, 1, "", "increment"], [103, 2, 1, "", "new"], [103, 2, 1, "", "plus"], [103, 5, 1, "", "stamp"], [103, 3, 1, "", "stamps"], [103, 3, 1, "", "state_id"], [103, 2, 1, "", "symmetrize"], [103, 2, 1, "", "update_bias"]], "navlie.lib.preintegration.WheelOdometryIncrement": [[104, 2, 1, "", "copy"], [104, 3, 1, "", "covariance"], [104, 3, 1, "", "dof"], [104, 2, 1, "", "increment"], [104, 2, 1, "", "new"], [104, 3, 1, "", "original_value"], [104, 2, 1, "", "plus"], [104, 5, 1, "", "stamp"], [104, 3, 1, "", "stamps"], [104, 3, 1, "", "state_id"], [104, 2, 1, "", "symmetrize"], [104, 2, 1, "", "update_bias"], [104, 5, 1, "", "value"]], "navlie.lib.states": [[106, 1, 1, "", "MatrixLieGroupState"], [107, 1, 1, "", "MixtureState"], [108, 1, 1, "", "SE23State"], [109, 1, 1, "", "SE2State"], [110, 1, 1, "", "SE3State"], [111, 1, 1, "", "SL3State"], [112, 1, 1, "", "SO2State"], [113, 1, 1, "", "SO3State"], [114, 1, 1, "", "StampedValue"], [115, 1, 1, "", "VectorInput"], [116, 1, 1, "", "VectorState"]], "navlie.lib.states.MatrixLieGroupState": [[106, 5, 1, "", "attitude"], [106, 2, 1, "", "copy"], [106, 3, 1, "", "direction"], [106, 3, 1, "", "dof"], [106, 2, 1, "", "dot"], [106, 3, 1, "", "group"], [106, 2, 1, "", "jacobian_from_blocks"], [106, 2, 1, "", "minus"], [106, 2, 1, "", "minus_jacobian"], [106, 2, 1, "", "minus_jacobian_fd"], [106, 2, 1, "", "plus"], [106, 2, 1, "", "plus_jacobian"], [106, 2, 1, "", "plus_jacobian_fd"], [106, 5, 1, "", "position"], [106, 3, 1, "", "stamp"], [106, 3, 1, "", "state_id"], [106, 3, 1, "", "value"], [106, 5, 1, "", "velocity"]], "navlie.lib.states.MixtureState": [[107, 2, 1, "", "copy"], [107, 3, 1, "", "model_probabilities"], [107, 3, 1, "", "model_states"], [107, 5, 1, "", "stamp"]], "navlie.lib.states.SE23State": [[108, 5, 1, "", "attitude"], [108, 2, 1, "", "copy"], [108, 3, 1, "", "direction"], [108, 3, 1, "", "dof"], [108, 2, 1, "", "dot"], [108, 3, 1, "", "group"], [108, 2, 1, "", "jacobian_from_blocks"], [108, 2, 1, "", "minus"], [108, 2, 1, "", "minus_jacobian"], [108, 2, 1, "", "minus_jacobian_fd"], [108, 2, 1, "", "plus"], [108, 2, 1, "", "plus_jacobian"], [108, 2, 1, "", "plus_jacobian_fd"], [108, 5, 1, "", "pose"], [108, 5, 1, "", "position"], [108, 2, 1, "", "random"], [108, 3, 1, "", "stamp"], [108, 3, 1, "", "state_id"], [108, 3, 1, "", "value"], [108, 5, 1, "", "velocity"]], "navlie.lib.states.SE2State": [[109, 5, 1, "", "attitude"], [109, 2, 1, "", "copy"], [109, 3, 1, "", "direction"], [109, 3, 1, "", "dof"], [109, 2, 1, "", "dot"], [109, 3, 1, "", "group"], [109, 2, 1, "", "jacobian_from_blocks"], [109, 2, 1, "", "minus"], [109, 2, 1, "", "minus_jacobian"], [109, 2, 1, "", "minus_jacobian_fd"], [109, 2, 1, "", "plus"], [109, 2, 1, "", "plus_jacobian"], [109, 2, 1, "", "plus_jacobian_fd"], [109, 5, 1, "", "pose"], [109, 5, 1, "", "position"], [109, 2, 1, "", "random"], [109, 3, 1, "", "stamp"], [109, 3, 1, "", "state_id"], [109, 3, 1, "", "value"], [109, 5, 1, "", "velocity"]], "navlie.lib.states.SE3State": [[110, 5, 1, "", "attitude"], [110, 2, 1, "", "copy"], [110, 3, 1, "", "direction"], [110, 3, 1, "", "dof"], [110, 2, 1, "", "dot"], [110, 2, 1, "", "from_ros"], [110, 3, 1, "", "group"], [110, 2, 1, "", "jacobian_from_blocks"], [110, 2, 1, "", "minus"], [110, 2, 1, "", "minus_jacobian"], [110, 2, 1, "", "minus_jacobian_fd"], [110, 2, 1, "", "plus"], [110, 2, 1, "", "plus_jacobian"], [110, 2, 1, "", "plus_jacobian_fd"], [110, 5, 1, "", "position"], [110, 2, 1, "", "random"], [110, 3, 1, "", "stamp"], [110, 3, 1, "", "state_id"], [110, 2, 1, "", "to_ros"], [110, 3, 1, "", "value"], [110, 5, 1, "", "velocity"]], "navlie.lib.states.SL3State": [[111, 5, 1, "", "attitude"], [111, 2, 1, "", "copy"], [111, 3, 1, "", "direction"], [111, 3, 1, "", "dof"], [111, 2, 1, "", "dot"], [111, 3, 1, "", "group"], [111, 2, 1, "", "jacobian_from_blocks"], [111, 2, 1, "", "minus"], [111, 2, 1, "", "minus_jacobian"], [111, 2, 1, "", "minus_jacobian_fd"], [111, 2, 1, "", "plus"], [111, 2, 1, "", "plus_jacobian"], [111, 2, 1, "", "plus_jacobian_fd"], [111, 5, 1, "", "position"], [111, 3, 1, "", "stamp"], [111, 3, 1, "", "state_id"], [111, 3, 1, "", "value"], [111, 5, 1, "", "velocity"]], "navlie.lib.states.SO2State": [[112, 5, 1, "", "attitude"], [112, 2, 1, "", "copy"], [112, 3, 1, "", "direction"], [112, 3, 1, "", "dof"], [112, 2, 1, "", "dot"], [112, 3, 1, "", "group"], [112, 2, 1, "", "jacobian_from_blocks"], [112, 2, 1, "", "minus"], [112, 2, 1, "", "minus_jacobian"], [112, 2, 1, "", "minus_jacobian_fd"], [112, 2, 1, "", "plus"], [112, 2, 1, "", "plus_jacobian"], [112, 2, 1, "", "plus_jacobian_fd"], [112, 5, 1, "", "position"], [112, 2, 1, "", "random"], [112, 3, 1, "", "stamp"], [112, 3, 1, "", "state_id"], [112, 3, 1, "", "value"], [112, 5, 1, "", "velocity"]], "navlie.lib.states.SO3State": [[113, 5, 1, "", "attitude"], [113, 2, 1, "", "copy"], [113, 3, 1, "", "direction"], [113, 3, 1, "", "dof"], [113, 2, 1, "", "dot"], [113, 2, 1, "", "from_ros"], [113, 3, 1, "", "group"], [113, 2, 1, "", "jacobian_from_blocks"], [113, 2, 1, "", "minus"], [113, 2, 1, "", "minus_jacobian"], [113, 2, 1, "", "minus_jacobian_fd"], [113, 2, 1, "", "plus"], [113, 2, 1, "", "plus_jacobian"], [113, 2, 1, "", "plus_jacobian_fd"], [113, 5, 1, "", "position"], [113, 2, 1, "", "random"], [113, 3, 1, "", "stamp"], [113, 3, 1, "", "state_id"], [113, 2, 1, "", "to_ros"], [113, 3, 1, "", "value"], [113, 5, 1, "", "velocity"]], "navlie.lib.states.StampedValue": [[114, 2, 1, "", "copy"], [114, 3, 1, "", "covariance"], [114, 3, 1, "", "dof"], [114, 2, 1, "", "plus"], [114, 3, 1, "", "stamp"], [114, 3, 1, "", "state_id"], [114, 3, 1, "", "value"]], "navlie.lib.states.VectorInput": [[115, 2, 1, "", "copy"], [115, 3, 1, "", "covariance"], [115, 3, 1, "", "dof"], [115, 2, 1, "", "plus"], [115, 3, 1, "", "stamp"], [115, 3, 1, "", "state_id"], [115, 3, 1, "", "value"]], "navlie.lib.states.VectorState": [[116, 2, 1, "", "copy"], [116, 3, 1, "", "dof"], [116, 2, 1, "", "minus"], [116, 2, 1, "", "minus_jacobian"], [116, 2, 1, "", "minus_jacobian_fd"], [116, 2, 1, "", "plus"], [116, 2, 1, "", "plus_jacobian"], [116, 2, 1, "", "plus_jacobian_fd"], [116, 3, 1, "", "stamp"], [116, 3, 1, "", "state_id"], [116, 3, 1, "", "value"]], "navlie.types": [[118, 1, 1, "", "Dataset"], [119, 1, 1, "", "Input"], [120, 1, 1, "", "Measurement"], [121, 1, 1, "", "MeasurementModel"], [122, 1, 1, "", "ProcessModel"], [123, 1, 1, "", "State"], [124, 1, 1, "", "StateWithCovariance"]], "navlie.types.Dataset": [[118, 2, 1, "", "get_ground_truth"], [118, 2, 1, "", "get_input_data"], [118, 2, 1, "", "get_measurement_data"]], "navlie.types.Input": [[119, 2, 1, "", "copy"], [119, 3, 1, "", "covariance"], [119, 3, 1, "", "dof"], [119, 2, 1, "", "plus"], [119, 3, 1, "", "stamp"], [119, 3, 1, "", "state_id"]], "navlie.types.Measurement": [[120, 2, 1, "", "minus"], [120, 3, 1, "", "model"], [120, 3, 1, "", "stamp"], [120, 3, 1, "", "state_id"], [120, 3, 1, "", "value"]], "navlie.types.MeasurementModel": [[121, 2, 1, "", "covariance"], [121, 2, 1, "", "evaluate"], [121, 2, 1, "", "evaluate_with_jacobian"], [121, 2, 1, "", "jacobian"], [121, 2, 1, "", "jacobian_fd"], [121, 2, 1, "", "sqrt_information"]], "navlie.types.ProcessModel": [[122, 2, 1, "", "covariance"], [122, 2, 1, "", "evaluate"], [122, 2, 1, "", "evaluate_with_jacobian"], [122, 2, 1, "", "input_covariance"], [122, 2, 1, "", "input_jacobian_fd"], [122, 2, 1, "", "jacobian"], [122, 2, 1, "", "jacobian_fd"], [122, 2, 1, "", "sqrt_information"]], "navlie.types.State": [[123, 2, 1, "", "copy"], [123, 3, 1, "", "dof"], [123, 2, 1, "", "minus"], [123, 2, 1, "", "minus_jacobian"], [123, 2, 1, "", "minus_jacobian_fd"], [123, 2, 1, "", "plus"], [123, 2, 1, "", "plus_jacobian"], [123, 2, 1, "", "plus_jacobian_fd"], [123, 3, 1, "", "stamp"], [123, 3, 1, "", "state_id"], [123, 3, 1, "", "value"]], "navlie.types.StateWithCovariance": [[124, 2, 1, "", "copy"], [124, 3, 1, "", "covariance"], [124, 5, 1, "", "stamp"], [124, 3, 1, "", "state"], [124, 2, 1, "", "symmetrize"]], "navlie.utils": [[126, 0, 0, "-", "common"], [140, 0, 0, "-", "mixture"], [145, 0, 0, "-", "plot"]], "navlie.utils.common": [[127, 1, 1, "", "GaussianResult"], [128, 1, 1, "", "GaussianResultList"], [129, 1, 1, "", "MixtureResult"], [130, 1, 1, "", "MixtureResultList"], [131, 1, 1, "", "MonteCarloResult"], [132, 4, 1, "", "associate_stamps"], [133, 4, 1, "", "find_nearest_stamp_idx"], [134, 4, 1, "", "jacobian"], [135, 4, 1, "", "monte_carlo"], [136, 4, 1, "", "randvec"], [137, 4, 1, "", "schedule_sequential_measurements"], [138, 4, 1, "", "state_interp"], [139, 4, 1, "", "van_loans"]], "navlie.utils.common.GaussianResult": [[127, 3, 1, "", "covariance"], [127, 3, 1, "", "ees"], [127, 3, 1, "", "error"], [127, 3, 1, "", "md"], [127, 3, 1, "", "nees"], [127, 3, 1, "", "rmse"], [127, 3, 1, "", "stamp"], [127, 3, 1, "", "state"], [127, 3, 1, "", "state_true"], [127, 3, 1, "", "three_sigma"]], "navlie.utils.common.GaussianResultList": [[128, 3, 1, "", "covariance"], [128, 3, 1, "", "dof"], [128, 3, 1, "", "ees"], [128, 3, 1, "", "error"], [128, 2, 1, "", "from_estimates"], [128, 3, 1, "", "md"], [128, 3, 1, "", "nees"], [128, 2, 1, "", "nees_lower_bound"], [128, 2, 1, "", "nees_upper_bound"], [128, 3, 1, "", "rmse"], [128, 3, 1, "", "stamp"], [128, 3, 1, "", "state"], [128, 3, 1, "", "state_true"], [128, 3, 1, "", "three_sigma"], [128, 3, 1, "", "value"], [128, 3, 1, "", "value_true"]], "navlie.utils.common.MixtureResult": [[129, 3, 1, "", "covariance"], [129, 3, 1, "", "ees"], [129, 3, 1, "", "error"], [129, 3, 1, "", "md"], [129, 3, 1, "", "model_probabilities"], [129, 3, 1, "", "nees"], [129, 3, 1, "", "rmse"], [129, 3, 1, "", "stamp"], [129, 3, 1, "", "state"], [129, 3, 1, "", "state_true"], [129, 3, 1, "", "three_sigma"]], "navlie.utils.common.MixtureResultList": [[130, 3, 1, "", "covariance"], [130, 3, 1, "", "dof"], [130, 3, 1, "", "ees"], [130, 3, 1, "", "error"], [130, 2, 1, "", "from_estimates"], [130, 3, 1, "", "md"], [130, 3, 1, "", "model_probabilities"], [130, 3, 1, "", "nees"], [130, 2, 1, "", "nees_lower_bound"], [130, 2, 1, "", "nees_upper_bound"], [130, 3, 1, "", "rmse"], [130, 3, 1, "", "stamp"], [130, 3, 1, "", "state"], [130, 3, 1, "", "state_true"], [130, 3, 1, "", "three_sigma"], [130, 3, 1, "", "value"], [130, 3, 1, "", "value_true"]], "navlie.utils.common.MonteCarloResult": [[131, 3, 1, "", "average_ees"], [131, 3, 1, "", "average_nees"], [131, 3, 1, "", "dof"], [131, 3, 1, "", "expected_nees"], [131, 2, 1, "", "nees_lower_bound"], [131, 2, 1, "", "nees_upper_bound"], [131, 3, 1, "", "num_trials"], [131, 3, 1, "", "rmse"], [131, 3, 1, "", "stamp"], [131, 3, 1, "", "total_rmse"], [131, 3, 1, "", "trial_results"]], "navlie.utils.mixture": [[141, 4, 1, "", "gaussian_mixing"], [142, 4, 1, "", "gaussian_mixing_vectorspace"], [143, 4, 1, "", "reparametrize_gaussians_about_X_par"], [144, 4, 1, "", "update_X"]], "navlie.utils.plot": [[146, 1, 1, "", "CameraPoseVisualizer"], [147, 4, 1, "", "plot_camera_poses"], [148, 4, 1, "", "plot_error"], [149, 4, 1, "", "plot_meas"], [150, 4, 1, "", "plot_meas_by_model"], [151, 4, 1, "", "plot_nees"], [152, 4, 1, "", "plot_poses"], [153, 4, 1, "", "set_axes_equal"]], "navlie.utils.plot.CameraPoseVisualizer": [[146, 2, 1, "", "plot_pose"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "property", "Python property"]}, "titleterms": {"navli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 157, 159], "batch": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 157], "estim": [1, 2, 157], "batchestim": 2, "gaussian_mixtur": [3, 4, 5, 6, 7, 8], "gaussianmixtureresidu": 4, "hessiansummixtureresidu": 5, "maxmixtureresidu": 6, "maxsummixtureresidu": 7, "summixtureresidu": 8, "loss": [9, 10, 11, 12], "cauchyloss": 10, "l2loss": 11, "lossfunct": 12, "problem": [13, 14, 15, 157, 160, 161], "optimizationsummari": 14, "residu": [16, 17, 18, 19, 20], "measurementresidu": 17, "priorresidu": 18, "processresidu": 19, "composit": [21, 22, 23, 24, 25, 26, 158], "compositeinput": 22, "compositemeasur": 23, "compositemeasurementmodel": 24, "compositeprocessmodel": 25, "compositest": [26, 158], "datagen": [27, 28, 29], "datagener": 28, "generate_measur": 29, "filter": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 160, 161], "cubaturekalmanfilt": 31, "extendedkalmanfilt": 32, "gausshermitekalmanfilt": 33, "gaussiansumfilt": 34, "interactingmodelfilt": 35, "iteratedkalmanfilt": 36, "sigmapointkalmanfilt": 37, "unscentedkalmanfilt": 38, "check_outli": 39, "generate_sigmapoint": 40, "mean_stat": 41, "run_filt": 42, "run_gsf_filt": 43, "run_imm_filt": 44, "lib": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116], "camera": [46, 47, 48], "pinholecamera": 47, "posematrix": 48, "dataset": [49, 50, 51, 52, 53, 118], "simulatedinertialgpsdataset": 50, "simulatedinertiallandmarkdataset": 51, "simulatedposerangingdataset": 52, "generate_landmark_posit": 53, "imu": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], "g_matrix": 55, "g_matrix_inv": 56, "imukinemat": 58, "imust": 59, "l_matrix": 60, "m_matrix": 61, "n_matrix": 62, "u_matrix": 63, "u_matrix_inv": 64, "u_tilde_matrix": 65, "adjoint_ie3": 66, "delta_matrix": 67, "get_unbiased_imu": 68, "inverse_ie3": 69, "model": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 157, 160, 161], "absoluteposit": 71, "absoluteveloc": 72, "altitud": 73, "bodyframeveloc": 74, "cameraproject": 75, "doubleintegr": 76, "doubleintegratorwithbia": 77, "globalposit": 78, "gravitomet": 79, "invariantmeasur": 80, "invariantpointrelativeposit": 81, "linearmeasur": 82, "magnetomet": 83, "onedimensionalpositionvelocityrang": 84, "pointrelativeposit": 85, "pointrelativepositionslam": 86, "rangepointtoanchor": 87, "rangeposetoanchor": 88, "rangeposetopos": 89, "rangerelativepos": 90, "relativebodyframeveloc": 91, "singleintegr": 92, "preintegr": [93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "angularvelocityincr": 94, "bodyvelocityincr": 95, "imuincr": 96, "linearincr": 97, "preintegratedangularveloc": 98, "preintegratedbodyveloc": 99, "preintegratedimukinemat": 100, "preintegratedlinearmodel": 101, "preintegratedwheelodometri": 102, "relativemotionincr": 103, "wheelodometryincr": 104, "state": [105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 123, 158, 160, 161], "matrixliegroupst": 106, "mixturest": 107, "se23stat": 108, "se2stat": 109, "se3stat": 110, "sl3state": 111, "so2stat": 112, "so3stat": 113, "stampedvalu": 114, "vectorinput": 115, "vectorst": 116, "type": [117, 118, 119, 120, 121, 122, 123, 124], "input": 119, "measur": [120, 157, 160, 161], "measurementmodel": 121, "processmodel": 122, "statewithcovari": 124, "util": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], "common": [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139], "gaussianresult": 127, "gaussianresultlist": 128, "mixtureresult": 129, "mixtureresultlist": 130, "montecarloresult": 131, "associate_stamp": 132, "find_nearest_stamp_idx": 133, "jacobian": [134, 159], "monte_carlo": 135, "randvec": 136, "schedule_sequential_measur": 137, "state_interp": 138, "van_loan": 139, "mixtur": [140, 141, 142, 143, 144], "gaussian_mix": 141, "gaussian_mixing_vectorspac": 142, "reparametrize_gaussians_about_x_par": 143, "update_x": 144, "plot": [145, 146, 147, 148, 149, 150, 151, 152, 153], "cameraposevisu": 146, "plot_camera_pos": 147, "plot_error": 148, "plot_mea": 149, "plot_meas_by_model": 150, "plot_ne": 151, "plot_pos": 152, "set_axes_equ": 153, "api": 154, "document": 154, "welcom": 155, "instal": 155, "exampl": [155, 157], "get": 156, "start": 156, "toi": [157, 160, 161], "slam": 157, "evalu": 157, "The": 157, "creat": 157, "simul": [157, 161], "data": [157, 161], "from": [157, 158], "weight": 157, "nonlinear": 157, "least": 157, "squar": 157, "unweight": 157, "defin": [157, 160, 161], "gener": [157, 161], "initi": 157, "run": [157, 160, 161], "extract": 157, "covari": 157, "inherit": 158, "tradit": [159, 161], "approach": [159, 160, 161], "lie": [159, 160], "group": [159, 160], "process": [160, 161], "built": 160, "": 161, "onli": 161, "fake": 161}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "nbsphinx": 4, "sphinx": 58}, "alltitles": {"navlie.batch": [[0, "module-navlie.batch"]], "navlie.batch.estimator": [[1, "module-navlie.batch.estimator"]], "navlie.batch.estimator.BatchEstimator": [[2, "navlie-batch-estimator-batchestimator"]], "navlie.batch.gaussian_mixtures": [[3, "module-navlie.batch.gaussian_mixtures"]], "navlie.batch.gaussian_mixtures.GaussianMixtureResidual": [[4, "navlie-batch-gaussian-mixtures-gaussianmixtureresidual"]], "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual": [[5, "navlie-batch-gaussian-mixtures-hessiansummixtureresidual"]], "navlie.batch.gaussian_mixtures.MaxMixtureResidual": [[6, "navlie-batch-gaussian-mixtures-maxmixtureresidual"]], "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual": [[7, "navlie-batch-gaussian-mixtures-maxsummixtureresidual"]], "navlie.batch.gaussian_mixtures.SumMixtureResidual": [[8, "navlie-batch-gaussian-mixtures-summixtureresidual"]], "navlie.batch.losses": [[9, "module-navlie.batch.losses"]], "navlie.batch.losses.CauchyLoss": [[10, "navlie-batch-losses-cauchyloss"]], "navlie.batch.losses.L2Loss": [[11, "navlie-batch-losses-l2loss"]], "navlie.batch.losses.LossFunction": [[12, "navlie-batch-losses-lossfunction"]], "navlie.batch.problem": [[13, "module-navlie.batch.problem"]], "navlie.batch.problem.OptimizationSummary": [[14, "navlie-batch-problem-optimizationsummary"]], "navlie.batch.problem.Problem": [[15, "navlie-batch-problem-problem"]], "navlie.batch.residuals": [[16, "module-navlie.batch.residuals"]], "navlie.batch.residuals.MeasurementResidual": [[17, "navlie-batch-residuals-measurementresidual"]], "navlie.batch.residuals.PriorResidual": [[18, "navlie-batch-residuals-priorresidual"]], "navlie.batch.residuals.ProcessResidual": [[19, "navlie-batch-residuals-processresidual"]], "navlie.batch.residuals.Residual": [[20, "navlie-batch-residuals-residual"]], "navlie.composite": [[21, "module-navlie.composite"]], "navlie.composite.CompositeInput": [[22, "navlie-composite-compositeinput"]], "navlie.composite.CompositeMeasurement": [[23, "navlie-composite-compositemeasurement"]], "navlie.composite.CompositeMeasurementModel": [[24, "navlie-composite-compositemeasurementmodel"]], "navlie.composite.CompositeProcessModel": [[25, "navlie-composite-compositeprocessmodel"]], "navlie.composite.CompositeState": [[26, "navlie-composite-compositestate"]], "navlie.datagen": [[27, "module-navlie.datagen"]], "navlie.datagen.DataGenerator": [[28, "navlie-datagen-datagenerator"]], "navlie.datagen.generate_measurement": [[29, "navlie-datagen-generate-measurement"]], "navlie.filters": [[30, "module-navlie.filters"]], "navlie.filters.CubatureKalmanFilter": [[31, "navlie-filters-cubaturekalmanfilter"]], "navlie.filters.ExtendedKalmanFilter": [[32, "navlie-filters-extendedkalmanfilter"]], "navlie.filters.GaussHermiteKalmanFilter": [[33, "navlie-filters-gausshermitekalmanfilter"]], "navlie.filters.GaussianSumFilter": [[34, "navlie-filters-gaussiansumfilter"]], "navlie.filters.InteractingModelFilter": [[35, "navlie-filters-interactingmodelfilter"]], "navlie.filters.IteratedKalmanFilter": [[36, "navlie-filters-iteratedkalmanfilter"]], "navlie.filters.SigmaPointKalmanFilter": [[37, "navlie-filters-sigmapointkalmanfilter"]], "navlie.filters.UnscentedKalmanFilter": [[38, "navlie-filters-unscentedkalmanfilter"]], "navlie.filters.check_outlier": [[39, "navlie-filters-check-outlier"]], "navlie.filters.generate_sigmapoints": [[40, "navlie-filters-generate-sigmapoints"]], "navlie.filters.mean_state": [[41, "navlie-filters-mean-state"]], "navlie.filters.run_filter": [[42, "navlie-filters-run-filter"]], "navlie.filters.run_gsf_filter": [[43, "navlie-filters-run-gsf-filter"]], "navlie.filters.run_imm_filter": [[44, "navlie-filters-run-imm-filter"]], "navlie.lib": [[45, "module-navlie.lib"]], "navlie.lib.camera": [[46, "module-navlie.lib.camera"]], "navlie.lib.camera.PinholeCamera": [[47, "navlie-lib-camera-pinholecamera"]], "navlie.lib.camera.PoseMatrix": [[48, "navlie-lib-camera-posematrix"]], "navlie.lib.datasets": [[49, "module-navlie.lib.datasets"]], "navlie.lib.datasets.SimulatedInertialGPSDataset": [[50, "navlie-lib-datasets-simulatedinertialgpsdataset"]], "navlie.lib.datasets.SimulatedInertialLandmarkDataset": [[51, "navlie-lib-datasets-simulatedinertiallandmarkdataset"]], "navlie.lib.datasets.SimulatedPoseRangingDataset": [[52, "navlie-lib-datasets-simulatedposerangingdataset"]], "navlie.lib.datasets.generate_landmark_positions": [[53, "navlie-lib-datasets-generate-landmark-positions"]], "navlie.lib.imu": [[54, "module-navlie.lib.imu"]], "navlie.lib.imu.G_matrix": [[55, "navlie-lib-imu-g-matrix"]], "navlie.lib.imu.G_matrix_inv": [[56, "navlie-lib-imu-g-matrix-inv"]], "navlie.lib.imu.IMU": [[57, "navlie-lib-imu-imu"]], "navlie.lib.imu.IMUKinematics": [[58, "navlie-lib-imu-imukinematics"]], "navlie.lib.imu.IMUState": [[59, "navlie-lib-imu-imustate"]], "navlie.lib.imu.L_matrix": [[60, "navlie-lib-imu-l-matrix"]], "navlie.lib.imu.M_matrix": [[61, "navlie-lib-imu-m-matrix"]], "navlie.lib.imu.N_matrix": [[62, "navlie-lib-imu-n-matrix"]], "navlie.lib.imu.U_matrix": [[63, "navlie-lib-imu-u-matrix"]], "navlie.lib.imu.U_matrix_inv": [[64, "navlie-lib-imu-u-matrix-inv"]], "navlie.lib.imu.U_tilde_matrix": [[65, "navlie-lib-imu-u-tilde-matrix"]], "navlie.lib.imu.adjoint_IE3": [[66, "navlie-lib-imu-adjoint-ie3"]], "navlie.lib.imu.delta_matrix": [[67, "navlie-lib-imu-delta-matrix"]], "navlie.lib.imu.get_unbiased_imu": [[68, "navlie-lib-imu-get-unbiased-imu"]], "navlie.lib.imu.inverse_IE3": [[69, "navlie-lib-imu-inverse-ie3"]], "navlie.lib.models": [[70, "module-navlie.lib.models"]], "navlie.lib.models.AbsolutePosition": [[71, "navlie-lib-models-absoluteposition"]], "navlie.lib.models.AbsoluteVelocity": [[72, "navlie-lib-models-absolutevelocity"]], "navlie.lib.models.Altitude": [[73, "navlie-lib-models-altitude"]], "navlie.lib.models.BodyFrameVelocity": [[74, "navlie-lib-models-bodyframevelocity"]], "navlie.lib.models.CameraProjection": [[75, "navlie-lib-models-cameraprojection"]], "navlie.lib.models.DoubleIntegrator": [[76, "navlie-lib-models-doubleintegrator"]], "navlie.lib.models.DoubleIntegratorWithBias": [[77, "navlie-lib-models-doubleintegratorwithbias"]], "navlie.lib.models.GlobalPosition": [[78, "navlie-lib-models-globalposition"]], "navlie.lib.models.Gravitometer": [[79, "navlie-lib-models-gravitometer"]], "navlie.lib.models.InvariantMeasurement": [[80, "navlie-lib-models-invariantmeasurement"]], "navlie.lib.models.InvariantPointRelativePosition": [[81, "navlie-lib-models-invariantpointrelativeposition"]], "navlie.lib.models.LinearMeasurement": [[82, "navlie-lib-models-linearmeasurement"]], "navlie.lib.models.Magnetometer": [[83, "navlie-lib-models-magnetometer"]], "navlie.lib.models.OneDimensionalPositionVelocityRange": [[84, "navlie-lib-models-onedimensionalpositionvelocityrange"]], "navlie.lib.models.PointRelativePosition": [[85, "navlie-lib-models-pointrelativeposition"]], "navlie.lib.models.PointRelativePositionSLAM": [[86, "navlie-lib-models-pointrelativepositionslam"]], "navlie.lib.models.RangePointToAnchor": [[87, "navlie-lib-models-rangepointtoanchor"]], "navlie.lib.models.RangePoseToAnchor": [[88, "navlie-lib-models-rangeposetoanchor"]], "navlie.lib.models.RangePoseToPose": [[89, "navlie-lib-models-rangeposetopose"]], "navlie.lib.models.RangeRelativePose": [[90, "navlie-lib-models-rangerelativepose"]], "navlie.lib.models.RelativeBodyFrameVelocity": [[91, "navlie-lib-models-relativebodyframevelocity"]], "navlie.lib.models.SingleIntegrator": [[92, "navlie-lib-models-singleintegrator"]], "navlie.lib.preintegration": [[93, "module-navlie.lib.preintegration"]], "navlie.lib.preintegration.AngularVelocityIncrement": [[94, "navlie-lib-preintegration-angularvelocityincrement"]], "navlie.lib.preintegration.BodyVelocityIncrement": [[95, "navlie-lib-preintegration-bodyvelocityincrement"]], "navlie.lib.preintegration.IMUIncrement": [[96, "navlie-lib-preintegration-imuincrement"]], "navlie.lib.preintegration.LinearIncrement": [[97, "navlie-lib-preintegration-linearincrement"]], "navlie.lib.preintegration.PreintegratedAngularVelocity": [[98, "navlie-lib-preintegration-preintegratedangularvelocity"]], "navlie.lib.preintegration.PreintegratedBodyVelocity": [[99, "navlie-lib-preintegration-preintegratedbodyvelocity"]], "navlie.lib.preintegration.PreintegratedIMUKinematics": [[100, "navlie-lib-preintegration-preintegratedimukinematics"]], "navlie.lib.preintegration.PreintegratedLinearModel": [[101, "navlie-lib-preintegration-preintegratedlinearmodel"]], "navlie.lib.preintegration.PreintegratedWheelOdometry": [[102, "navlie-lib-preintegration-preintegratedwheelodometry"]], "navlie.lib.preintegration.RelativeMotionIncrement": [[103, "navlie-lib-preintegration-relativemotionincrement"]], "navlie.lib.preintegration.WheelOdometryIncrement": [[104, "navlie-lib-preintegration-wheelodometryincrement"]], "navlie.lib.states": [[105, "module-navlie.lib.states"]], "navlie.lib.states.MatrixLieGroupState": [[106, "navlie-lib-states-matrixliegroupstate"]], "navlie.lib.states.MixtureState": [[107, "navlie-lib-states-mixturestate"]], "navlie.lib.states.SE23State": [[108, "navlie-lib-states-se23state"]], "navlie.lib.states.SE2State": [[109, "navlie-lib-states-se2state"]], "navlie.lib.states.SE3State": [[110, "navlie-lib-states-se3state"]], "navlie.lib.states.SL3State": [[111, "navlie-lib-states-sl3state"]], "navlie.lib.states.SO2State": [[112, "navlie-lib-states-so2state"]], "navlie.lib.states.SO3State": [[113, "navlie-lib-states-so3state"]], "navlie.lib.states.StampedValue": [[114, "navlie-lib-states-stampedvalue"]], "navlie.lib.states.VectorInput": [[115, "navlie-lib-states-vectorinput"]], "navlie.lib.states.VectorState": [[116, "navlie-lib-states-vectorstate"]], "navlie.types": [[117, "module-navlie.types"]], "navlie.types.Dataset": [[118, "navlie-types-dataset"]], "navlie.types.Input": [[119, "navlie-types-input"]], "navlie.types.Measurement": [[120, "navlie-types-measurement"]], "navlie.types.MeasurementModel": [[121, "navlie-types-measurementmodel"]], "navlie.types.ProcessModel": [[122, "navlie-types-processmodel"]], "navlie.types.State": [[123, "navlie-types-state"]], "navlie.types.StateWithCovariance": [[124, "navlie-types-statewithcovariance"]], "navlie.utils": [[125, "module-navlie.utils"]], "navlie.utils.common": [[126, "module-navlie.utils.common"]], "navlie.utils.common.GaussianResult": [[127, "navlie-utils-common-gaussianresult"]], "navlie.utils.common.GaussianResultList": [[128, "navlie-utils-common-gaussianresultlist"]], "navlie.utils.common.MixtureResult": [[129, "navlie-utils-common-mixtureresult"]], "navlie.utils.common.MixtureResultList": [[130, "navlie-utils-common-mixtureresultlist"]], "navlie.utils.common.MonteCarloResult": [[131, "navlie-utils-common-montecarloresult"]], "navlie.utils.common.associate_stamps": [[132, "navlie-utils-common-associate-stamps"]], "navlie.utils.common.find_nearest_stamp_idx": [[133, "navlie-utils-common-find-nearest-stamp-idx"]], "navlie.utils.common.jacobian": [[134, "navlie-utils-common-jacobian"]], "navlie.utils.common.monte_carlo": [[135, "navlie-utils-common-monte-carlo"]], "navlie.utils.common.randvec": [[136, "navlie-utils-common-randvec"]], "navlie.utils.common.schedule_sequential_measurements": [[137, "navlie-utils-common-schedule-sequential-measurements"]], "navlie.utils.common.state_interp": [[138, "navlie-utils-common-state-interp"]], "navlie.utils.common.van_loans": [[139, "navlie-utils-common-van-loans"]], "navlie.utils.mixture": [[140, "module-navlie.utils.mixture"]], "navlie.utils.mixture.gaussian_mixing": [[141, "navlie-utils-mixture-gaussian-mixing"]], "navlie.utils.mixture.gaussian_mixing_vectorspace": [[142, "navlie-utils-mixture-gaussian-mixing-vectorspace"]], "navlie.utils.mixture.reparametrize_gaussians_about_X_par": [[143, "navlie-utils-mixture-reparametrize-gaussians-about-x-par"]], "navlie.utils.mixture.update_X": [[144, "navlie-utils-mixture-update-x"]], "navlie.utils.plot": [[145, "module-navlie.utils.plot"]], "navlie.utils.plot.CameraPoseVisualizer": [[146, "navlie-utils-plot-cameraposevisualizer"]], "navlie.utils.plot.plot_camera_poses": [[147, "navlie-utils-plot-plot-camera-poses"]], "navlie.utils.plot.plot_error": [[148, "navlie-utils-plot-plot-error"]], "navlie.utils.plot.plot_meas": [[149, "navlie-utils-plot-plot-meas"]], "navlie.utils.plot.plot_meas_by_model": [[150, "navlie-utils-plot-plot-meas-by-model"]], "navlie.utils.plot.plot_nees": [[151, "navlie-utils-plot-plot-nees"]], "navlie.utils.plot.plot_poses": [[152, "navlie-utils-plot-plot-poses"]], "navlie.utils.plot.set_axes_equal": [[153, "navlie-utils-plot-set-axes-equal"]], "API Documentation": [[154, "api-documentation"]], "Welcome to navlie!": [[155, "welcome-to-navlie"]], "Installation": [[155, "installation"]], "Examples": [[155, "examples"]], "Getting Started": [[156, "getting-started"]], "Toy Batch SLAM Example": [[157, "Toy-Batch-SLAM-Example"]], "Evaluating The Measurement Model": [[157, "Evaluating-The-Measurement-Model"]], "Creating the simulated data": [[157, "Creating-the-simulated-data"]], "Batch Estimation: From Weighted Nonlinear Least Squares to Unweighted Nonlinear Least Squares": [[157, "Batch-Estimation:-From-Weighted-Nonlinear-Least-Squares-to-Unweighted-Nonlinear-Least-Squares"]], "Defining Nonlinear Least Squares Problems in navlie": [[157, "Defining-Nonlinear-Least-Squares-Problems-in-navlie"]], "Generating the Initial Estimate": [[157, "Generating-the-Initial-Estimate"]], "Run Batch!": [[157, "Run-Batch!"]], "Extracting the Estimates and the Covariances": [[157, "Extracting-the-Estimates-and-the-Covariances"]], "Composite States": [[158, "Composite-States"]], "Inheriting from CompositeState": [[158, "Inheriting-from-CompositeState"]], "Jacobians in navlie": [[159, "Jacobians-in-navlie"]], "Jacobians - Traditional Approach": [[159, "Jacobians---Traditional-Approach"]], "Jacobians - Lie Group Approach": [[159, "Jacobians---Lie-Group-Approach"]], "Toy Problem - Lie group approach": [[160, "Toy-Problem---Lie-group-approach"]], "Define the State": [[160, "Define-the-State"], [161, "Define-the-State"]], "Define the Process Model": [[160, "Define-the-Process-Model"], [161, "Define-the-Process-Model"]], "Define the Measurement Model": [[160, "Define-the-Measurement-Model"]], "Run the Filter!": [[160, "Run-the-Filter!"]], "Built-in Lie group states": [[160, "Built-in-Lie-group-states"]], "Toy Problem - Traditional Approach": [[161, "Toy-Problem---Traditional-Approach"]], "Define the Measurement Model(s)": [[161, "Define-the-Measurement-Model(s)"]], "(Simulation only) Generate fake data": [[161, "(Simulation-only)-Generate-fake-data"]], "Run a filter!": [[161, "Run-a-filter!"]]}, "indexentries": {"module": [[0, "module-navlie.batch"], [1, "module-navlie.batch.estimator"], [3, "module-navlie.batch.gaussian_mixtures"], [9, "module-navlie.batch.losses"], [13, "module-navlie.batch.problem"], [16, "module-navlie.batch.residuals"], [21, "module-navlie.composite"], [27, "module-navlie.datagen"], [30, "module-navlie.filters"], [45, "module-navlie.lib"], [46, "module-navlie.lib.camera"], [49, "module-navlie.lib.datasets"], [54, "module-navlie.lib.imu"], [70, "module-navlie.lib.models"], [93, "module-navlie.lib.preintegration"], [105, "module-navlie.lib.states"], [117, "module-navlie.types"], [125, "module-navlie.utils"], [126, "module-navlie.utils.common"], [140, "module-navlie.utils.mixture"], [145, "module-navlie.utils.plot"]], "navlie.batch": [[0, "module-navlie.batch"]], "navlie.batch.estimator": [[1, "module-navlie.batch.estimator"]], "batchestimator (class in navlie.batch.estimator)": [[2, "navlie.batch.estimator.BatchEstimator"]], "solve() (navlie.batch.estimator.batchestimator method)": [[2, "navlie.batch.estimator.BatchEstimator.solve"]], "navlie.batch.gaussian_mixtures": [[3, "module-navlie.batch.gaussian_mixtures"]], "gaussianmixtureresidual (class in navlie.batch.gaussian_mixtures)": [[4, "navlie.batch.gaussian_mixtures.GaussianMixtureResidual"]], "evaluate() (navlie.batch.gaussian_mixtures.gaussianmixtureresidual method)": [[4, "navlie.batch.gaussian_mixtures.GaussianMixtureResidual.evaluate"]], "evaluate_component_residuals() (navlie.batch.gaussian_mixtures.gaussianmixtureresidual method)": [[4, "navlie.batch.gaussian_mixtures.GaussianMixtureResidual.evaluate_component_residuals"]], "jacobian_fd() (navlie.batch.gaussian_mixtures.gaussianmixtureresidual method)": [[4, "navlie.batch.gaussian_mixtures.GaussianMixtureResidual.jacobian_fd"]], "mix_errors() (navlie.batch.gaussian_mixtures.gaussianmixtureresidual method)": [[4, "navlie.batch.gaussian_mixtures.GaussianMixtureResidual.mix_errors"]], "mix_jacobians() (navlie.batch.gaussian_mixtures.gaussianmixtureresidual method)": [[4, "navlie.batch.gaussian_mixtures.GaussianMixtureResidual.mix_jacobians"]], "sqrt_info_matrix() (navlie.batch.gaussian_mixtures.gaussianmixtureresidual method)": [[4, "navlie.batch.gaussian_mixtures.GaussianMixtureResidual.sqrt_info_matrix"]], "hessiansummixtureresidual (class in navlie.batch.gaussian_mixtures)": [[5, "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual"]], "evaluate() (navlie.batch.gaussian_mixtures.hessiansummixtureresidual method)": [[5, "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual.evaluate"]], "evaluate_component_residuals() (navlie.batch.gaussian_mixtures.hessiansummixtureresidual method)": [[5, "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual.evaluate_component_residuals"]], "get_normalization_constant() (navlie.batch.gaussian_mixtures.hessiansummixtureresidual static method)": [[5, "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual.get_normalization_constant"]], "jacobian_fd() (navlie.batch.gaussian_mixtures.hessiansummixtureresidual method)": [[5, "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual.jacobian_fd"]], "mix_errors() (navlie.batch.gaussian_mixtures.hessiansummixtureresidual method)": [[5, "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual.mix_errors"]], "mix_jacobians() (navlie.batch.gaussian_mixtures.hessiansummixtureresidual method)": [[5, "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual.mix_jacobians"]], "no_use_complex_numbers (navlie.batch.gaussian_mixtures.hessiansummixtureresidual attribute)": [[5, "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual.no_use_complex_numbers"]], "sqrt_info_matrix() (navlie.batch.gaussian_mixtures.hessiansummixtureresidual method)": [[5, "navlie.batch.gaussian_mixtures.HessianSumMixtureResidual.sqrt_info_matrix"]], "maxmixtureresidual (class in navlie.batch.gaussian_mixtures)": [[6, "navlie.batch.gaussian_mixtures.MaxMixtureResidual"]], "evaluate() (navlie.batch.gaussian_mixtures.maxmixtureresidual method)": [[6, "navlie.batch.gaussian_mixtures.MaxMixtureResidual.evaluate"]], "evaluate_component_residuals() (navlie.batch.gaussian_mixtures.maxmixtureresidual method)": [[6, "navlie.batch.gaussian_mixtures.MaxMixtureResidual.evaluate_component_residuals"]], "jacobian_fd() (navlie.batch.gaussian_mixtures.maxmixtureresidual method)": [[6, "navlie.batch.gaussian_mixtures.MaxMixtureResidual.jacobian_fd"]], "mix_errors() (navlie.batch.gaussian_mixtures.maxmixtureresidual method)": [[6, "navlie.batch.gaussian_mixtures.MaxMixtureResidual.mix_errors"]], "mix_jacobians() (navlie.batch.gaussian_mixtures.maxmixtureresidual method)": [[6, "navlie.batch.gaussian_mixtures.MaxMixtureResidual.mix_jacobians"]], "sqrt_info_matrix() (navlie.batch.gaussian_mixtures.maxmixtureresidual method)": [[6, "navlie.batch.gaussian_mixtures.MaxMixtureResidual.sqrt_info_matrix"]], "maxsummixtureresidual (class in navlie.batch.gaussian_mixtures)": [[7, "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual"]], "compute_nonlinear_part() (navlie.batch.gaussian_mixtures.maxsummixtureresidual method)": [[7, "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual.compute_nonlinear_part"]], "damping_const (navlie.batch.gaussian_mixtures.maxsummixtureresidual attribute)": [[7, "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual.damping_const"]], "evaluate() (navlie.batch.gaussian_mixtures.maxsummixtureresidual method)": [[7, "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual.evaluate"]], "evaluate_component_residuals() (navlie.batch.gaussian_mixtures.maxsummixtureresidual method)": [[7, "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual.evaluate_component_residuals"]], "jacobian_fd() (navlie.batch.gaussian_mixtures.maxsummixtureresidual method)": [[7, "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual.jacobian_fd"]], "mix_errors() (navlie.batch.gaussian_mixtures.maxsummixtureresidual method)": [[7, "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual.mix_errors"]], "mix_jacobians() (navlie.batch.gaussian_mixtures.maxsummixtureresidual method)": [[7, "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual.mix_jacobians"]], "sqrt_info_matrix() (navlie.batch.gaussian_mixtures.maxsummixtureresidual method)": [[7, "navlie.batch.gaussian_mixtures.MaxSumMixtureResidual.sqrt_info_matrix"]], "summixtureresidual (class in navlie.batch.gaussian_mixtures)": [[8, "navlie.batch.gaussian_mixtures.SumMixtureResidual"]], "evaluate() (navlie.batch.gaussian_mixtures.summixtureresidual method)": [[8, "navlie.batch.gaussian_mixtures.SumMixtureResidual.evaluate"]], "evaluate_component_residuals() (navlie.batch.gaussian_mixtures.summixtureresidual method)": [[8, "navlie.batch.gaussian_mixtures.SumMixtureResidual.evaluate_component_residuals"]], "jacobian_fd() (navlie.batch.gaussian_mixtures.summixtureresidual method)": [[8, "navlie.batch.gaussian_mixtures.SumMixtureResidual.jacobian_fd"]], "mix_errors() (navlie.batch.gaussian_mixtures.summixtureresidual method)": [[8, "navlie.batch.gaussian_mixtures.SumMixtureResidual.mix_errors"]], "mix_jacobians() (navlie.batch.gaussian_mixtures.summixtureresidual method)": [[8, "navlie.batch.gaussian_mixtures.SumMixtureResidual.mix_jacobians"]], "sqrt_info_matrix() (navlie.batch.gaussian_mixtures.summixtureresidual method)": [[8, "navlie.batch.gaussian_mixtures.SumMixtureResidual.sqrt_info_matrix"]], "navlie.batch.losses": [[9, "module-navlie.batch.losses"]], "cauchyloss (class in navlie.batch.losses)": [[10, "navlie.batch.losses.CauchyLoss"]], "loss() (navlie.batch.losses.cauchyloss method)": [[10, "navlie.batch.losses.CauchyLoss.loss"]], "weight() (navlie.batch.losses.cauchyloss method)": [[10, "navlie.batch.losses.CauchyLoss.weight"]], "l2loss (class in navlie.batch.losses)": [[11, "navlie.batch.losses.L2Loss"]], "loss() (navlie.batch.losses.l2loss method)": [[11, "navlie.batch.losses.L2Loss.loss"]], "weight() (navlie.batch.losses.l2loss method)": [[11, "navlie.batch.losses.L2Loss.weight"]], "lossfunction (class in navlie.batch.losses)": [[12, "navlie.batch.losses.LossFunction"]], "loss() (navlie.batch.losses.lossfunction method)": [[12, "navlie.batch.losses.LossFunction.loss"]], "weight() (navlie.batch.losses.lossfunction method)": [[12, "navlie.batch.losses.LossFunction.weight"]], "navlie.batch.problem": [[13, "module-navlie.batch.problem"]], "optimizationsummary (class in navlie.batch.problem)": [[14, "navlie.batch.problem.OptimizationSummary"]], "problem (class in navlie.batch.problem)": [[15, "navlie.batch.problem.Problem"]], "add_residual() (navlie.batch.problem.problem method)": [[15, "navlie.batch.problem.Problem.add_residual"]], "add_variable() (navlie.batch.problem.problem method)": [[15, "navlie.batch.problem.Problem.add_variable"]], "compute_covariance() (navlie.batch.problem.problem method)": [[15, "navlie.batch.problem.Problem.compute_covariance"]], "compute_error_jac_cost() (navlie.batch.problem.problem method)": [[15, "navlie.batch.problem.Problem.compute_error_jac_cost"]], "get_covariance_block() (navlie.batch.problem.problem method)": [[15, "navlie.batch.problem.Problem.get_covariance_block"]], "is_converged() (navlie.batch.problem.problem method)": [[15, "navlie.batch.problem.Problem.is_converged"]], "set_variables_constant() (navlie.batch.problem.problem method)": [[15, "navlie.batch.problem.Problem.set_variables_constant"]], "solve() (navlie.batch.problem.problem method)": [[15, "navlie.batch.problem.Problem.solve"]], "navlie.batch.residuals": [[16, "module-navlie.batch.residuals"]], "measurementresidual (class in navlie.batch.residuals)": [[17, "navlie.batch.residuals.MeasurementResidual"]], "evaluate() (navlie.batch.residuals.measurementresidual method)": [[17, "navlie.batch.residuals.MeasurementResidual.evaluate"]], "jacobian_fd() (navlie.batch.residuals.measurementresidual method)": [[17, "navlie.batch.residuals.MeasurementResidual.jacobian_fd"]], "sqrt_info_matrix() (navlie.batch.residuals.measurementresidual method)": [[17, "navlie.batch.residuals.MeasurementResidual.sqrt_info_matrix"]], "priorresidual (class in navlie.batch.residuals)": [[18, "navlie.batch.residuals.PriorResidual"]], "evaluate() (navlie.batch.residuals.priorresidual method)": [[18, "navlie.batch.residuals.PriorResidual.evaluate"]], "jacobian_fd() (navlie.batch.residuals.priorresidual method)": [[18, "navlie.batch.residuals.PriorResidual.jacobian_fd"]], "sqrt_info_matrix() (navlie.batch.residuals.priorresidual method)": [[18, "navlie.batch.residuals.PriorResidual.sqrt_info_matrix"]], "processresidual (class in navlie.batch.residuals)": [[19, "navlie.batch.residuals.ProcessResidual"]], "evaluate() (navlie.batch.residuals.processresidual method)": [[19, "navlie.batch.residuals.ProcessResidual.evaluate"]], "jacobian_fd() (navlie.batch.residuals.processresidual method)": [[19, "navlie.batch.residuals.ProcessResidual.jacobian_fd"]], "sqrt_info_matrix() (navlie.batch.residuals.processresidual method)": [[19, "navlie.batch.residuals.ProcessResidual.sqrt_info_matrix"]], "residual (class in navlie.batch.residuals)": [[20, "navlie.batch.residuals.Residual"]], "evaluate() (navlie.batch.residuals.residual method)": [[20, "navlie.batch.residuals.Residual.evaluate"]], "jacobian_fd() (navlie.batch.residuals.residual method)": [[20, "navlie.batch.residuals.Residual.jacobian_fd"]], "sqrt_info_matrix() (navlie.batch.residuals.residual method)": [[20, "navlie.batch.residuals.Residual.sqrt_info_matrix"]], "navlie.composite": [[21, "module-navlie.composite"]], "compositeinput (class in navlie.composite)": [[22, "navlie.composite.CompositeInput"]], "add_input() (navlie.composite.compositeinput method)": [[22, "navlie.composite.CompositeInput.add_input"]], "copy() (navlie.composite.compositeinput method)": [[22, "navlie.composite.CompositeInput.copy"]], "covariance (navlie.composite.compositeinput attribute)": [[22, "navlie.composite.CompositeInput.covariance"]], "dof (navlie.composite.compositeinput attribute)": [[22, "navlie.composite.CompositeInput.dof"]], "get_dof_by_id() (navlie.composite.compositeinput method)": [[22, "navlie.composite.CompositeInput.get_dof_by_id"]], "get_index_by_id() (navlie.composite.compositeinput method)": [[22, "navlie.composite.CompositeInput.get_index_by_id"]], "get_input_by_id() (navlie.composite.compositeinput method)": [[22, "navlie.composite.CompositeInput.get_input_by_id"]], "get_stamp_by_id() (navlie.composite.compositeinput method)": [[22, "navlie.composite.CompositeInput.get_stamp_by_id"]], "plus() (navlie.composite.compositeinput method)": [[22, "navlie.composite.CompositeInput.plus"]], "remove_input_by_id() (navlie.composite.compositeinput method)": [[22, "navlie.composite.CompositeInput.remove_input_by_id"]], "set_input_by_id() (navlie.composite.compositeinput method)": [[22, "navlie.composite.CompositeInput.set_input_by_id"]], "set_stamp_by_id() (navlie.composite.compositeinput method)": [[22, "navlie.composite.CompositeInput.set_stamp_by_id"]], "set_stamp_for_all() (navlie.composite.compositeinput method)": [[22, "navlie.composite.CompositeInput.set_stamp_for_all"]], "stamp (navlie.composite.compositeinput attribute)": [[22, "navlie.composite.CompositeInput.stamp"]], "state_id (navlie.composite.compositeinput attribute)": [[22, "navlie.composite.CompositeInput.state_id"]], "to_list() (navlie.composite.compositeinput method)": [[22, "navlie.composite.CompositeInput.to_list"]], "compositemeasurement (class in navlie.composite)": [[23, "navlie.composite.CompositeMeasurement"]], "minus() (navlie.composite.compositemeasurement method)": [[23, "navlie.composite.CompositeMeasurement.minus"]], "model (navlie.composite.compositemeasurement attribute)": [[23, "navlie.composite.CompositeMeasurement.model"]], "stamp (navlie.composite.compositemeasurement attribute)": [[23, "navlie.composite.CompositeMeasurement.stamp"]], "state_id (navlie.composite.compositemeasurement attribute)": [[23, "navlie.composite.CompositeMeasurement.state_id"]], "value (navlie.composite.compositemeasurement attribute)": [[23, "navlie.composite.CompositeMeasurement.value"]], "compositemeasurementmodel (class in navlie.composite)": [[24, "navlie.composite.CompositeMeasurementModel"]], "covariance() (navlie.composite.compositemeasurementmodel method)": [[24, "navlie.composite.CompositeMeasurementModel.covariance"]], "evaluate() (navlie.composite.compositemeasurementmodel method)": [[24, "navlie.composite.CompositeMeasurementModel.evaluate"]], "evaluate_with_jacobian() (navlie.composite.compositemeasurementmodel method)": [[24, "navlie.composite.CompositeMeasurementModel.evaluate_with_jacobian"]], "jacobian() (navlie.composite.compositemeasurementmodel method)": [[24, "navlie.composite.CompositeMeasurementModel.jacobian"]], "jacobian_fd() (navlie.composite.compositemeasurementmodel method)": [[24, "navlie.composite.CompositeMeasurementModel.jacobian_fd"]], "sqrt_information() (navlie.composite.compositemeasurementmodel method)": [[24, "navlie.composite.CompositeMeasurementModel.sqrt_information"]], "compositeprocessmodel (class in navlie.composite)": [[25, "navlie.composite.CompositeProcessModel"]], "covariance() (navlie.composite.compositeprocessmodel method)": [[25, "navlie.composite.CompositeProcessModel.covariance"]], "evaluate() (navlie.composite.compositeprocessmodel method)": [[25, "navlie.composite.CompositeProcessModel.evaluate"]], "evaluate_with_jacobian() (navlie.composite.compositeprocessmodel method)": [[25, "navlie.composite.CompositeProcessModel.evaluate_with_jacobian"]], "input_covariance() (navlie.composite.compositeprocessmodel method)": [[25, "navlie.composite.CompositeProcessModel.input_covariance"]], "input_jacobian_fd() (navlie.composite.compositeprocessmodel method)": [[25, "navlie.composite.CompositeProcessModel.input_jacobian_fd"]], "jacobian() (navlie.composite.compositeprocessmodel method)": [[25, "navlie.composite.CompositeProcessModel.jacobian"]], "jacobian_fd() (navlie.composite.compositeprocessmodel method)": [[25, "navlie.composite.CompositeProcessModel.jacobian_fd"]], "sqrt_information() (navlie.composite.compositeprocessmodel method)": [[25, "navlie.composite.CompositeProcessModel.sqrt_information"]], "compositestate (class in navlie.composite)": [[26, "navlie.composite.CompositeState"]], "add_state() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.add_state"]], "copy() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.copy"]], "dof (navlie.composite.compositestate attribute)": [[26, "navlie.composite.CompositeState.dof"]], "get_dof_by_id() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.get_dof_by_id"]], "get_index_by_id() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.get_index_by_id"]], "get_matrix_block_by_ids() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.get_matrix_block_by_ids"]], "get_slice_by_id() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.get_slice_by_id"]], "get_slices() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.get_slices"]], "get_stamp_by_id() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.get_stamp_by_id"]], "get_state_by_id() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.get_state_by_id"]], "get_value_by_id() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.get_value_by_id"]], "jacobian_from_blocks() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.jacobian_from_blocks"]], "minus() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.minus"]], "minus_jacobian() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.minus_jacobian"]], "minus_jacobian_fd() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.minus_jacobian_fd"]], "plus() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.plus"]], "plus_by_id() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.plus_by_id"]], "plus_jacobian() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.plus_jacobian"]], "plus_jacobian_fd() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.plus_jacobian_fd"]], "remove_state_by_id() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.remove_state_by_id"]], "set_matrix_block_by_ids() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.set_matrix_block_by_ids"]], "set_stamp_by_id() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.set_stamp_by_id"]], "set_stamp_for_all() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.set_stamp_for_all"]], "set_state_by_id() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.set_state_by_id"]], "set_value_by_id() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.set_value_by_id"]], "stamp (navlie.composite.compositestate attribute)": [[26, "navlie.composite.CompositeState.stamp"]], "state_id (navlie.composite.compositestate attribute)": [[26, "navlie.composite.CompositeState.state_id"]], "to_list() (navlie.composite.compositestate method)": [[26, "navlie.composite.CompositeState.to_list"]], "value (navlie.composite.compositestate attribute)": [[26, "navlie.composite.CompositeState.value"]], "navlie.datagen": [[27, "module-navlie.datagen"]], "datagenerator (class in navlie.datagen)": [[28, "navlie.datagen.DataGenerator"]], "add_measurement_model() (navlie.datagen.datagenerator method)": [[28, "navlie.datagen.DataGenerator.add_measurement_model"]], "generate() (navlie.datagen.datagenerator method)": [[28, "navlie.datagen.DataGenerator.generate"]], "generate_measurement() (in module navlie.datagen)": [[29, "navlie.datagen.generate_measurement"]], "navlie.filters": [[30, "module-navlie.filters"]], "cubaturekalmanfilter (class in navlie.filters)": [[31, "navlie.filters.CubatureKalmanFilter"]], "correct() (navlie.filters.cubaturekalmanfilter method)": [[31, "navlie.filters.CubatureKalmanFilter.correct"]], "iterate_mean (navlie.filters.cubaturekalmanfilter attribute)": [[31, "navlie.filters.CubatureKalmanFilter.iterate_mean"]], "method (navlie.filters.cubaturekalmanfilter attribute)": [[31, "navlie.filters.CubatureKalmanFilter.method"]], "predict() (navlie.filters.cubaturekalmanfilter method)": [[31, "navlie.filters.CubatureKalmanFilter.predict"]], "process_model (navlie.filters.cubaturekalmanfilter attribute)": [[31, "navlie.filters.CubatureKalmanFilter.process_model"]], "reject_outliers (navlie.filters.cubaturekalmanfilter attribute)": [[31, "navlie.filters.CubatureKalmanFilter.reject_outliers"]], "extendedkalmanfilter (class in navlie.filters)": [[32, "navlie.filters.ExtendedKalmanFilter"]], "correct() (navlie.filters.extendedkalmanfilter method)": [[32, "navlie.filters.ExtendedKalmanFilter.correct"]], "predict() (navlie.filters.extendedkalmanfilter method)": [[32, "navlie.filters.ExtendedKalmanFilter.predict"]], "process_model (navlie.filters.extendedkalmanfilter attribute)": [[32, "navlie.filters.ExtendedKalmanFilter.process_model"]], "reject_outliers (navlie.filters.extendedkalmanfilter attribute)": [[32, "navlie.filters.ExtendedKalmanFilter.reject_outliers"]], "gausshermitekalmanfilter (class in navlie.filters)": [[33, "navlie.filters.GaussHermiteKalmanFilter"]], "correct() (navlie.filters.gausshermitekalmanfilter method)": [[33, "navlie.filters.GaussHermiteKalmanFilter.correct"]], "iterate_mean (navlie.filters.gausshermitekalmanfilter attribute)": [[33, "navlie.filters.GaussHermiteKalmanFilter.iterate_mean"]], "method (navlie.filters.gausshermitekalmanfilter attribute)": [[33, "navlie.filters.GaussHermiteKalmanFilter.method"]], "predict() (navlie.filters.gausshermitekalmanfilter method)": [[33, "navlie.filters.GaussHermiteKalmanFilter.predict"]], "process_model (navlie.filters.gausshermitekalmanfilter attribute)": [[33, "navlie.filters.GaussHermiteKalmanFilter.process_model"]], "reject_outliers (navlie.filters.gausshermitekalmanfilter attribute)": [[33, "navlie.filters.GaussHermiteKalmanFilter.reject_outliers"]], "gaussiansumfilter (class in navlie.filters)": [[34, "navlie.filters.GaussianSumFilter"]], "correct() (navlie.filters.gaussiansumfilter method)": [[34, "navlie.filters.GaussianSumFilter.correct"]], "predict() (navlie.filters.gaussiansumfilter method)": [[34, "navlie.filters.GaussianSumFilter.predict"]], "process_model (navlie.filters.gaussiansumfilter attribute)": [[34, "navlie.filters.GaussianSumFilter.process_model"]], "reject_outliers (navlie.filters.gaussiansumfilter attribute)": [[34, "navlie.filters.GaussianSumFilter.reject_outliers"]], "interactingmodelfilter (class in navlie.filters)": [[35, "navlie.filters.InteractingModelFilter"]], "correct() (navlie.filters.interactingmodelfilter method)": [[35, "navlie.filters.InteractingModelFilter.correct"]], "interaction() (navlie.filters.interactingmodelfilter method)": [[35, "navlie.filters.InteractingModelFilter.interaction"]], "predict() (navlie.filters.interactingmodelfilter method)": [[35, "navlie.filters.InteractingModelFilter.predict"]], "iteratedkalmanfilter (class in navlie.filters)": [[36, "navlie.filters.IteratedKalmanFilter"]], "correct() (navlie.filters.iteratedkalmanfilter method)": [[36, "navlie.filters.IteratedKalmanFilter.correct"]], "line_search (navlie.filters.iteratedkalmanfilter attribute)": [[36, "navlie.filters.IteratedKalmanFilter.line_search"]], "max_iters (navlie.filters.iteratedkalmanfilter attribute)": [[36, "navlie.filters.IteratedKalmanFilter.max_iters"]], "predict() (navlie.filters.iteratedkalmanfilter method)": [[36, "navlie.filters.IteratedKalmanFilter.predict"]], "process_model (navlie.filters.iteratedkalmanfilter attribute)": [[36, "navlie.filters.IteratedKalmanFilter.process_model"]], "reject_outliers (navlie.filters.iteratedkalmanfilter attribute)": [[36, "navlie.filters.IteratedKalmanFilter.reject_outliers"]], "step_tol (navlie.filters.iteratedkalmanfilter attribute)": [[36, "navlie.filters.IteratedKalmanFilter.step_tol"]], "sigmapointkalmanfilter (class in navlie.filters)": [[37, "navlie.filters.SigmaPointKalmanFilter"]], "correct() (navlie.filters.sigmapointkalmanfilter method)": [[37, "navlie.filters.SigmaPointKalmanFilter.correct"]], "iterate_mean (navlie.filters.sigmapointkalmanfilter attribute)": [[37, "navlie.filters.SigmaPointKalmanFilter.iterate_mean"]], "method (navlie.filters.sigmapointkalmanfilter attribute)": [[37, "navlie.filters.SigmaPointKalmanFilter.method"]], "predict() (navlie.filters.sigmapointkalmanfilter method)": [[37, "navlie.filters.SigmaPointKalmanFilter.predict"]], "process_model (navlie.filters.sigmapointkalmanfilter attribute)": [[37, "navlie.filters.SigmaPointKalmanFilter.process_model"]], "reject_outliers (navlie.filters.sigmapointkalmanfilter attribute)": [[37, "navlie.filters.SigmaPointKalmanFilter.reject_outliers"]], "unscentedkalmanfilter (class in navlie.filters)": [[38, "navlie.filters.UnscentedKalmanFilter"]], "correct() (navlie.filters.unscentedkalmanfilter method)": [[38, "navlie.filters.UnscentedKalmanFilter.correct"]], "iterate_mean (navlie.filters.unscentedkalmanfilter attribute)": [[38, "navlie.filters.UnscentedKalmanFilter.iterate_mean"]], "method (navlie.filters.unscentedkalmanfilter attribute)": [[38, "navlie.filters.UnscentedKalmanFilter.method"]], "predict() (navlie.filters.unscentedkalmanfilter method)": [[38, "navlie.filters.UnscentedKalmanFilter.predict"]], "process_model (navlie.filters.unscentedkalmanfilter attribute)": [[38, "navlie.filters.UnscentedKalmanFilter.process_model"]], "reject_outliers (navlie.filters.unscentedkalmanfilter attribute)": [[38, "navlie.filters.UnscentedKalmanFilter.reject_outliers"]], "check_outlier() (in module navlie.filters)": [[39, "navlie.filters.check_outlier"]], "generate_sigmapoints() (in module navlie.filters)": [[40, "navlie.filters.generate_sigmapoints"]], "mean_state() (in module navlie.filters)": [[41, "navlie.filters.mean_state"]], "run_filter() (in module navlie.filters)": [[42, "navlie.filters.run_filter"]], "run_gsf_filter() (in module navlie.filters)": [[43, "navlie.filters.run_gsf_filter"]], "run_imm_filter() (in module navlie.filters)": [[44, "navlie.filters.run_imm_filter"]], "navlie.lib": [[45, "module-navlie.lib"]], "navlie.lib.camera": [[46, "module-navlie.lib.camera"]], "pinholecamera (class in navlie.lib.camera)": [[47, "navlie.lib.camera.PinholeCamera"]], "r_normalized_image_coords (navlie.lib.camera.pinholecamera property)": [[47, "navlie.lib.camera.PinholeCamera.R_normalized_image_coords"]], "copy() (navlie.lib.camera.pinholecamera method)": [[47, "navlie.lib.camera.PinholeCamera.copy"]], "evaluate() (navlie.lib.camera.pinholecamera method)": [[47, "navlie.lib.camera.PinholeCamera.evaluate"]], "get_cam_to_enu() (navlie.lib.camera.pinholecamera static method)": [[47, "navlie.lib.camera.PinholeCamera.get_cam_to_enu"]], "intrinsics (navlie.lib.camera.pinholecamera property)": [[47, "navlie.lib.camera.PinholeCamera.intrinsics"]], "is_landmark_in_front_of_cam() (navlie.lib.camera.pinholecamera method)": [[47, "navlie.lib.camera.PinholeCamera.is_landmark_in_front_of_cam"]], "is_measurement_valid() (navlie.lib.camera.pinholecamera method)": [[47, "navlie.lib.camera.PinholeCamera.is_measurement_valid"]], "project() (navlie.lib.camera.pinholecamera method)": [[47, "navlie.lib.camera.PinholeCamera.project"]], "resolve_landmark_in_cam_frame() (navlie.lib.camera.pinholecamera method)": [[47, "navlie.lib.camera.PinholeCamera.resolve_landmark_in_cam_frame"]], "sigma_normalized_image_coords (navlie.lib.camera.pinholecamera property)": [[47, "navlie.lib.camera.PinholeCamera.sigma_normalized_image_coords"]], "to_normalized_coords() (navlie.lib.camera.pinholecamera method)": [[47, "navlie.lib.camera.PinholeCamera.to_normalized_coords"]], "to_pixel_coors() (navlie.lib.camera.pinholecamera method)": [[47, "navlie.lib.camera.PinholeCamera.to_pixel_coors"]], "posematrix (class in navlie.lib.camera)": [[48, "navlie.lib.camera.PoseMatrix"]], "attitude (navlie.lib.camera.posematrix property)": [[48, "navlie.lib.camera.PoseMatrix.attitude"]], "copy() (navlie.lib.camera.posematrix method)": [[48, "navlie.lib.camera.PoseMatrix.copy"]], "position (navlie.lib.camera.posematrix property)": [[48, "navlie.lib.camera.PoseMatrix.position"]], "navlie.lib.datasets": [[49, "module-navlie.lib.datasets"]], "simulatedinertialgpsdataset (class in navlie.lib.datasets)": [[50, "navlie.lib.datasets.SimulatedInertialGPSDataset"]], "get_ground_truth() (navlie.lib.datasets.simulatedinertialgpsdataset method)": [[50, "navlie.lib.datasets.SimulatedInertialGPSDataset.get_ground_truth"]], "get_input_data() (navlie.lib.datasets.simulatedinertialgpsdataset method)": [[50, "navlie.lib.datasets.SimulatedInertialGPSDataset.get_input_data"]], "get_measurement_data() (navlie.lib.datasets.simulatedinertialgpsdataset method)": [[50, "navlie.lib.datasets.SimulatedInertialGPSDataset.get_measurement_data"]], "simulatedinertiallandmarkdataset (class in navlie.lib.datasets)": [[51, "navlie.lib.datasets.SimulatedInertialLandmarkDataset"]], "get_ground_truth() (navlie.lib.datasets.simulatedinertiallandmarkdataset method)": [[51, "navlie.lib.datasets.SimulatedInertialLandmarkDataset.get_ground_truth"]], "get_groundtruth_landmarks() (navlie.lib.datasets.simulatedinertiallandmarkdataset method)": [[51, "navlie.lib.datasets.SimulatedInertialLandmarkDataset.get_groundtruth_landmarks"]], "get_input_data() (navlie.lib.datasets.simulatedinertiallandmarkdataset method)": [[51, "navlie.lib.datasets.SimulatedInertialLandmarkDataset.get_input_data"]], "get_measurement_data() (navlie.lib.datasets.simulatedinertiallandmarkdataset method)": [[51, "navlie.lib.datasets.SimulatedInertialLandmarkDataset.get_measurement_data"]], "simulatedposerangingdataset (class in navlie.lib.datasets)": [[52, "navlie.lib.datasets.SimulatedPoseRangingDataset"]], "get_ground_truth() (navlie.lib.datasets.simulatedposerangingdataset method)": [[52, "navlie.lib.datasets.SimulatedPoseRangingDataset.get_ground_truth"]], "get_input_data() (navlie.lib.datasets.simulatedposerangingdataset method)": [[52, "navlie.lib.datasets.SimulatedPoseRangingDataset.get_input_data"]], "get_measurement_data() (navlie.lib.datasets.simulatedposerangingdataset method)": [[52, "navlie.lib.datasets.SimulatedPoseRangingDataset.get_measurement_data"]], "generate_landmark_positions() (in module navlie.lib.datasets)": [[53, "navlie.lib.datasets.generate_landmark_positions"]], "navlie.lib.imu": [[54, "module-navlie.lib.imu"]], "g_matrix() (in module navlie.lib.imu)": [[55, "navlie.lib.imu.G_matrix"]], "g_matrix_inv() (in module navlie.lib.imu)": [[56, "navlie.lib.imu.G_matrix_inv"]], "imu (class in navlie.lib.imu)": [[57, "navlie.lib.imu.IMU"]], "accel (navlie.lib.imu.imu attribute)": [[57, "navlie.lib.imu.IMU.accel"]], "bias_accel_walk (navlie.lib.imu.imu attribute)": [[57, "navlie.lib.imu.IMU.bias_accel_walk"]], "bias_gyro_walk (navlie.lib.imu.imu attribute)": [[57, "navlie.lib.imu.IMU.bias_gyro_walk"]], "copy() (navlie.lib.imu.imu method)": [[57, "navlie.lib.imu.IMU.copy"]], "covariance (navlie.lib.imu.imu attribute)": [[57, "navlie.lib.imu.IMU.covariance"]], "dof (navlie.lib.imu.imu attribute)": [[57, "navlie.lib.imu.IMU.dof"]], "gyro (navlie.lib.imu.imu attribute)": [[57, "navlie.lib.imu.IMU.gyro"]], "plus() (navlie.lib.imu.imu method)": [[57, "navlie.lib.imu.IMU.plus"]], "random() (navlie.lib.imu.imu static method)": [[57, "navlie.lib.imu.IMU.random"]], "stamp (navlie.lib.imu.imu attribute)": [[57, "navlie.lib.imu.IMU.stamp"]], "state_id (navlie.lib.imu.imu attribute)": [[57, "navlie.lib.imu.IMU.state_id"]], "imukinematics (class in navlie.lib.imu)": [[58, "navlie.lib.imu.IMUKinematics"]], "covariance() (navlie.lib.imu.imukinematics method)": [[58, "navlie.lib.imu.IMUKinematics.covariance"]], "evaluate() (navlie.lib.imu.imukinematics method)": [[58, "navlie.lib.imu.IMUKinematics.evaluate"]], "evaluate_with_jacobian() (navlie.lib.imu.imukinematics method)": [[58, "navlie.lib.imu.IMUKinematics.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.imu.imukinematics method)": [[58, "navlie.lib.imu.IMUKinematics.input_covariance"]], "input_jacobian_fd() (navlie.lib.imu.imukinematics method)": [[58, "navlie.lib.imu.IMUKinematics.input_jacobian_fd"]], "jacobian() (navlie.lib.imu.imukinematics method)": [[58, "navlie.lib.imu.IMUKinematics.jacobian"]], "jacobian_fd() (navlie.lib.imu.imukinematics method)": [[58, "navlie.lib.imu.IMUKinematics.jacobian_fd"]], "sqrt_information() (navlie.lib.imu.imukinematics method)": [[58, "navlie.lib.imu.IMUKinematics.sqrt_information"]], "imustate (class in navlie.lib.imu)": [[59, "navlie.lib.imu.IMUState"]], "add_state() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.add_state"]], "attitude (navlie.lib.imu.imustate property)": [[59, "navlie.lib.imu.IMUState.attitude"]], "bias (navlie.lib.imu.imustate property)": [[59, "navlie.lib.imu.IMUState.bias"]], "bias_accel (navlie.lib.imu.imustate property)": [[59, "navlie.lib.imu.IMUState.bias_accel"]], "bias_gyro (navlie.lib.imu.imustate property)": [[59, "navlie.lib.imu.IMUState.bias_gyro"]], "copy() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.copy"]], "direction (navlie.lib.imu.imustate property)": [[59, "navlie.lib.imu.IMUState.direction"]], "dof (navlie.lib.imu.imustate attribute)": [[59, "navlie.lib.imu.IMUState.dof"]], "get_dof_by_id() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.get_dof_by_id"]], "get_index_by_id() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.get_index_by_id"]], "get_matrix_block_by_ids() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.get_matrix_block_by_ids"]], "get_slice_by_id() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.get_slice_by_id"]], "get_slices() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.get_slices"]], "get_stamp_by_id() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.get_stamp_by_id"]], "get_state_by_id() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.get_state_by_id"]], "get_value_by_id() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.get_value_by_id"]], "jacobian_from_blocks() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.jacobian_from_blocks"]], "minus() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.minus"]], "minus_jacobian() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.minus_jacobian"]], "minus_jacobian_fd() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.minus_jacobian_fd"]], "nav_state (navlie.lib.imu.imustate property)": [[59, "navlie.lib.imu.IMUState.nav_state"]], "plus() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.plus"]], "plus_by_id() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.plus_by_id"]], "plus_jacobian() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.plus_jacobian"]], "plus_jacobian_fd() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.plus_jacobian_fd"]], "pose (navlie.lib.imu.imustate property)": [[59, "navlie.lib.imu.IMUState.pose"]], "position (navlie.lib.imu.imustate property)": [[59, "navlie.lib.imu.IMUState.position"]], "remove_state_by_id() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.remove_state_by_id"]], "set_matrix_block_by_ids() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.set_matrix_block_by_ids"]], "set_stamp_by_id() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.set_stamp_by_id"]], "set_stamp_for_all() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.set_stamp_for_all"]], "set_state_by_id() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.set_state_by_id"]], "set_value_by_id() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.set_value_by_id"]], "stamp (navlie.lib.imu.imustate attribute)": [[59, "navlie.lib.imu.IMUState.stamp"]], "state_id (navlie.lib.imu.imustate attribute)": [[59, "navlie.lib.imu.IMUState.state_id"]], "to_list() (navlie.lib.imu.imustate method)": [[59, "navlie.lib.imu.IMUState.to_list"]], "value (navlie.lib.imu.imustate attribute)": [[59, "navlie.lib.imu.IMUState.value"]], "velocity (navlie.lib.imu.imustate property)": [[59, "navlie.lib.imu.IMUState.velocity"]], "l_matrix() (in module navlie.lib.imu)": [[60, "navlie.lib.imu.L_matrix"]], "m_matrix() (in module navlie.lib.imu)": [[61, "navlie.lib.imu.M_matrix"]], "n_matrix() (in module navlie.lib.imu)": [[62, "navlie.lib.imu.N_matrix"]], "u_matrix() (in module navlie.lib.imu)": [[63, "navlie.lib.imu.U_matrix"]], "u_matrix_inv() (in module navlie.lib.imu)": [[64, "navlie.lib.imu.U_matrix_inv"]], "u_tilde_matrix() (in module navlie.lib.imu)": [[65, "navlie.lib.imu.U_tilde_matrix"]], "adjoint_ie3() (in module navlie.lib.imu)": [[66, "navlie.lib.imu.adjoint_IE3"]], "delta_matrix() (in module navlie.lib.imu)": [[67, "navlie.lib.imu.delta_matrix"]], "get_unbiased_imu() (in module navlie.lib.imu)": [[68, "navlie.lib.imu.get_unbiased_imu"]], "inverse_ie3() (in module navlie.lib.imu)": [[69, "navlie.lib.imu.inverse_IE3"]], "navlie.lib.models": [[70, "module-navlie.lib.models"]], "absoluteposition (class in navlie.lib.models)": [[71, "navlie.lib.models.AbsolutePosition"]], "covariance() (navlie.lib.models.absoluteposition method)": [[71, "navlie.lib.models.AbsolutePosition.covariance"]], "evaluate() (navlie.lib.models.absoluteposition method)": [[71, "navlie.lib.models.AbsolutePosition.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.absoluteposition method)": [[71, "navlie.lib.models.AbsolutePosition.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.absoluteposition method)": [[71, "navlie.lib.models.AbsolutePosition.jacobian"]], "jacobian_fd() (navlie.lib.models.absoluteposition method)": [[71, "navlie.lib.models.AbsolutePosition.jacobian_fd"]], "sqrt_information() (navlie.lib.models.absoluteposition method)": [[71, "navlie.lib.models.AbsolutePosition.sqrt_information"]], "absolutevelocity (class in navlie.lib.models)": [[72, "navlie.lib.models.AbsoluteVelocity"]], "covariance() (navlie.lib.models.absolutevelocity method)": [[72, "navlie.lib.models.AbsoluteVelocity.covariance"]], "evaluate() (navlie.lib.models.absolutevelocity method)": [[72, "navlie.lib.models.AbsoluteVelocity.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.absolutevelocity method)": [[72, "navlie.lib.models.AbsoluteVelocity.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.absolutevelocity method)": [[72, "navlie.lib.models.AbsoluteVelocity.jacobian"]], "jacobian_fd() (navlie.lib.models.absolutevelocity method)": [[72, "navlie.lib.models.AbsoluteVelocity.jacobian_fd"]], "sqrt_information() (navlie.lib.models.absolutevelocity method)": [[72, "navlie.lib.models.AbsoluteVelocity.sqrt_information"]], "altitude (class in navlie.lib.models)": [[73, "navlie.lib.models.Altitude"]], "covariance() (navlie.lib.models.altitude method)": [[73, "navlie.lib.models.Altitude.covariance"]], "evaluate() (navlie.lib.models.altitude method)": [[73, "navlie.lib.models.Altitude.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.altitude method)": [[73, "navlie.lib.models.Altitude.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.altitude method)": [[73, "navlie.lib.models.Altitude.jacobian"]], "jacobian_fd() (navlie.lib.models.altitude method)": [[73, "navlie.lib.models.Altitude.jacobian_fd"]], "sqrt_information() (navlie.lib.models.altitude method)": [[73, "navlie.lib.models.Altitude.sqrt_information"]], "bodyframevelocity (class in navlie.lib.models)": [[74, "navlie.lib.models.BodyFrameVelocity"]], "covariance() (navlie.lib.models.bodyframevelocity method)": [[74, "navlie.lib.models.BodyFrameVelocity.covariance"]], "evaluate() (navlie.lib.models.bodyframevelocity method)": [[74, "navlie.lib.models.BodyFrameVelocity.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.bodyframevelocity method)": [[74, "navlie.lib.models.BodyFrameVelocity.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.models.bodyframevelocity method)": [[74, "navlie.lib.models.BodyFrameVelocity.input_covariance"]], "input_jacobian_fd() (navlie.lib.models.bodyframevelocity method)": [[74, "navlie.lib.models.BodyFrameVelocity.input_jacobian_fd"]], "jacobian() (navlie.lib.models.bodyframevelocity method)": [[74, "navlie.lib.models.BodyFrameVelocity.jacobian"]], "jacobian_fd() (navlie.lib.models.bodyframevelocity method)": [[74, "navlie.lib.models.BodyFrameVelocity.jacobian_fd"]], "sqrt_information() (navlie.lib.models.bodyframevelocity method)": [[74, "navlie.lib.models.BodyFrameVelocity.sqrt_information"]], "cameraprojection (class in navlie.lib.models)": [[75, "navlie.lib.models.CameraProjection"]], "covariance() (navlie.lib.models.cameraprojection method)": [[75, "navlie.lib.models.CameraProjection.covariance"]], "evaluate() (navlie.lib.models.cameraprojection method)": [[75, "navlie.lib.models.CameraProjection.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.cameraprojection method)": [[75, "navlie.lib.models.CameraProjection.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.cameraprojection method)": [[75, "navlie.lib.models.CameraProjection.jacobian"]], "jacobian_fd() (navlie.lib.models.cameraprojection method)": [[75, "navlie.lib.models.CameraProjection.jacobian_fd"]], "sqrt_information() (navlie.lib.models.cameraprojection method)": [[75, "navlie.lib.models.CameraProjection.sqrt_information"]], "doubleintegrator (class in navlie.lib.models)": [[76, "navlie.lib.models.DoubleIntegrator"]], "covariance() (navlie.lib.models.doubleintegrator method)": [[76, "navlie.lib.models.DoubleIntegrator.covariance"]], "evaluate() (navlie.lib.models.doubleintegrator method)": [[76, "navlie.lib.models.DoubleIntegrator.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.doubleintegrator method)": [[76, "navlie.lib.models.DoubleIntegrator.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.models.doubleintegrator method)": [[76, "navlie.lib.models.DoubleIntegrator.input_covariance"]], "input_jacobian() (navlie.lib.models.doubleintegrator method)": [[76, "navlie.lib.models.DoubleIntegrator.input_jacobian"]], "input_jacobian_fd() (navlie.lib.models.doubleintegrator method)": [[76, "navlie.lib.models.DoubleIntegrator.input_jacobian_fd"]], "jacobian() (navlie.lib.models.doubleintegrator method)": [[76, "navlie.lib.models.DoubleIntegrator.jacobian"]], "jacobian_fd() (navlie.lib.models.doubleintegrator method)": [[76, "navlie.lib.models.DoubleIntegrator.jacobian_fd"]], "sqrt_information() (navlie.lib.models.doubleintegrator method)": [[76, "navlie.lib.models.DoubleIntegrator.sqrt_information"]], "doubleintegratorwithbias (class in navlie.lib.models)": [[77, "navlie.lib.models.DoubleIntegratorWithBias"]], "covariance() (navlie.lib.models.doubleintegratorwithbias method)": [[77, "navlie.lib.models.DoubleIntegratorWithBias.covariance"]], "evaluate() (navlie.lib.models.doubleintegratorwithbias method)": [[77, "navlie.lib.models.DoubleIntegratorWithBias.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.doubleintegratorwithbias method)": [[77, "navlie.lib.models.DoubleIntegratorWithBias.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.models.doubleintegratorwithbias method)": [[77, "navlie.lib.models.DoubleIntegratorWithBias.input_covariance"]], "input_jacobian() (navlie.lib.models.doubleintegratorwithbias method)": [[77, "navlie.lib.models.DoubleIntegratorWithBias.input_jacobian"]], "input_jacobian_fd() (navlie.lib.models.doubleintegratorwithbias method)": [[77, "navlie.lib.models.DoubleIntegratorWithBias.input_jacobian_fd"]], "jacobian() (navlie.lib.models.doubleintegratorwithbias method)": [[77, "navlie.lib.models.DoubleIntegratorWithBias.jacobian"]], "jacobian_fd() (navlie.lib.models.doubleintegratorwithbias method)": [[77, "navlie.lib.models.DoubleIntegratorWithBias.jacobian_fd"]], "sqrt_information() (navlie.lib.models.doubleintegratorwithbias method)": [[77, "navlie.lib.models.DoubleIntegratorWithBias.sqrt_information"]], "globalposition (class in navlie.lib.models)": [[78, "navlie.lib.models.GlobalPosition"]], "covariance() (navlie.lib.models.globalposition method)": [[78, "navlie.lib.models.GlobalPosition.covariance"]], "evaluate() (navlie.lib.models.globalposition method)": [[78, "navlie.lib.models.GlobalPosition.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.globalposition method)": [[78, "navlie.lib.models.GlobalPosition.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.globalposition method)": [[78, "navlie.lib.models.GlobalPosition.jacobian"]], "jacobian_fd() (navlie.lib.models.globalposition method)": [[78, "navlie.lib.models.GlobalPosition.jacobian_fd"]], "sqrt_information() (navlie.lib.models.globalposition method)": [[78, "navlie.lib.models.GlobalPosition.sqrt_information"]], "gravitometer (class in navlie.lib.models)": [[79, "navlie.lib.models.Gravitometer"]], "covariance() (navlie.lib.models.gravitometer method)": [[79, "navlie.lib.models.Gravitometer.covariance"]], "evaluate() (navlie.lib.models.gravitometer method)": [[79, "navlie.lib.models.Gravitometer.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.gravitometer method)": [[79, "navlie.lib.models.Gravitometer.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.gravitometer method)": [[79, "navlie.lib.models.Gravitometer.jacobian"]], "jacobian_fd() (navlie.lib.models.gravitometer method)": [[79, "navlie.lib.models.Gravitometer.jacobian_fd"]], "sqrt_information() (navlie.lib.models.gravitometer method)": [[79, "navlie.lib.models.Gravitometer.sqrt_information"]], "invariantmeasurement (class in navlie.lib.models)": [[80, "navlie.lib.models.InvariantMeasurement"]], "minus() (navlie.lib.models.invariantmeasurement method)": [[80, "navlie.lib.models.InvariantMeasurement.minus"]], "model (navlie.lib.models.invariantmeasurement attribute)": [[80, "navlie.lib.models.InvariantMeasurement.model"]], "stamp (navlie.lib.models.invariantmeasurement attribute)": [[80, "navlie.lib.models.InvariantMeasurement.stamp"]], "state_id (navlie.lib.models.invariantmeasurement attribute)": [[80, "navlie.lib.models.InvariantMeasurement.state_id"]], "value (navlie.lib.models.invariantmeasurement attribute)": [[80, "navlie.lib.models.InvariantMeasurement.value"]], "invariantpointrelativeposition (class in navlie.lib.models)": [[81, "navlie.lib.models.InvariantPointRelativePosition"]], "covariance() (navlie.lib.models.invariantpointrelativeposition method)": [[81, "navlie.lib.models.InvariantPointRelativePosition.covariance"]], "evaluate() (navlie.lib.models.invariantpointrelativeposition method)": [[81, "navlie.lib.models.InvariantPointRelativePosition.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.invariantpointrelativeposition method)": [[81, "navlie.lib.models.InvariantPointRelativePosition.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.invariantpointrelativeposition method)": [[81, "navlie.lib.models.InvariantPointRelativePosition.jacobian"]], "jacobian_fd() (navlie.lib.models.invariantpointrelativeposition method)": [[81, "navlie.lib.models.InvariantPointRelativePosition.jacobian_fd"]], "sqrt_information() (navlie.lib.models.invariantpointrelativeposition method)": [[81, "navlie.lib.models.InvariantPointRelativePosition.sqrt_information"]], "linearmeasurement (class in navlie.lib.models)": [[82, "navlie.lib.models.LinearMeasurement"]], "covariance() (navlie.lib.models.linearmeasurement method)": [[82, "navlie.lib.models.LinearMeasurement.covariance"]], "evaluate() (navlie.lib.models.linearmeasurement method)": [[82, "navlie.lib.models.LinearMeasurement.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.linearmeasurement method)": [[82, "navlie.lib.models.LinearMeasurement.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.linearmeasurement method)": [[82, "navlie.lib.models.LinearMeasurement.jacobian"]], "jacobian_fd() (navlie.lib.models.linearmeasurement method)": [[82, "navlie.lib.models.LinearMeasurement.jacobian_fd"]], "sqrt_information() (navlie.lib.models.linearmeasurement method)": [[82, "navlie.lib.models.LinearMeasurement.sqrt_information"]], "magnetometer (class in navlie.lib.models)": [[83, "navlie.lib.models.Magnetometer"]], "covariance() (navlie.lib.models.magnetometer method)": [[83, "navlie.lib.models.Magnetometer.covariance"]], "evaluate() (navlie.lib.models.magnetometer method)": [[83, "navlie.lib.models.Magnetometer.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.magnetometer method)": [[83, "navlie.lib.models.Magnetometer.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.magnetometer method)": [[83, "navlie.lib.models.Magnetometer.jacobian"]], "jacobian_fd() (navlie.lib.models.magnetometer method)": [[83, "navlie.lib.models.Magnetometer.jacobian_fd"]], "sqrt_information() (navlie.lib.models.magnetometer method)": [[83, "navlie.lib.models.Magnetometer.sqrt_information"]], "onedimensionalpositionvelocityrange (class in navlie.lib.models)": [[84, "navlie.lib.models.OneDimensionalPositionVelocityRange"]], "covariance() (navlie.lib.models.onedimensionalpositionvelocityrange method)": [[84, "navlie.lib.models.OneDimensionalPositionVelocityRange.covariance"]], "evaluate() (navlie.lib.models.onedimensionalpositionvelocityrange method)": [[84, "navlie.lib.models.OneDimensionalPositionVelocityRange.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.onedimensionalpositionvelocityrange method)": [[84, "navlie.lib.models.OneDimensionalPositionVelocityRange.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.onedimensionalpositionvelocityrange method)": [[84, "navlie.lib.models.OneDimensionalPositionVelocityRange.jacobian"]], "jacobian_fd() (navlie.lib.models.onedimensionalpositionvelocityrange method)": [[84, "navlie.lib.models.OneDimensionalPositionVelocityRange.jacobian_fd"]], "sqrt_information() (navlie.lib.models.onedimensionalpositionvelocityrange method)": [[84, "navlie.lib.models.OneDimensionalPositionVelocityRange.sqrt_information"]], "pointrelativeposition (class in navlie.lib.models)": [[85, "navlie.lib.models.PointRelativePosition"]], "covariance() (navlie.lib.models.pointrelativeposition method)": [[85, "navlie.lib.models.PointRelativePosition.covariance"]], "evaluate() (navlie.lib.models.pointrelativeposition method)": [[85, "navlie.lib.models.PointRelativePosition.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.pointrelativeposition method)": [[85, "navlie.lib.models.PointRelativePosition.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.pointrelativeposition method)": [[85, "navlie.lib.models.PointRelativePosition.jacobian"]], "jacobian_fd() (navlie.lib.models.pointrelativeposition method)": [[85, "navlie.lib.models.PointRelativePosition.jacobian_fd"]], "sqrt_information() (navlie.lib.models.pointrelativeposition method)": [[85, "navlie.lib.models.PointRelativePosition.sqrt_information"]], "pointrelativepositionslam (class in navlie.lib.models)": [[86, "navlie.lib.models.PointRelativePositionSLAM"]], "covariance() (navlie.lib.models.pointrelativepositionslam method)": [[86, "navlie.lib.models.PointRelativePositionSLAM.covariance"]], "evaluate() (navlie.lib.models.pointrelativepositionslam method)": [[86, "navlie.lib.models.PointRelativePositionSLAM.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.pointrelativepositionslam method)": [[86, "navlie.lib.models.PointRelativePositionSLAM.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.pointrelativepositionslam method)": [[86, "navlie.lib.models.PointRelativePositionSLAM.jacobian"]], "jacobian_fd() (navlie.lib.models.pointrelativepositionslam method)": [[86, "navlie.lib.models.PointRelativePositionSLAM.jacobian_fd"]], "sqrt_information() (navlie.lib.models.pointrelativepositionslam method)": [[86, "navlie.lib.models.PointRelativePositionSLAM.sqrt_information"]], "rangepointtoanchor (class in navlie.lib.models)": [[87, "navlie.lib.models.RangePointToAnchor"]], "covariance() (navlie.lib.models.rangepointtoanchor method)": [[87, "navlie.lib.models.RangePointToAnchor.covariance"]], "evaluate() (navlie.lib.models.rangepointtoanchor method)": [[87, "navlie.lib.models.RangePointToAnchor.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.rangepointtoanchor method)": [[87, "navlie.lib.models.RangePointToAnchor.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.rangepointtoanchor method)": [[87, "navlie.lib.models.RangePointToAnchor.jacobian"]], "jacobian_fd() (navlie.lib.models.rangepointtoanchor method)": [[87, "navlie.lib.models.RangePointToAnchor.jacobian_fd"]], "sqrt_information() (navlie.lib.models.rangepointtoanchor method)": [[87, "navlie.lib.models.RangePointToAnchor.sqrt_information"]], "rangeposetoanchor (class in navlie.lib.models)": [[88, "navlie.lib.models.RangePoseToAnchor"]], "covariance() (navlie.lib.models.rangeposetoanchor method)": [[88, "navlie.lib.models.RangePoseToAnchor.covariance"]], "evaluate() (navlie.lib.models.rangeposetoanchor method)": [[88, "navlie.lib.models.RangePoseToAnchor.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.rangeposetoanchor method)": [[88, "navlie.lib.models.RangePoseToAnchor.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.rangeposetoanchor method)": [[88, "navlie.lib.models.RangePoseToAnchor.jacobian"]], "jacobian_fd() (navlie.lib.models.rangeposetoanchor method)": [[88, "navlie.lib.models.RangePoseToAnchor.jacobian_fd"]], "sqrt_information() (navlie.lib.models.rangeposetoanchor method)": [[88, "navlie.lib.models.RangePoseToAnchor.sqrt_information"]], "rangeposetopose (class in navlie.lib.models)": [[89, "navlie.lib.models.RangePoseToPose"]], "covariance() (navlie.lib.models.rangeposetopose method)": [[89, "navlie.lib.models.RangePoseToPose.covariance"]], "evaluate() (navlie.lib.models.rangeposetopose method)": [[89, "navlie.lib.models.RangePoseToPose.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.rangeposetopose method)": [[89, "navlie.lib.models.RangePoseToPose.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.rangeposetopose method)": [[89, "navlie.lib.models.RangePoseToPose.jacobian"]], "jacobian_fd() (navlie.lib.models.rangeposetopose method)": [[89, "navlie.lib.models.RangePoseToPose.jacobian_fd"]], "sqrt_information() (navlie.lib.models.rangeposetopose method)": [[89, "navlie.lib.models.RangePoseToPose.sqrt_information"]], "rangerelativepose (class in navlie.lib.models)": [[90, "navlie.lib.models.RangeRelativePose"]], "covariance() (navlie.lib.models.rangerelativepose method)": [[90, "navlie.lib.models.RangeRelativePose.covariance"]], "evaluate() (navlie.lib.models.rangerelativepose method)": [[90, "navlie.lib.models.RangeRelativePose.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.rangerelativepose method)": [[90, "navlie.lib.models.RangeRelativePose.evaluate_with_jacobian"]], "jacobian() (navlie.lib.models.rangerelativepose method)": [[90, "navlie.lib.models.RangeRelativePose.jacobian"]], "jacobian_fd() (navlie.lib.models.rangerelativepose method)": [[90, "navlie.lib.models.RangeRelativePose.jacobian_fd"]], "sqrt_information() (navlie.lib.models.rangerelativepose method)": [[90, "navlie.lib.models.RangeRelativePose.sqrt_information"]], "relativebodyframevelocity (class in navlie.lib.models)": [[91, "navlie.lib.models.RelativeBodyFrameVelocity"]], "covariance() (navlie.lib.models.relativebodyframevelocity method)": [[91, "navlie.lib.models.RelativeBodyFrameVelocity.covariance"]], "evaluate() (navlie.lib.models.relativebodyframevelocity method)": [[91, "navlie.lib.models.RelativeBodyFrameVelocity.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.relativebodyframevelocity method)": [[91, "navlie.lib.models.RelativeBodyFrameVelocity.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.models.relativebodyframevelocity method)": [[91, "navlie.lib.models.RelativeBodyFrameVelocity.input_covariance"]], "input_jacobian_fd() (navlie.lib.models.relativebodyframevelocity method)": [[91, "navlie.lib.models.RelativeBodyFrameVelocity.input_jacobian_fd"]], "jacobian() (navlie.lib.models.relativebodyframevelocity method)": [[91, "navlie.lib.models.RelativeBodyFrameVelocity.jacobian"]], "jacobian_fd() (navlie.lib.models.relativebodyframevelocity method)": [[91, "navlie.lib.models.RelativeBodyFrameVelocity.jacobian_fd"]], "sqrt_information() (navlie.lib.models.relativebodyframevelocity method)": [[91, "navlie.lib.models.RelativeBodyFrameVelocity.sqrt_information"]], "singleintegrator (class in navlie.lib.models)": [[92, "navlie.lib.models.SingleIntegrator"]], "covariance() (navlie.lib.models.singleintegrator method)": [[92, "navlie.lib.models.SingleIntegrator.covariance"]], "evaluate() (navlie.lib.models.singleintegrator method)": [[92, "navlie.lib.models.SingleIntegrator.evaluate"]], "evaluate_with_jacobian() (navlie.lib.models.singleintegrator method)": [[92, "navlie.lib.models.SingleIntegrator.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.models.singleintegrator method)": [[92, "navlie.lib.models.SingleIntegrator.input_covariance"]], "input_jacobian_fd() (navlie.lib.models.singleintegrator method)": [[92, "navlie.lib.models.SingleIntegrator.input_jacobian_fd"]], "jacobian() (navlie.lib.models.singleintegrator method)": [[92, "navlie.lib.models.SingleIntegrator.jacobian"]], "jacobian_fd() (navlie.lib.models.singleintegrator method)": [[92, "navlie.lib.models.SingleIntegrator.jacobian_fd"]], "sqrt_information() (navlie.lib.models.singleintegrator method)": [[92, "navlie.lib.models.SingleIntegrator.sqrt_information"]], "navlie.lib.preintegration": [[93, "module-navlie.lib.preintegration"]], "angularvelocityincrement (class in navlie.lib.preintegration)": [[94, "navlie.lib.preintegration.AngularVelocityIncrement"]], "copy() (navlie.lib.preintegration.angularvelocityincrement method)": [[94, "navlie.lib.preintegration.AngularVelocityIncrement.copy"]], "covariance (navlie.lib.preintegration.angularvelocityincrement attribute)": [[94, "navlie.lib.preintegration.AngularVelocityIncrement.covariance"]], "dof (navlie.lib.preintegration.angularvelocityincrement attribute)": [[94, "navlie.lib.preintegration.AngularVelocityIncrement.dof"]], "increment() (navlie.lib.preintegration.angularvelocityincrement method)": [[94, "navlie.lib.preintegration.AngularVelocityIncrement.increment"]], "new() (navlie.lib.preintegration.angularvelocityincrement method)": [[94, "navlie.lib.preintegration.AngularVelocityIncrement.new"]], "plus() (navlie.lib.preintegration.angularvelocityincrement method)": [[94, "navlie.lib.preintegration.AngularVelocityIncrement.plus"]], "stamp (navlie.lib.preintegration.angularvelocityincrement property)": [[94, "navlie.lib.preintegration.AngularVelocityIncrement.stamp"]], "stamps (navlie.lib.preintegration.angularvelocityincrement attribute)": [[94, "navlie.lib.preintegration.AngularVelocityIncrement.stamps"]], "state_id (navlie.lib.preintegration.angularvelocityincrement attribute)": [[94, "navlie.lib.preintegration.AngularVelocityIncrement.state_id"]], "symmetrize() (navlie.lib.preintegration.angularvelocityincrement method)": [[94, "navlie.lib.preintegration.AngularVelocityIncrement.symmetrize"]], "update_bias() (navlie.lib.preintegration.angularvelocityincrement method)": [[94, "navlie.lib.preintegration.AngularVelocityIncrement.update_bias"]], "value (navlie.lib.preintegration.angularvelocityincrement property)": [[94, "navlie.lib.preintegration.AngularVelocityIncrement.value"]], "bodyvelocityincrement (class in navlie.lib.preintegration)": [[95, "navlie.lib.preintegration.BodyVelocityIncrement"]], "copy() (navlie.lib.preintegration.bodyvelocityincrement method)": [[95, "navlie.lib.preintegration.BodyVelocityIncrement.copy"]], "covariance (navlie.lib.preintegration.bodyvelocityincrement attribute)": [[95, "navlie.lib.preintegration.BodyVelocityIncrement.covariance"]], "dof (navlie.lib.preintegration.bodyvelocityincrement attribute)": [[95, "navlie.lib.preintegration.BodyVelocityIncrement.dof"]], "increment() (navlie.lib.preintegration.bodyvelocityincrement method)": [[95, "navlie.lib.preintegration.BodyVelocityIncrement.increment"]], "new() (navlie.lib.preintegration.bodyvelocityincrement method)": [[95, "navlie.lib.preintegration.BodyVelocityIncrement.new"]], "plus() (navlie.lib.preintegration.bodyvelocityincrement method)": [[95, "navlie.lib.preintegration.BodyVelocityIncrement.plus"]], "stamp (navlie.lib.preintegration.bodyvelocityincrement property)": [[95, "navlie.lib.preintegration.BodyVelocityIncrement.stamp"]], "stamps (navlie.lib.preintegration.bodyvelocityincrement attribute)": [[95, "navlie.lib.preintegration.BodyVelocityIncrement.stamps"]], "state_id (navlie.lib.preintegration.bodyvelocityincrement attribute)": [[95, "navlie.lib.preintegration.BodyVelocityIncrement.state_id"]], "symmetrize() (navlie.lib.preintegration.bodyvelocityincrement method)": [[95, "navlie.lib.preintegration.BodyVelocityIncrement.symmetrize"]], "update_bias() (navlie.lib.preintegration.bodyvelocityincrement method)": [[95, "navlie.lib.preintegration.BodyVelocityIncrement.update_bias"]], "value (navlie.lib.preintegration.bodyvelocityincrement property)": [[95, "navlie.lib.preintegration.BodyVelocityIncrement.value"]], "imuincrement (class in navlie.lib.preintegration)": [[96, "navlie.lib.preintegration.IMUIncrement"]], "accel_bias (navlie.lib.preintegration.imuincrement property)": [[96, "navlie.lib.preintegration.IMUIncrement.accel_bias"]], "bias_jacobian (navlie.lib.preintegration.imuincrement attribute)": [[96, "navlie.lib.preintegration.IMUIncrement.bias_jacobian"]], "copy() (navlie.lib.preintegration.imuincrement method)": [[96, "navlie.lib.preintegration.IMUIncrement.copy"]], "covariance (navlie.lib.preintegration.imuincrement attribute)": [[96, "navlie.lib.preintegration.IMUIncrement.covariance"]], "dof (navlie.lib.preintegration.imuincrement attribute)": [[96, "navlie.lib.preintegration.IMUIncrement.dof"]], "gravity (navlie.lib.preintegration.imuincrement attribute)": [[96, "navlie.lib.preintegration.IMUIncrement.gravity"]], "gyro_bias (navlie.lib.preintegration.imuincrement property)": [[96, "navlie.lib.preintegration.IMUIncrement.gyro_bias"]], "increment() (navlie.lib.preintegration.imuincrement method)": [[96, "navlie.lib.preintegration.IMUIncrement.increment"]], "input_covariance (navlie.lib.preintegration.imuincrement attribute)": [[96, "navlie.lib.preintegration.IMUIncrement.input_covariance"]], "new() (navlie.lib.preintegration.imuincrement method)": [[96, "navlie.lib.preintegration.IMUIncrement.new"]], "new_bias (navlie.lib.preintegration.imuincrement attribute)": [[96, "navlie.lib.preintegration.IMUIncrement.new_bias"]], "original_bias (navlie.lib.preintegration.imuincrement attribute)": [[96, "navlie.lib.preintegration.IMUIncrement.original_bias"]], "original_value (navlie.lib.preintegration.imuincrement attribute)": [[96, "navlie.lib.preintegration.IMUIncrement.original_value"]], "plus() (navlie.lib.preintegration.imuincrement method)": [[96, "navlie.lib.preintegration.IMUIncrement.plus"]], "stamp (navlie.lib.preintegration.imuincrement property)": [[96, "navlie.lib.preintegration.IMUIncrement.stamp"]], "stamps (navlie.lib.preintegration.imuincrement attribute)": [[96, "navlie.lib.preintegration.IMUIncrement.stamps"]], "state_id (navlie.lib.preintegration.imuincrement attribute)": [[96, "navlie.lib.preintegration.IMUIncrement.state_id"]], "symmetrize() (navlie.lib.preintegration.imuincrement method)": [[96, "navlie.lib.preintegration.IMUIncrement.symmetrize"]], "update_bias() (navlie.lib.preintegration.imuincrement method)": [[96, "navlie.lib.preintegration.IMUIncrement.update_bias"]], "value (navlie.lib.preintegration.imuincrement property)": [[96, "navlie.lib.preintegration.IMUIncrement.value"]], "linearincrement (class in navlie.lib.preintegration)": [[97, "navlie.lib.preintegration.LinearIncrement"]], "bias_jacobian (navlie.lib.preintegration.linearincrement attribute)": [[97, "navlie.lib.preintegration.LinearIncrement.bias_jacobian"]], "copy() (navlie.lib.preintegration.linearincrement method)": [[97, "navlie.lib.preintegration.LinearIncrement.copy"]], "covariance (navlie.lib.preintegration.linearincrement attribute)": [[97, "navlie.lib.preintegration.LinearIncrement.covariance"]], "dof (navlie.lib.preintegration.linearincrement attribute)": [[97, "navlie.lib.preintegration.LinearIncrement.dof"]], "increment() (navlie.lib.preintegration.linearincrement method)": [[97, "navlie.lib.preintegration.LinearIncrement.increment"]], "new() (navlie.lib.preintegration.linearincrement method)": [[97, "navlie.lib.preintegration.LinearIncrement.new"]], "new_bias (navlie.lib.preintegration.linearincrement attribute)": [[97, "navlie.lib.preintegration.LinearIncrement.new_bias"]], "original_bias (navlie.lib.preintegration.linearincrement attribute)": [[97, "navlie.lib.preintegration.LinearIncrement.original_bias"]], "original_value (navlie.lib.preintegration.linearincrement attribute)": [[97, "navlie.lib.preintegration.LinearIncrement.original_value"]], "plus() (navlie.lib.preintegration.linearincrement method)": [[97, "navlie.lib.preintegration.LinearIncrement.plus"]], "stamp (navlie.lib.preintegration.linearincrement property)": [[97, "navlie.lib.preintegration.LinearIncrement.stamp"]], "stamps (navlie.lib.preintegration.linearincrement attribute)": [[97, "navlie.lib.preintegration.LinearIncrement.stamps"]], "state_id (navlie.lib.preintegration.linearincrement attribute)": [[97, "navlie.lib.preintegration.LinearIncrement.state_id"]], "symmetrize() (navlie.lib.preintegration.linearincrement method)": [[97, "navlie.lib.preintegration.LinearIncrement.symmetrize"]], "update_bias() (navlie.lib.preintegration.linearincrement method)": [[97, "navlie.lib.preintegration.LinearIncrement.update_bias"]], "value (navlie.lib.preintegration.linearincrement property)": [[97, "navlie.lib.preintegration.LinearIncrement.value"]], "preintegratedangularvelocity (class in navlie.lib.preintegration)": [[98, "navlie.lib.preintegration.PreintegratedAngularVelocity"]], "covariance() (navlie.lib.preintegration.preintegratedangularvelocity method)": [[98, "navlie.lib.preintegration.PreintegratedAngularVelocity.covariance"]], "evaluate() (navlie.lib.preintegration.preintegratedangularvelocity method)": [[98, "navlie.lib.preintegration.PreintegratedAngularVelocity.evaluate"]], "evaluate_with_jacobian() (navlie.lib.preintegration.preintegratedangularvelocity method)": [[98, "navlie.lib.preintegration.PreintegratedAngularVelocity.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.preintegration.preintegratedangularvelocity method)": [[98, "navlie.lib.preintegration.PreintegratedAngularVelocity.input_covariance"]], "input_jacobian_fd() (navlie.lib.preintegration.preintegratedangularvelocity method)": [[98, "navlie.lib.preintegration.PreintegratedAngularVelocity.input_jacobian_fd"]], "jacobian() (navlie.lib.preintegration.preintegratedangularvelocity method)": [[98, "navlie.lib.preintegration.PreintegratedAngularVelocity.jacobian"]], "jacobian_fd() (navlie.lib.preintegration.preintegratedangularvelocity method)": [[98, "navlie.lib.preintegration.PreintegratedAngularVelocity.jacobian_fd"]], "sqrt_information() (navlie.lib.preintegration.preintegratedangularvelocity method)": [[98, "navlie.lib.preintegration.PreintegratedAngularVelocity.sqrt_information"]], "preintegratedbodyvelocity (class in navlie.lib.preintegration)": [[99, "navlie.lib.preintegration.PreintegratedBodyVelocity"]], "covariance() (navlie.lib.preintegration.preintegratedbodyvelocity method)": [[99, "navlie.lib.preintegration.PreintegratedBodyVelocity.covariance"]], "evaluate() (navlie.lib.preintegration.preintegratedbodyvelocity method)": [[99, "navlie.lib.preintegration.PreintegratedBodyVelocity.evaluate"]], "evaluate_with_jacobian() (navlie.lib.preintegration.preintegratedbodyvelocity method)": [[99, "navlie.lib.preintegration.PreintegratedBodyVelocity.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.preintegration.preintegratedbodyvelocity method)": [[99, "navlie.lib.preintegration.PreintegratedBodyVelocity.input_covariance"]], "input_jacobian_fd() (navlie.lib.preintegration.preintegratedbodyvelocity method)": [[99, "navlie.lib.preintegration.PreintegratedBodyVelocity.input_jacobian_fd"]], "jacobian() (navlie.lib.preintegration.preintegratedbodyvelocity method)": [[99, "navlie.lib.preintegration.PreintegratedBodyVelocity.jacobian"]], "jacobian_fd() (navlie.lib.preintegration.preintegratedbodyvelocity method)": [[99, "navlie.lib.preintegration.PreintegratedBodyVelocity.jacobian_fd"]], "sqrt_information() (navlie.lib.preintegration.preintegratedbodyvelocity method)": [[99, "navlie.lib.preintegration.PreintegratedBodyVelocity.sqrt_information"]], "preintegratedimukinematics (class in navlie.lib.preintegration)": [[100, "navlie.lib.preintegration.PreintegratedIMUKinematics"]], "covariance() (navlie.lib.preintegration.preintegratedimukinematics method)": [[100, "navlie.lib.preintegration.PreintegratedIMUKinematics.covariance"]], "evaluate() (navlie.lib.preintegration.preintegratedimukinematics method)": [[100, "navlie.lib.preintegration.PreintegratedIMUKinematics.evaluate"]], "evaluate_with_jacobian() (navlie.lib.preintegration.preintegratedimukinematics method)": [[100, "navlie.lib.preintegration.PreintegratedIMUKinematics.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.preintegration.preintegratedimukinematics method)": [[100, "navlie.lib.preintegration.PreintegratedIMUKinematics.input_covariance"]], "input_jacobian_fd() (navlie.lib.preintegration.preintegratedimukinematics method)": [[100, "navlie.lib.preintegration.PreintegratedIMUKinematics.input_jacobian_fd"]], "jacobian() (navlie.lib.preintegration.preintegratedimukinematics method)": [[100, "navlie.lib.preintegration.PreintegratedIMUKinematics.jacobian"]], "jacobian_fd() (navlie.lib.preintegration.preintegratedimukinematics method)": [[100, "navlie.lib.preintegration.PreintegratedIMUKinematics.jacobian_fd"]], "sqrt_information() (navlie.lib.preintegration.preintegratedimukinematics method)": [[100, "navlie.lib.preintegration.PreintegratedIMUKinematics.sqrt_information"]], "preintegratedlinearmodel (class in navlie.lib.preintegration)": [[101, "navlie.lib.preintegration.PreintegratedLinearModel"]], "covariance() (navlie.lib.preintegration.preintegratedlinearmodel method)": [[101, "navlie.lib.preintegration.PreintegratedLinearModel.covariance"]], "evaluate() (navlie.lib.preintegration.preintegratedlinearmodel method)": [[101, "navlie.lib.preintegration.PreintegratedLinearModel.evaluate"]], "evaluate_with_jacobian() (navlie.lib.preintegration.preintegratedlinearmodel method)": [[101, "navlie.lib.preintegration.PreintegratedLinearModel.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.preintegration.preintegratedlinearmodel method)": [[101, "navlie.lib.preintegration.PreintegratedLinearModel.input_covariance"]], "input_jacobian_fd() (navlie.lib.preintegration.preintegratedlinearmodel method)": [[101, "navlie.lib.preintegration.PreintegratedLinearModel.input_jacobian_fd"]], "jacobian() (navlie.lib.preintegration.preintegratedlinearmodel method)": [[101, "navlie.lib.preintegration.PreintegratedLinearModel.jacobian"]], "jacobian_fd() (navlie.lib.preintegration.preintegratedlinearmodel method)": [[101, "navlie.lib.preintegration.PreintegratedLinearModel.jacobian_fd"]], "sqrt_information() (navlie.lib.preintegration.preintegratedlinearmodel method)": [[101, "navlie.lib.preintegration.PreintegratedLinearModel.sqrt_information"]], "preintegratedwheelodometry (class in navlie.lib.preintegration)": [[102, "navlie.lib.preintegration.PreintegratedWheelOdometry"]], "covariance() (navlie.lib.preintegration.preintegratedwheelodometry method)": [[102, "navlie.lib.preintegration.PreintegratedWheelOdometry.covariance"]], "evaluate() (navlie.lib.preintegration.preintegratedwheelodometry method)": [[102, "navlie.lib.preintegration.PreintegratedWheelOdometry.evaluate"]], "evaluate_with_jacobian() (navlie.lib.preintegration.preintegratedwheelodometry method)": [[102, "navlie.lib.preintegration.PreintegratedWheelOdometry.evaluate_with_jacobian"]], "input_covariance() (navlie.lib.preintegration.preintegratedwheelodometry method)": [[102, "navlie.lib.preintegration.PreintegratedWheelOdometry.input_covariance"]], "input_jacobian_fd() (navlie.lib.preintegration.preintegratedwheelodometry method)": [[102, "navlie.lib.preintegration.PreintegratedWheelOdometry.input_jacobian_fd"]], "jacobian() (navlie.lib.preintegration.preintegratedwheelodometry method)": [[102, "navlie.lib.preintegration.PreintegratedWheelOdometry.jacobian"]], "jacobian_fd() (navlie.lib.preintegration.preintegratedwheelodometry method)": [[102, "navlie.lib.preintegration.PreintegratedWheelOdometry.jacobian_fd"]], "sqrt_information() (navlie.lib.preintegration.preintegratedwheelodometry method)": [[102, "navlie.lib.preintegration.PreintegratedWheelOdometry.sqrt_information"]], "relativemotionincrement (class in navlie.lib.preintegration)": [[103, "navlie.lib.preintegration.RelativeMotionIncrement"]], "copy() (navlie.lib.preintegration.relativemotionincrement method)": [[103, "navlie.lib.preintegration.RelativeMotionIncrement.copy"]], "covariance (navlie.lib.preintegration.relativemotionincrement attribute)": [[103, "navlie.lib.preintegration.RelativeMotionIncrement.covariance"]], "dof (navlie.lib.preintegration.relativemotionincrement attribute)": [[103, "navlie.lib.preintegration.RelativeMotionIncrement.dof"]], "increment() (navlie.lib.preintegration.relativemotionincrement method)": [[103, "navlie.lib.preintegration.RelativeMotionIncrement.increment"]], "new() (navlie.lib.preintegration.relativemotionincrement method)": [[103, "navlie.lib.preintegration.RelativeMotionIncrement.new"]], "plus() (navlie.lib.preintegration.relativemotionincrement method)": [[103, "navlie.lib.preintegration.RelativeMotionIncrement.plus"]], "stamp (navlie.lib.preintegration.relativemotionincrement property)": [[103, "navlie.lib.preintegration.RelativeMotionIncrement.stamp"]], "stamps (navlie.lib.preintegration.relativemotionincrement attribute)": [[103, "navlie.lib.preintegration.RelativeMotionIncrement.stamps"]], "state_id (navlie.lib.preintegration.relativemotionincrement attribute)": [[103, "navlie.lib.preintegration.RelativeMotionIncrement.state_id"]], "symmetrize() (navlie.lib.preintegration.relativemotionincrement method)": [[103, "navlie.lib.preintegration.RelativeMotionIncrement.symmetrize"]], "update_bias() (navlie.lib.preintegration.relativemotionincrement method)": [[103, "navlie.lib.preintegration.RelativeMotionIncrement.update_bias"]], "wheelodometryincrement (class in navlie.lib.preintegration)": [[104, "navlie.lib.preintegration.WheelOdometryIncrement"]], "copy() (navlie.lib.preintegration.wheelodometryincrement method)": [[104, "navlie.lib.preintegration.WheelOdometryIncrement.copy"]], "covariance (navlie.lib.preintegration.wheelodometryincrement attribute)": [[104, "navlie.lib.preintegration.WheelOdometryIncrement.covariance"]], "dof (navlie.lib.preintegration.wheelodometryincrement attribute)": [[104, "navlie.lib.preintegration.WheelOdometryIncrement.dof"]], "increment() (navlie.lib.preintegration.wheelodometryincrement method)": [[104, "navlie.lib.preintegration.WheelOdometryIncrement.increment"]], "new() (navlie.lib.preintegration.wheelodometryincrement method)": [[104, "navlie.lib.preintegration.WheelOdometryIncrement.new"]], "original_value (navlie.lib.preintegration.wheelodometryincrement attribute)": [[104, "navlie.lib.preintegration.WheelOdometryIncrement.original_value"]], "plus() (navlie.lib.preintegration.wheelodometryincrement method)": [[104, "navlie.lib.preintegration.WheelOdometryIncrement.plus"]], "stamp (navlie.lib.preintegration.wheelodometryincrement property)": [[104, "navlie.lib.preintegration.WheelOdometryIncrement.stamp"]], "stamps (navlie.lib.preintegration.wheelodometryincrement attribute)": [[104, "navlie.lib.preintegration.WheelOdometryIncrement.stamps"]], "state_id (navlie.lib.preintegration.wheelodometryincrement attribute)": [[104, "navlie.lib.preintegration.WheelOdometryIncrement.state_id"]], "symmetrize() (navlie.lib.preintegration.wheelodometryincrement method)": [[104, "navlie.lib.preintegration.WheelOdometryIncrement.symmetrize"]], "update_bias() (navlie.lib.preintegration.wheelodometryincrement method)": [[104, "navlie.lib.preintegration.WheelOdometryIncrement.update_bias"]], "value (navlie.lib.preintegration.wheelodometryincrement property)": [[104, "navlie.lib.preintegration.WheelOdometryIncrement.value"]], "navlie.lib.states": [[105, "module-navlie.lib.states"]], "matrixliegroupstate (class in navlie.lib.states)": [[106, "navlie.lib.states.MatrixLieGroupState"]], "attitude (navlie.lib.states.matrixliegroupstate property)": [[106, "navlie.lib.states.MatrixLieGroupState.attitude"]], "copy() (navlie.lib.states.matrixliegroupstate method)": [[106, "navlie.lib.states.MatrixLieGroupState.copy"]], "direction (navlie.lib.states.matrixliegroupstate attribute)": [[106, "navlie.lib.states.MatrixLieGroupState.direction"]], "dof (navlie.lib.states.matrixliegroupstate attribute)": [[106, "navlie.lib.states.MatrixLieGroupState.dof"]], "dot() (navlie.lib.states.matrixliegroupstate method)": [[106, "navlie.lib.states.MatrixLieGroupState.dot"]], "group (navlie.lib.states.matrixliegroupstate attribute)": [[106, "navlie.lib.states.MatrixLieGroupState.group"]], "jacobian_from_blocks() (navlie.lib.states.matrixliegroupstate method)": [[106, "navlie.lib.states.MatrixLieGroupState.jacobian_from_blocks"]], "minus() (navlie.lib.states.matrixliegroupstate method)": [[106, "navlie.lib.states.MatrixLieGroupState.minus"]], "minus_jacobian() (navlie.lib.states.matrixliegroupstate method)": [[106, "navlie.lib.states.MatrixLieGroupState.minus_jacobian"]], "minus_jacobian_fd() (navlie.lib.states.matrixliegroupstate method)": [[106, "navlie.lib.states.MatrixLieGroupState.minus_jacobian_fd"]], "plus() (navlie.lib.states.matrixliegroupstate method)": [[106, "navlie.lib.states.MatrixLieGroupState.plus"]], "plus_jacobian() (navlie.lib.states.matrixliegroupstate method)": [[106, "navlie.lib.states.MatrixLieGroupState.plus_jacobian"]], "plus_jacobian_fd() (navlie.lib.states.matrixliegroupstate method)": [[106, "navlie.lib.states.MatrixLieGroupState.plus_jacobian_fd"]], "position (navlie.lib.states.matrixliegroupstate property)": [[106, "navlie.lib.states.MatrixLieGroupState.position"]], "stamp (navlie.lib.states.matrixliegroupstate attribute)": [[106, "navlie.lib.states.MatrixLieGroupState.stamp"]], "state_id (navlie.lib.states.matrixliegroupstate attribute)": [[106, "navlie.lib.states.MatrixLieGroupState.state_id"]], "value (navlie.lib.states.matrixliegroupstate attribute)": [[106, "navlie.lib.states.MatrixLieGroupState.value"]], "velocity (navlie.lib.states.matrixliegroupstate property)": [[106, "navlie.lib.states.MatrixLieGroupState.velocity"]], "mixturestate (class in navlie.lib.states)": [[107, "navlie.lib.states.MixtureState"]], "copy() (navlie.lib.states.mixturestate method)": [[107, "navlie.lib.states.MixtureState.copy"]], "model_probabilities (navlie.lib.states.mixturestate attribute)": [[107, "navlie.lib.states.MixtureState.model_probabilities"]], "model_states (navlie.lib.states.mixturestate attribute)": [[107, "navlie.lib.states.MixtureState.model_states"]], "stamp (navlie.lib.states.mixturestate property)": [[107, "navlie.lib.states.MixtureState.stamp"]], "se23state (class in navlie.lib.states)": [[108, "navlie.lib.states.SE23State"]], "attitude (navlie.lib.states.se23state property)": [[108, "navlie.lib.states.SE23State.attitude"]], "copy() (navlie.lib.states.se23state method)": [[108, "navlie.lib.states.SE23State.copy"]], "direction (navlie.lib.states.se23state attribute)": [[108, "navlie.lib.states.SE23State.direction"]], "dof (navlie.lib.states.se23state attribute)": [[108, "navlie.lib.states.SE23State.dof"]], "dot() (navlie.lib.states.se23state method)": [[108, "navlie.lib.states.SE23State.dot"]], "group (navlie.lib.states.se23state attribute)": [[108, "navlie.lib.states.SE23State.group"]], "jacobian_from_blocks() (navlie.lib.states.se23state static method)": [[108, "navlie.lib.states.SE23State.jacobian_from_blocks"]], "minus() (navlie.lib.states.se23state method)": [[108, "navlie.lib.states.SE23State.minus"]], "minus_jacobian() (navlie.lib.states.se23state method)": [[108, "navlie.lib.states.SE23State.minus_jacobian"]], "minus_jacobian_fd() (navlie.lib.states.se23state method)": [[108, "navlie.lib.states.SE23State.minus_jacobian_fd"]], "plus() (navlie.lib.states.se23state method)": [[108, "navlie.lib.states.SE23State.plus"]], "plus_jacobian() (navlie.lib.states.se23state method)": [[108, "navlie.lib.states.SE23State.plus_jacobian"]], "plus_jacobian_fd() (navlie.lib.states.se23state method)": [[108, "navlie.lib.states.SE23State.plus_jacobian_fd"]], "pose (navlie.lib.states.se23state property)": [[108, "navlie.lib.states.SE23State.pose"]], "position (navlie.lib.states.se23state property)": [[108, "navlie.lib.states.SE23State.position"]], "random() (navlie.lib.states.se23state static method)": [[108, "navlie.lib.states.SE23State.random"]], "stamp (navlie.lib.states.se23state attribute)": [[108, "navlie.lib.states.SE23State.stamp"]], "state_id (navlie.lib.states.se23state attribute)": [[108, "navlie.lib.states.SE23State.state_id"]], "value (navlie.lib.states.se23state attribute)": [[108, "navlie.lib.states.SE23State.value"]], "velocity (navlie.lib.states.se23state property)": [[108, "navlie.lib.states.SE23State.velocity"]], "se2state (class in navlie.lib.states)": [[109, "navlie.lib.states.SE2State"]], "attitude (navlie.lib.states.se2state property)": [[109, "navlie.lib.states.SE2State.attitude"]], "copy() (navlie.lib.states.se2state method)": [[109, "navlie.lib.states.SE2State.copy"]], "direction (navlie.lib.states.se2state attribute)": [[109, "navlie.lib.states.SE2State.direction"]], "dof (navlie.lib.states.se2state attribute)": [[109, "navlie.lib.states.SE2State.dof"]], "dot() (navlie.lib.states.se2state method)": [[109, "navlie.lib.states.SE2State.dot"]], "group (navlie.lib.states.se2state attribute)": [[109, "navlie.lib.states.SE2State.group"]], "jacobian_from_blocks() (navlie.lib.states.se2state static method)": [[109, "navlie.lib.states.SE2State.jacobian_from_blocks"]], "minus() (navlie.lib.states.se2state method)": [[109, "navlie.lib.states.SE2State.minus"]], "minus_jacobian() (navlie.lib.states.se2state method)": [[109, "navlie.lib.states.SE2State.minus_jacobian"]], "minus_jacobian_fd() (navlie.lib.states.se2state method)": [[109, "navlie.lib.states.SE2State.minus_jacobian_fd"]], "plus() (navlie.lib.states.se2state method)": [[109, "navlie.lib.states.SE2State.plus"]], "plus_jacobian() (navlie.lib.states.se2state method)": [[109, "navlie.lib.states.SE2State.plus_jacobian"]], "plus_jacobian_fd() (navlie.lib.states.se2state method)": [[109, "navlie.lib.states.SE2State.plus_jacobian_fd"]], "pose (navlie.lib.states.se2state property)": [[109, "navlie.lib.states.SE2State.pose"]], "position (navlie.lib.states.se2state property)": [[109, "navlie.lib.states.SE2State.position"]], "random() (navlie.lib.states.se2state static method)": [[109, "navlie.lib.states.SE2State.random"]], "stamp (navlie.lib.states.se2state attribute)": [[109, "navlie.lib.states.SE2State.stamp"]], "state_id (navlie.lib.states.se2state attribute)": [[109, "navlie.lib.states.SE2State.state_id"]], "value (navlie.lib.states.se2state attribute)": [[109, "navlie.lib.states.SE2State.value"]], "velocity (navlie.lib.states.se2state property)": [[109, "navlie.lib.states.SE2State.velocity"]], "se3state (class in navlie.lib.states)": [[110, "navlie.lib.states.SE3State"]], "attitude (navlie.lib.states.se3state property)": [[110, "navlie.lib.states.SE3State.attitude"]], "copy() (navlie.lib.states.se3state method)": [[110, "navlie.lib.states.SE3State.copy"]], "direction (navlie.lib.states.se3state attribute)": [[110, "navlie.lib.states.SE3State.direction"]], "dof (navlie.lib.states.se3state attribute)": [[110, "navlie.lib.states.SE3State.dof"]], "dot() (navlie.lib.states.se3state method)": [[110, "navlie.lib.states.SE3State.dot"]], "from_ros() (navlie.lib.states.se3state static method)": [[110, "navlie.lib.states.SE3State.from_ros"]], "group (navlie.lib.states.se3state attribute)": [[110, "navlie.lib.states.SE3State.group"]], "jacobian_from_blocks() (navlie.lib.states.se3state static method)": [[110, "navlie.lib.states.SE3State.jacobian_from_blocks"]], "minus() (navlie.lib.states.se3state method)": [[110, "navlie.lib.states.SE3State.minus"]], "minus_jacobian() (navlie.lib.states.se3state method)": [[110, "navlie.lib.states.SE3State.minus_jacobian"]], "minus_jacobian_fd() (navlie.lib.states.se3state method)": [[110, "navlie.lib.states.SE3State.minus_jacobian_fd"]], "plus() (navlie.lib.states.se3state method)": [[110, "navlie.lib.states.SE3State.plus"]], "plus_jacobian() (navlie.lib.states.se3state method)": [[110, "navlie.lib.states.SE3State.plus_jacobian"]], "plus_jacobian_fd() (navlie.lib.states.se3state method)": [[110, "navlie.lib.states.SE3State.plus_jacobian_fd"]], "position (navlie.lib.states.se3state property)": [[110, "navlie.lib.states.SE3State.position"]], "random() (navlie.lib.states.se3state static method)": [[110, "navlie.lib.states.SE3State.random"]], "stamp (navlie.lib.states.se3state attribute)": [[110, "navlie.lib.states.SE3State.stamp"]], "state_id (navlie.lib.states.se3state attribute)": [[110, "navlie.lib.states.SE3State.state_id"]], "to_ros() (navlie.lib.states.se3state method)": [[110, "navlie.lib.states.SE3State.to_ros"]], "value (navlie.lib.states.se3state attribute)": [[110, "navlie.lib.states.SE3State.value"]], "velocity (navlie.lib.states.se3state property)": [[110, "navlie.lib.states.SE3State.velocity"]], "sl3state (class in navlie.lib.states)": [[111, "navlie.lib.states.SL3State"]], "attitude (navlie.lib.states.sl3state property)": [[111, "navlie.lib.states.SL3State.attitude"]], "copy() (navlie.lib.states.sl3state method)": [[111, "navlie.lib.states.SL3State.copy"]], "direction (navlie.lib.states.sl3state attribute)": [[111, "navlie.lib.states.SL3State.direction"]], "dof (navlie.lib.states.sl3state attribute)": [[111, "navlie.lib.states.SL3State.dof"]], "dot() (navlie.lib.states.sl3state method)": [[111, "navlie.lib.states.SL3State.dot"]], "group (navlie.lib.states.sl3state attribute)": [[111, "navlie.lib.states.SL3State.group"]], "jacobian_from_blocks() (navlie.lib.states.sl3state method)": [[111, "navlie.lib.states.SL3State.jacobian_from_blocks"]], "minus() (navlie.lib.states.sl3state method)": [[111, "navlie.lib.states.SL3State.minus"]], "minus_jacobian() (navlie.lib.states.sl3state method)": [[111, "navlie.lib.states.SL3State.minus_jacobian"]], "minus_jacobian_fd() (navlie.lib.states.sl3state method)": [[111, "navlie.lib.states.SL3State.minus_jacobian_fd"]], "plus() (navlie.lib.states.sl3state method)": [[111, "navlie.lib.states.SL3State.plus"]], "plus_jacobian() (navlie.lib.states.sl3state method)": [[111, "navlie.lib.states.SL3State.plus_jacobian"]], "plus_jacobian_fd() (navlie.lib.states.sl3state method)": [[111, "navlie.lib.states.SL3State.plus_jacobian_fd"]], "position (navlie.lib.states.sl3state property)": [[111, "navlie.lib.states.SL3State.position"]], "stamp (navlie.lib.states.sl3state attribute)": [[111, "navlie.lib.states.SL3State.stamp"]], "state_id (navlie.lib.states.sl3state attribute)": [[111, "navlie.lib.states.SL3State.state_id"]], "value (navlie.lib.states.sl3state attribute)": [[111, "navlie.lib.states.SL3State.value"]], "velocity (navlie.lib.states.sl3state property)": [[111, "navlie.lib.states.SL3State.velocity"]], "so2state (class in navlie.lib.states)": [[112, "navlie.lib.states.SO2State"]], "attitude (navlie.lib.states.so2state property)": [[112, "navlie.lib.states.SO2State.attitude"]], "copy() (navlie.lib.states.so2state method)": [[112, "navlie.lib.states.SO2State.copy"]], "direction (navlie.lib.states.so2state attribute)": [[112, "navlie.lib.states.SO2State.direction"]], "dof (navlie.lib.states.so2state attribute)": [[112, "navlie.lib.states.SO2State.dof"]], "dot() (navlie.lib.states.so2state method)": [[112, "navlie.lib.states.SO2State.dot"]], "group (navlie.lib.states.so2state attribute)": [[112, "navlie.lib.states.SO2State.group"]], "jacobian_from_blocks() (navlie.lib.states.so2state method)": [[112, "navlie.lib.states.SO2State.jacobian_from_blocks"]], "minus() (navlie.lib.states.so2state method)": [[112, "navlie.lib.states.SO2State.minus"]], "minus_jacobian() (navlie.lib.states.so2state method)": [[112, "navlie.lib.states.SO2State.minus_jacobian"]], "minus_jacobian_fd() (navlie.lib.states.so2state method)": [[112, "navlie.lib.states.SO2State.minus_jacobian_fd"]], "plus() (navlie.lib.states.so2state method)": [[112, "navlie.lib.states.SO2State.plus"]], "plus_jacobian() (navlie.lib.states.so2state method)": [[112, "navlie.lib.states.SO2State.plus_jacobian"]], "plus_jacobian_fd() (navlie.lib.states.so2state method)": [[112, "navlie.lib.states.SO2State.plus_jacobian_fd"]], "position (navlie.lib.states.so2state property)": [[112, "navlie.lib.states.SO2State.position"]], "random() (navlie.lib.states.so2state static method)": [[112, "navlie.lib.states.SO2State.random"]], "stamp (navlie.lib.states.so2state attribute)": [[112, "navlie.lib.states.SO2State.stamp"]], "state_id (navlie.lib.states.so2state attribute)": [[112, "navlie.lib.states.SO2State.state_id"]], "value (navlie.lib.states.so2state attribute)": [[112, "navlie.lib.states.SO2State.value"]], "velocity (navlie.lib.states.so2state property)": [[112, "navlie.lib.states.SO2State.velocity"]], "so3state (class in navlie.lib.states)": [[113, "navlie.lib.states.SO3State"]], "attitude (navlie.lib.states.so3state property)": [[113, "navlie.lib.states.SO3State.attitude"]], "copy() (navlie.lib.states.so3state method)": [[113, "navlie.lib.states.SO3State.copy"]], "direction (navlie.lib.states.so3state attribute)": [[113, "navlie.lib.states.SO3State.direction"]], "dof (navlie.lib.states.so3state attribute)": [[113, "navlie.lib.states.SO3State.dof"]], "dot() (navlie.lib.states.so3state method)": [[113, "navlie.lib.states.SO3State.dot"]], "from_ros() (navlie.lib.states.so3state static method)": [[113, "navlie.lib.states.SO3State.from_ros"]], "group (navlie.lib.states.so3state attribute)": [[113, "navlie.lib.states.SO3State.group"]], "jacobian_from_blocks() (navlie.lib.states.so3state static method)": [[113, "navlie.lib.states.SO3State.jacobian_from_blocks"]], "minus() (navlie.lib.states.so3state method)": [[113, "navlie.lib.states.SO3State.minus"]], "minus_jacobian() (navlie.lib.states.so3state method)": [[113, "navlie.lib.states.SO3State.minus_jacobian"]], "minus_jacobian_fd() (navlie.lib.states.so3state method)": [[113, "navlie.lib.states.SO3State.minus_jacobian_fd"]], "plus() (navlie.lib.states.so3state method)": [[113, "navlie.lib.states.SO3State.plus"]], "plus_jacobian() (navlie.lib.states.so3state method)": [[113, "navlie.lib.states.SO3State.plus_jacobian"]], "plus_jacobian_fd() (navlie.lib.states.so3state method)": [[113, "navlie.lib.states.SO3State.plus_jacobian_fd"]], "position (navlie.lib.states.so3state property)": [[113, "navlie.lib.states.SO3State.position"]], "random() (navlie.lib.states.so3state static method)": [[113, "navlie.lib.states.SO3State.random"]], "stamp (navlie.lib.states.so3state attribute)": [[113, "navlie.lib.states.SO3State.stamp"]], "state_id (navlie.lib.states.so3state attribute)": [[113, "navlie.lib.states.SO3State.state_id"]], "to_ros() (navlie.lib.states.so3state method)": [[113, "navlie.lib.states.SO3State.to_ros"]], "value (navlie.lib.states.so3state attribute)": [[113, "navlie.lib.states.SO3State.value"]], "velocity (navlie.lib.states.so3state property)": [[113, "navlie.lib.states.SO3State.velocity"]], "stampedvalue (class in navlie.lib.states)": [[114, "navlie.lib.states.StampedValue"]], "copy() (navlie.lib.states.stampedvalue method)": [[114, "navlie.lib.states.StampedValue.copy"]], "covariance (navlie.lib.states.stampedvalue attribute)": [[114, "navlie.lib.states.StampedValue.covariance"]], "dof (navlie.lib.states.stampedvalue attribute)": [[114, "navlie.lib.states.StampedValue.dof"]], "plus() (navlie.lib.states.stampedvalue method)": [[114, "navlie.lib.states.StampedValue.plus"]], "stamp (navlie.lib.states.stampedvalue attribute)": [[114, "navlie.lib.states.StampedValue.stamp"]], "state_id (navlie.lib.states.stampedvalue attribute)": [[114, "navlie.lib.states.StampedValue.state_id"]], "value (navlie.lib.states.stampedvalue attribute)": [[114, "navlie.lib.states.StampedValue.value"]], "vectorinput (class in navlie.lib.states)": [[115, "navlie.lib.states.VectorInput"]], "copy() (navlie.lib.states.vectorinput method)": [[115, "navlie.lib.states.VectorInput.copy"]], "covariance (navlie.lib.states.vectorinput attribute)": [[115, "navlie.lib.states.VectorInput.covariance"]], "dof (navlie.lib.states.vectorinput attribute)": [[115, "navlie.lib.states.VectorInput.dof"]], "plus() (navlie.lib.states.vectorinput method)": [[115, "navlie.lib.states.VectorInput.plus"]], "stamp (navlie.lib.states.vectorinput attribute)": [[115, "navlie.lib.states.VectorInput.stamp"]], "state_id (navlie.lib.states.vectorinput attribute)": [[115, "navlie.lib.states.VectorInput.state_id"]], "value (navlie.lib.states.vectorinput attribute)": [[115, "navlie.lib.states.VectorInput.value"]], "vectorstate (class in navlie.lib.states)": [[116, "navlie.lib.states.VectorState"]], "copy() (navlie.lib.states.vectorstate method)": [[116, "navlie.lib.states.VectorState.copy"]], "dof (navlie.lib.states.vectorstate attribute)": [[116, "navlie.lib.states.VectorState.dof"]], "minus() (navlie.lib.states.vectorstate method)": [[116, "navlie.lib.states.VectorState.minus"]], "minus_jacobian() (navlie.lib.states.vectorstate method)": [[116, "navlie.lib.states.VectorState.minus_jacobian"]], "minus_jacobian_fd() (navlie.lib.states.vectorstate method)": [[116, "navlie.lib.states.VectorState.minus_jacobian_fd"]], "plus() (navlie.lib.states.vectorstate method)": [[116, "navlie.lib.states.VectorState.plus"]], "plus_jacobian() (navlie.lib.states.vectorstate method)": [[116, "navlie.lib.states.VectorState.plus_jacobian"]], "plus_jacobian_fd() (navlie.lib.states.vectorstate method)": [[116, "navlie.lib.states.VectorState.plus_jacobian_fd"]], "stamp (navlie.lib.states.vectorstate attribute)": [[116, "navlie.lib.states.VectorState.stamp"]], "state_id (navlie.lib.states.vectorstate attribute)": [[116, "navlie.lib.states.VectorState.state_id"]], "value (navlie.lib.states.vectorstate attribute)": [[116, "navlie.lib.states.VectorState.value"]], "navlie.types": [[117, "module-navlie.types"]], "dataset (class in navlie.types)": [[118, "navlie.types.Dataset"]], "get_ground_truth() (navlie.types.dataset method)": [[118, "navlie.types.Dataset.get_ground_truth"]], "get_input_data() (navlie.types.dataset method)": [[118, "navlie.types.Dataset.get_input_data"]], "get_measurement_data() (navlie.types.dataset method)": [[118, "navlie.types.Dataset.get_measurement_data"]], "input (class in navlie.types)": [[119, "navlie.types.Input"]], "copy() (navlie.types.input method)": [[119, "navlie.types.Input.copy"]], "covariance (navlie.types.input attribute)": [[119, "navlie.types.Input.covariance"]], "dof (navlie.types.input attribute)": [[119, "navlie.types.Input.dof"]], "plus() (navlie.types.input method)": [[119, "navlie.types.Input.plus"]], "stamp (navlie.types.input attribute)": [[119, "navlie.types.Input.stamp"]], "state_id (navlie.types.input attribute)": [[119, "navlie.types.Input.state_id"]], "measurement (class in navlie.types)": [[120, "navlie.types.Measurement"]], "minus() (navlie.types.measurement method)": [[120, "navlie.types.Measurement.minus"]], "model (navlie.types.measurement attribute)": [[120, "navlie.types.Measurement.model"]], "stamp (navlie.types.measurement attribute)": [[120, "navlie.types.Measurement.stamp"]], "state_id (navlie.types.measurement attribute)": [[120, "navlie.types.Measurement.state_id"]], "value (navlie.types.measurement attribute)": [[120, "navlie.types.Measurement.value"]], "measurementmodel (class in navlie.types)": [[121, "navlie.types.MeasurementModel"]], "covariance() (navlie.types.measurementmodel method)": [[121, "navlie.types.MeasurementModel.covariance"]], "evaluate() (navlie.types.measurementmodel method)": [[121, "navlie.types.MeasurementModel.evaluate"]], "evaluate_with_jacobian() (navlie.types.measurementmodel method)": [[121, "navlie.types.MeasurementModel.evaluate_with_jacobian"]], "jacobian() (navlie.types.measurementmodel method)": [[121, "navlie.types.MeasurementModel.jacobian"]], "jacobian_fd() (navlie.types.measurementmodel method)": [[121, "navlie.types.MeasurementModel.jacobian_fd"]], "sqrt_information() (navlie.types.measurementmodel method)": [[121, "navlie.types.MeasurementModel.sqrt_information"]], "processmodel (class in navlie.types)": [[122, "navlie.types.ProcessModel"]], "covariance() (navlie.types.processmodel method)": [[122, "navlie.types.ProcessModel.covariance"]], "evaluate() (navlie.types.processmodel method)": [[122, "navlie.types.ProcessModel.evaluate"]], "evaluate_with_jacobian() (navlie.types.processmodel method)": [[122, "navlie.types.ProcessModel.evaluate_with_jacobian"]], "input_covariance() (navlie.types.processmodel method)": [[122, "navlie.types.ProcessModel.input_covariance"]], "input_jacobian_fd() (navlie.types.processmodel method)": [[122, "navlie.types.ProcessModel.input_jacobian_fd"]], "jacobian() (navlie.types.processmodel method)": [[122, "navlie.types.ProcessModel.jacobian"]], "jacobian_fd() (navlie.types.processmodel method)": [[122, "navlie.types.ProcessModel.jacobian_fd"]], "sqrt_information() (navlie.types.processmodel method)": [[122, "navlie.types.ProcessModel.sqrt_information"]], "state (class in navlie.types)": [[123, "navlie.types.State"]], "copy() (navlie.types.state method)": [[123, "navlie.types.State.copy"]], "dof (navlie.types.state attribute)": [[123, "navlie.types.State.dof"]], "minus() (navlie.types.state method)": [[123, "navlie.types.State.minus"]], "minus_jacobian() (navlie.types.state method)": [[123, "navlie.types.State.minus_jacobian"]], "minus_jacobian_fd() (navlie.types.state method)": [[123, "navlie.types.State.minus_jacobian_fd"]], "plus() (navlie.types.state method)": [[123, "navlie.types.State.plus"]], "plus_jacobian() (navlie.types.state method)": [[123, "navlie.types.State.plus_jacobian"]], "plus_jacobian_fd() (navlie.types.state method)": [[123, "navlie.types.State.plus_jacobian_fd"]], "stamp (navlie.types.state attribute)": [[123, "navlie.types.State.stamp"]], "state_id (navlie.types.state attribute)": [[123, "navlie.types.State.state_id"]], "value (navlie.types.state attribute)": [[123, "navlie.types.State.value"]], "statewithcovariance (class in navlie.types)": [[124, "navlie.types.StateWithCovariance"]], "copy() (navlie.types.statewithcovariance method)": [[124, "navlie.types.StateWithCovariance.copy"]], "covariance (navlie.types.statewithcovariance attribute)": [[124, "navlie.types.StateWithCovariance.covariance"]], "stamp (navlie.types.statewithcovariance property)": [[124, "navlie.types.StateWithCovariance.stamp"]], "state (navlie.types.statewithcovariance attribute)": [[124, "navlie.types.StateWithCovariance.state"]], "symmetrize() (navlie.types.statewithcovariance method)": [[124, "navlie.types.StateWithCovariance.symmetrize"]], "navlie.utils": [[125, "module-navlie.utils"]], "navlie.utils.common": [[126, "module-navlie.utils.common"]], "gaussianresult (class in navlie.utils.common)": [[127, "navlie.utils.common.GaussianResult"]], "covariance (navlie.utils.common.gaussianresult attribute)": [[127, "navlie.utils.common.GaussianResult.covariance"]], "ees (navlie.utils.common.gaussianresult attribute)": [[127, "navlie.utils.common.GaussianResult.ees"]], "error (navlie.utils.common.gaussianresult attribute)": [[127, "navlie.utils.common.GaussianResult.error"]], "md (navlie.utils.common.gaussianresult attribute)": [[127, "navlie.utils.common.GaussianResult.md"]], "nees (navlie.utils.common.gaussianresult attribute)": [[127, "navlie.utils.common.GaussianResult.nees"]], "rmse (navlie.utils.common.gaussianresult attribute)": [[127, "navlie.utils.common.GaussianResult.rmse"]], "stamp (navlie.utils.common.gaussianresult attribute)": [[127, "navlie.utils.common.GaussianResult.stamp"]], "state (navlie.utils.common.gaussianresult attribute)": [[127, "navlie.utils.common.GaussianResult.state"]], "state_true (navlie.utils.common.gaussianresult attribute)": [[127, "navlie.utils.common.GaussianResult.state_true"]], "three_sigma (navlie.utils.common.gaussianresult attribute)": [[127, "navlie.utils.common.GaussianResult.three_sigma"]], "gaussianresultlist (class in navlie.utils.common)": [[128, "navlie.utils.common.GaussianResultList"]], "covariance (navlie.utils.common.gaussianresultlist attribute)": [[128, "navlie.utils.common.GaussianResultList.covariance"]], "dof (navlie.utils.common.gaussianresultlist attribute)": [[128, "navlie.utils.common.GaussianResultList.dof"]], "ees (navlie.utils.common.gaussianresultlist attribute)": [[128, "navlie.utils.common.GaussianResultList.ees"]], "error (navlie.utils.common.gaussianresultlist attribute)": [[128, "navlie.utils.common.GaussianResultList.error"]], "from_estimates() (navlie.utils.common.gaussianresultlist static method)": [[128, "navlie.utils.common.GaussianResultList.from_estimates"]], "md (navlie.utils.common.gaussianresultlist attribute)": [[128, "navlie.utils.common.GaussianResultList.md"]], "nees (navlie.utils.common.gaussianresultlist attribute)": [[128, "navlie.utils.common.GaussianResultList.nees"]], "nees_lower_bound() (navlie.utils.common.gaussianresultlist method)": [[128, "navlie.utils.common.GaussianResultList.nees_lower_bound"]], "nees_upper_bound() (navlie.utils.common.gaussianresultlist method)": [[128, "navlie.utils.common.GaussianResultList.nees_upper_bound"]], "rmse (navlie.utils.common.gaussianresultlist attribute)": [[128, "navlie.utils.common.GaussianResultList.rmse"]], "stamp (navlie.utils.common.gaussianresultlist attribute)": [[128, "navlie.utils.common.GaussianResultList.stamp"]], "state (navlie.utils.common.gaussianresultlist attribute)": [[128, "navlie.utils.common.GaussianResultList.state"]], "state_true (navlie.utils.common.gaussianresultlist attribute)": [[128, "navlie.utils.common.GaussianResultList.state_true"]], "three_sigma (navlie.utils.common.gaussianresultlist attribute)": [[128, "navlie.utils.common.GaussianResultList.three_sigma"]], "value (navlie.utils.common.gaussianresultlist attribute)": [[128, "navlie.utils.common.GaussianResultList.value"]], "value_true (navlie.utils.common.gaussianresultlist attribute)": [[128, "navlie.utils.common.GaussianResultList.value_true"]], "mixtureresult (class in navlie.utils.common)": [[129, "navlie.utils.common.MixtureResult"]], "covariance (navlie.utils.common.mixtureresult attribute)": [[129, "navlie.utils.common.MixtureResult.covariance"]], "ees (navlie.utils.common.mixtureresult attribute)": [[129, "navlie.utils.common.MixtureResult.ees"]], "error (navlie.utils.common.mixtureresult attribute)": [[129, "navlie.utils.common.MixtureResult.error"]], "md (navlie.utils.common.mixtureresult attribute)": [[129, "navlie.utils.common.MixtureResult.md"]], "model_probabilities (navlie.utils.common.mixtureresult attribute)": [[129, "navlie.utils.common.MixtureResult.model_probabilities"]], "nees (navlie.utils.common.mixtureresult attribute)": [[129, "navlie.utils.common.MixtureResult.nees"]], "rmse (navlie.utils.common.mixtureresult attribute)": [[129, "navlie.utils.common.MixtureResult.rmse"]], "stamp (navlie.utils.common.mixtureresult attribute)": [[129, "navlie.utils.common.MixtureResult.stamp"]], "state (navlie.utils.common.mixtureresult attribute)": [[129, "navlie.utils.common.MixtureResult.state"]], "state_true (navlie.utils.common.mixtureresult attribute)": [[129, "navlie.utils.common.MixtureResult.state_true"]], "three_sigma (navlie.utils.common.mixtureresult attribute)": [[129, "navlie.utils.common.MixtureResult.three_sigma"]], "mixtureresultlist (class in navlie.utils.common)": [[130, "navlie.utils.common.MixtureResultList"]], "covariance (navlie.utils.common.mixtureresultlist attribute)": [[130, "navlie.utils.common.MixtureResultList.covariance"]], "dof (navlie.utils.common.mixtureresultlist attribute)": [[130, "navlie.utils.common.MixtureResultList.dof"]], "ees (navlie.utils.common.mixtureresultlist attribute)": [[130, "navlie.utils.common.MixtureResultList.ees"]], "error (navlie.utils.common.mixtureresultlist attribute)": [[130, "navlie.utils.common.MixtureResultList.error"]], "from_estimates() (navlie.utils.common.mixtureresultlist static method)": [[130, "navlie.utils.common.MixtureResultList.from_estimates"]], "md (navlie.utils.common.mixtureresultlist attribute)": [[130, "navlie.utils.common.MixtureResultList.md"]], "model_probabilities (navlie.utils.common.mixtureresultlist attribute)": [[130, "navlie.utils.common.MixtureResultList.model_probabilities"]], "nees (navlie.utils.common.mixtureresultlist attribute)": [[130, "navlie.utils.common.MixtureResultList.nees"]], "nees_lower_bound() (navlie.utils.common.mixtureresultlist method)": [[130, "navlie.utils.common.MixtureResultList.nees_lower_bound"]], "nees_upper_bound() (navlie.utils.common.mixtureresultlist method)": [[130, "navlie.utils.common.MixtureResultList.nees_upper_bound"]], "rmse (navlie.utils.common.mixtureresultlist attribute)": [[130, "navlie.utils.common.MixtureResultList.rmse"]], "stamp (navlie.utils.common.mixtureresultlist attribute)": [[130, "navlie.utils.common.MixtureResultList.stamp"]], "state (navlie.utils.common.mixtureresultlist attribute)": [[130, "navlie.utils.common.MixtureResultList.state"]], "state_true (navlie.utils.common.mixtureresultlist attribute)": [[130, "navlie.utils.common.MixtureResultList.state_true"]], "three_sigma (navlie.utils.common.mixtureresultlist attribute)": [[130, "navlie.utils.common.MixtureResultList.three_sigma"]], "value (navlie.utils.common.mixtureresultlist attribute)": [[130, "navlie.utils.common.MixtureResultList.value"]], "value_true (navlie.utils.common.mixtureresultlist attribute)": [[130, "navlie.utils.common.MixtureResultList.value_true"]], "montecarloresult (class in navlie.utils.common)": [[131, "navlie.utils.common.MonteCarloResult"]], "average_ees (navlie.utils.common.montecarloresult attribute)": [[131, "navlie.utils.common.MonteCarloResult.average_ees"]], "average_nees (navlie.utils.common.montecarloresult attribute)": [[131, "navlie.utils.common.MonteCarloResult.average_nees"]], "dof (navlie.utils.common.montecarloresult attribute)": [[131, "navlie.utils.common.MonteCarloResult.dof"]], "expected_nees (navlie.utils.common.montecarloresult attribute)": [[131, "navlie.utils.common.MonteCarloResult.expected_nees"]], "nees_lower_bound() (navlie.utils.common.montecarloresult method)": [[131, "navlie.utils.common.MonteCarloResult.nees_lower_bound"]], "nees_upper_bound() (navlie.utils.common.montecarloresult method)": [[131, "navlie.utils.common.MonteCarloResult.nees_upper_bound"]], "num_trials (navlie.utils.common.montecarloresult attribute)": [[131, "navlie.utils.common.MonteCarloResult.num_trials"]], "rmse (navlie.utils.common.montecarloresult attribute)": [[131, "navlie.utils.common.MonteCarloResult.rmse"]], "stamp (navlie.utils.common.montecarloresult attribute)": [[131, "navlie.utils.common.MonteCarloResult.stamp"]], "total_rmse (navlie.utils.common.montecarloresult attribute)": [[131, "navlie.utils.common.MonteCarloResult.total_rmse"]], "trial_results (navlie.utils.common.montecarloresult attribute)": [[131, "navlie.utils.common.MonteCarloResult.trial_results"]], "associate_stamps() (in module navlie.utils.common)": [[132, "navlie.utils.common.associate_stamps"]], "find_nearest_stamp_idx() (in module navlie.utils.common)": [[133, "navlie.utils.common.find_nearest_stamp_idx"]], "jacobian() (in module navlie.utils.common)": [[134, "navlie.utils.common.jacobian"]], "monte_carlo() (in module navlie.utils.common)": [[135, "navlie.utils.common.monte_carlo"]], "randvec() (in module navlie.utils.common)": [[136, "navlie.utils.common.randvec"]], "schedule_sequential_measurements() (in module navlie.utils.common)": [[137, "navlie.utils.common.schedule_sequential_measurements"]], "state_interp() (in module navlie.utils.common)": [[138, "navlie.utils.common.state_interp"]], "van_loans() (in module navlie.utils.common)": [[139, "navlie.utils.common.van_loans"]], "navlie.utils.mixture": [[140, "module-navlie.utils.mixture"]], "gaussian_mixing() (in module navlie.utils.mixture)": [[141, "navlie.utils.mixture.gaussian_mixing"]], "gaussian_mixing_vectorspace() (in module navlie.utils.mixture)": [[142, "navlie.utils.mixture.gaussian_mixing_vectorspace"]], "reparametrize_gaussians_about_x_par() (in module navlie.utils.mixture)": [[143, "navlie.utils.mixture.reparametrize_gaussians_about_X_par"]], "update_x() (in module navlie.utils.mixture)": [[144, "navlie.utils.mixture.update_X"]], "navlie.utils.plot": [[145, "module-navlie.utils.plot"]], "cameraposevisualizer (class in navlie.utils.plot)": [[146, "navlie.utils.plot.CameraPoseVisualizer"]], "plot_pose() (navlie.utils.plot.cameraposevisualizer method)": [[146, "navlie.utils.plot.CameraPoseVisualizer.plot_pose"]], "plot_camera_poses() (in module navlie.utils.plot)": [[147, "navlie.utils.plot.plot_camera_poses"]], "plot_error() (in module navlie.utils.plot)": [[148, "navlie.utils.plot.plot_error"]], "plot_meas() (in module navlie.utils.plot)": [[149, "navlie.utils.plot.plot_meas"]], "plot_meas_by_model() (in module navlie.utils.plot)": [[150, "navlie.utils.plot.plot_meas_by_model"]], "plot_nees() (in module navlie.utils.plot)": [[151, "navlie.utils.plot.plot_nees"]], "plot_poses() (in module navlie.utils.plot)": [[152, "navlie.utils.plot.plot_poses"]], "set_axes_equal() (in module navlie.utils.plot)": [[153, "navlie.utils.plot.set_axes_equal"]]}})